{
  "code": [
  {
    "name": "/usr/bin/node",
    "type": "SHARED_LIB"
  },
  {
    "name": "_init",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<>(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_PROTO_ACCESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProtoThrower(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.362]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.578]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.580]",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.686]",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&>(_IO_FILE*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Maybe<bool> node::ProcessEmitWarning<int&>(node::Environment*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*>(_IO_FILE*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long>(_IO_FILE*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&, unsigned long, unsigned long>(_IO_FILE*, char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OUT_OF_RANGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.8]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_INTERRUPTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_TIMEOUT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_CACHED_DATA_REJECTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<std::string&>(char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<std::string&>(char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_LINK_FAILURE<std::string&>(v8::Isolate*, char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_VM_MODULE_LINK_FAILURE<std::string&>(v8::Isolate*, char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_NON_CONTEXT_AWARE_DISABLED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.20]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_CONTEXT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_BUFFER_CONTEXT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MEMORY_ALLOCATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_TOO_LARGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_BUFFER_TOO_LARGE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_OUT_OF_RANGE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_OUT_OF_BOUNDS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_BUFFER_OUT_OF_BOUNDS<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.8]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_THIS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_STRING_TOO_LONG<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.50]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.52]",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.63]",
    "type": "CPP"
  },
  {
    "name": "node::OnFatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<>(_IO_FILE*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*&>(_IO_FILE*, char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, char const*>(char const*, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int const&, int const&>(_IO_FILE*, char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*, int const&, int const&>(_IO_FILE*, char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::string&>(_IO_FILE*, char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<std::string>(char const*, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<std::string>(char const*, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::string>(_IO_FILE*, char const*, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.585]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.587]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned int, 0>(unsigned int const&) [clone .isra.684]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned int, 0>(unsigned int const&) [clone .isra.686]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.690]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.692]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned char, 0>(unsigned char const&) [clone .isra.696]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned char, 0>(unsigned char const&) [clone .isra.698]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, long, 0>(long const&) [clone .isra.707]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, long, 0>(long const&) [clone .isra.709]",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<>(node::AsyncWrap*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*&>(node::AsyncWrap*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, int&, char const*>(_IO_FILE*, char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*>(node::AsyncWrap*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&>(_IO_FILE*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&>(node::AsyncWrap*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&>(_IO_FILE*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&>(node::AsyncWrap*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&>(_IO_FILE*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&>(node::AsyncWrap*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&>(_IO_FILE*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&>(node::AsyncWrap*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&, int&>(_IO_FILE*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&, int&>(node::AsyncWrap*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned int&>(_IO_FILE*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned int&>(node::AsyncWrap*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&>(_IO_FILE*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&>(node::AsyncWrap*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&, unsigned long&>(_IO_FILE*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&, unsigned long&>(node::AsyncWrap*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<nghttp2_headers_category&>(_IO_FILE*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<nghttp2_headers_category&>(node::AsyncWrap*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long>(node::AsyncWrap*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&>(_IO_FILE*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&>(node::AsyncWrap*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int>(_IO_FILE*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int>(node::AsyncWrap*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int>(_IO_FILE*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int>(node::AsyncWrap*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, int&>(char const*, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, int&>(char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, int&>(char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&, unsigned int&, int&>(node::AsyncWrap*, char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char&>(char const*, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned long&, unsigned char&>(node::AsyncWrap*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.438]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_TRANSFER_OBJECT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_INVALID<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CLOSED_MESSAGE_PORT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.4]",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.4]",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ADDRESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned int, 0>(unsigned int const&) [clone .isra.179]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned int, 0>(unsigned int const&) [clone .isra.181]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.187]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.189]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned short, 0>(unsigned short const&) [clone .isra.193]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned short, 0>(unsigned short const&) [clone .isra.195]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned char, 0>(unsigned char const&) [clone .isra.205]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned char, 0>(unsigned char const&) [clone .isra.207]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, long, 0>(long const&) [clone .isra.201]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WASI_NOT_STARTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_WASI_NOT_STARTED(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned int&>(char const*, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned short&>(char const*, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&>(char const*, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char&, unsigned int&>(char const*, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<long&, unsigned char&, unsigned int&>(char const*, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned short&, unsigned int&>(char const*, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleInterrupt() [clone .part.60]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.283]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.285]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.305]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.307]",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.323]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PLATFORM_FOR_WORKER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WORKER_INIT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, char const*&, char const*&>(char const*, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&, char const*&, char const*&>(_IO_FILE*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&, char const*&, char const*&>(node::AsyncWrap*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.8]",
    "type": "CPP"
  },
  {
    "name": "node::ERR_STRING_TOO_LONG(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_MEMORY_ALLOCATION_FAILED(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.9]",
    "type": "CPP"
  },
  {
    "name": "node::ThrowErrStringTooLong(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<std::string, int>(char const*, std::string&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<std::string, int>(char const*, std::string&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.9]",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.143]",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*>(_IO_FILE*, char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&>(_IO_FILE*, char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const (&) [3]>(_IO_FILE*, char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_CIPHER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_CIPHER(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_DH_GROUP<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_DH_GROUP(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OSSL_EVP_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_OSSL_EVP_INVALID_DIGEST(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_ARGS<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PASSPHRASE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_PASSPHRASE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.187]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.189]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.193]",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.195]",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.225]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, char const*&>(_IO_FILE*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, char const*&>(node::AsyncWrap*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, int&>(_IO_FILE*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long, int&>(node::AsyncWrap*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "uv__cancelled",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::getParameters(icu_69::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_69::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_69::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MutablePatternModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MutablePatternModifier::getParameters(icu_69::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::toUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::ScientificModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::SimpleModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::ConstantAffixModifier::getParameters(icu_69::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MixedUnitLongNameHandler::getModifier(icu_69::number::impl::Signum, icu_69::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MixedUnitLongNameHandler::getModifier(icu_69::number::impl::Signum, icu_69::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::WholeStringBreakIterator::getText() const",
    "type": "CPP"
  },
  {
    "name": "icu_69::WholeStringBreakIterator::adoptText(icu_69::CharacterIterator*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::OS::Abort()",
    "type": "CPP"
  },
  {
    "name": "uv_library_shutdown",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10cares_wrap11ChannelWrapC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEEii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process12reverted_cveE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node19node_is_initializedE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6fs_dir9DirHandleC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEEP8uv_dir_s",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process13env_var_mutexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node20IsExceptionDecoratedEPNS_11EnvironmentEN2v85LocalINS2_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node2fs8BasenameERKSsS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node5http212Http2Session21callback_struct_savedE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process8metadataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13native_module18NativeModuleLoader9instance_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process17cli_options_mutexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11performance10timeOriginE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_nodedbg_const_ContextEmbedderIndex__kEnvironment__int",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11ProcessEmitEPNS_11EnvironmentEPKcN2v85LocalINS4_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process11umask_mutexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN6report17TriggerNodeReportEPN2v87IsolateEPN4node11EnvironmentEPKcS7_RKSsNS0_5LocalINS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11StatWatcher10InitializeEPNS_11EnvironmentEN2v85LocalINS3_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8WatchdogC2EPN2v87IsolateEmPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node26DecreaseSignalHandlerCountEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9inspector5AgentC2EPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8profiler20V8ProfilerConnectionC2EPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25PropertyCallbackArgumentsC2EPNS0_7IsolateENS0_6ObjectES4_NS0_8JSObjectENS_5MaybeINS0_11ShouldThrowEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10ApiNatives19InstantiateFunctionEPNS0_7IsolateENS0_6HandleINS0_13NativeContextEEENS4_INS0_20FunctionTemplateInfoEEENS0_11MaybeHandleINS0_4NameEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23FatalProcessOutOfMemoryEPNS0_7IsolateEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal5AsmJs19kSingleFunctionNameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm11AsmJsParserC2EPNS0_4ZoneEmPNS0_20Utf16CharacterStreamE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12AsmJsScannerC2EPNS0_20Utf16CharacterStreamE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm7AsmType14AsCallableTypeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29AstFunctionLiteralIdReindexerC2Emi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12AstRawString11InternalizeEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7AstNode20AsIterationStatementEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal26SourceTextModuleDescriptor20AstRawStringComparerclEPKNS0_12AstRawStringES5_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11CallPrinterC2EPNS0_7IsolateEbNS1_21SpreadErrorInArgsHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11VariableMapC2EPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21SourceRangeAstVisitorC2EmPNS0_10ExpressionEPNS0_14SourceRangeMapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8VariableC2EPS1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9Accessors12MakeAccessorEPNS0_7IsolateENS0_6HandleINS0_4NameEEEPFvNS_5LocalINS_4NameEEERKNS_20PropertyCallbackInfoINS_5ValueEEEEPFvS9_NS7_ISB_EERKNSA_INS_7BooleanEEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21Builtin_HandleApiCallEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26Builtin_ArrayPrototypeFillEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Builtin_ArrayBufferConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32Builtin_CallAsyncModuleFulfilledEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_BigIntConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8Builtins12CallFunctionENS0_19ConvertReceiverModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal40Builtin_CallSitePrototypeGetColumnNumberEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_MapPrototypeClearEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20Builtin_ConsoleDebugEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Builtin_DataViewConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Builtin_DateConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24Builtin_ErrorConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Builtin_FunctionConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Builtin_GlobalDecodeURIEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15Builtin_IllegalEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal38Builtin_StringPrototypeToUpperCaseIntlEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17Builtin_JsonParseEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal36Builtin_NumberPrototypeToExponentialEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal43Builtin_ObjectPrototypePropertyIsEnumerableEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29Builtin_ReflectDefinePropertyEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31Builtin_RegExpPrototypeToStringEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_AtomicsIsLockFreeEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Builtin_StringFromCodePointEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_SymbolConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Builtin_IsTraceCategoryEnabledEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal33Builtin_TypedArrayPrototypeBufferEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal39Builtin_FinalizationRegistryConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8Builtins24GetContinuationBailoutIdENS1_4NameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29BuiltinsConstantsTableBuilderC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16AssemblerOptions7DefaultEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal16CodeCommentEntry14comment_lengthEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8CodeDesc10InitializeEPS1_PNS0_9AssemblerEiiiii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11CodeFactory13RuntimeCEntryEPNS0_7IsolateEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal13CodeReference13constant_poolEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16CompilationCacheC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25UnoptimizedCompilationJob10ExecuteJobEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12ConstantPoolC2EPNS0_9AssemblerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24ExternalReferenceEncoderC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22ExternalReferenceTable9ref_name_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17ExternalReference6CreateEPNS_11ApiFunctionENS1_4TypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21FlushInstructionCacheEPvm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12HandlerTableC2ENS0_4CodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27CallInterfaceDescriptorData26InitializePlatformSpecificEiPKNS0_8RegisterE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24OptimizedCompilationInfoC2EPNS0_4ZoneEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEENS6_INS0_10JSFunctionEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24PendingOptimizationTable23PreparedForOptimizationEPNS0_7IsolateENS0_6HandleINS0_10JSFunctionEEEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21RegisterConfiguration7DefaultEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ShouldPadArgumentsEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9RelocInfo20kFillerCommentStringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14SafepointTableC2Emmjb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26SourcePositionTableBuilderC2ENS1_13RecordingModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoRKNS0_18SourcePositionInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal18StringConstantBase22AllocateStringConstantEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18TurboAssemblerBaseC2EPNS0_7IsolateERKNS0_16AssemblerOptionsENS0_18CodeObjectRequiredESt10unique_ptrINS0_15AssemblerBufferESt14default_deleteIS9_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26UnoptimizedCompilationInfoC2EPNS0_4ZoneEPNS0_9ParseInfoEPNS0_15FunctionLiteralE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_assert_scope.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18CompilerDispatcher3JobC2EPNS0_21BackgroundCompileTaskE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27OptimizingCompileDispatcherD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9DateCacheC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10DateParser11DayComposer5WriteEPd",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8Coverage14CollectPreciseEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13DebugEvaluate6GlobalEPNS0_7IsolateENS0_6HandleINS0_6StringEEENS_5debug18EvaluateGlobalModeENS0_8REPLModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14FrameInspectorC2EPNS0_13StandardFrameEiPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v85debug16PropertyIterator6CreateENS_5LocalINS_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v85debug13ScopeIterator17CreateForFunctionEPNS_7IsolateENS_5LocalINS_8FunctionEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13ScopeIteratorC2EPNS0_7IsolateEPNS0_14FrameInspectorENS1_15ReparseStrategyE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v85debug18StackTraceIterator25SupportsWasmDebugEvaluateEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11TypeProfile7CollectEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal5DebugC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8LiveEdit11PatchScriptEPNS0_7IsolateENS0_6HandleINS0_6ScriptEEENS4_INS0_6StringEEEbPNS_5debug14LiveEditResultE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15DeoptimizerDataC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21CompilationStatistics16RecordPhaseStatsEPKcS3_RKNS1_10BasicStatsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal15V8NameConverter21InitExternalRefsCacheEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16EhFrameConstants22kEhFrameTerminatorSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_gdb_jit.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_objects_debug.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal6Object5PrintEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13PerfJitLogger21kFilenameFormatStringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22ClobberDoubleRegistersEdddd",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9Execution4CallEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES6_iPS6_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10StackFrame33return_address_location_resolver_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14FutexEmulation6mutex_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15InterruptsScopeC2EPNS0_7IsolateElNS1_4ModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19DefaultEmbeddedBlobEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15MessageLocationC2ENS0_6HandleINS0_6ScriptEEEii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14MicrotaskQueue17kRingBufferOffsetE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal27OffThreadTransferHandleBase16ToHandleLocationEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10Protectors30InvalidateArrayBufferDetachingEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26OptimizationReasonToStringENS0_18OptimizationReasonE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_simulator_base.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10StackGuard13SetStackLimitEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14ThreadLocalTop10InitializeEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86Locker10InitializeEPNS_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21CpuTraceMarkExtension25GetNativeFunctionTemplateEPNS_7IsolateENS_5LocalINS_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26ExternalizeStringExtension7kSourceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11GCExtension25GetNativeFunctionTemplateEPNS_7IsolateENS_5LocalINS_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27IgnitionStatisticsExtension25GetNativeFunctionTemplateEPNS_7IsolateENS_5LocalINS_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19StatisticsExtension7kSourceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15FLAG_use_strictE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal13GlobalHandles22OnStackTracedNodeSpace22GetStackAddressForSlotEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11HandleScope15NumberOfHandlesEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12LocalHandlesC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17PersistentHandlesC2EPNS0_7IsolateEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20ArrayBufferCollector29QueueOrFreeGarbageAllocationsESt6vectorISt10shared_ptrINS0_12BackingStoreEESaIS5_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15ArrayBufferList6AppendEPNS0_20ArrayBufferExtensionE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23LocalArrayBufferTrackerD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16BasicMemoryChunkC2Emmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14CodeStatistics31RecordCodeAndMetadataStatisticsENS0_10HeapObjectEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26CombinedHeapObjectIteratorC2EPNS0_4HeapENS0_18HeapObjectIterator20HeapObjectsFilteringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19ConcurrentAllocator33PerformCollectionAndAllocateAgainEiNS0_19AllocationAlignmentENS0_16AllocationOriginE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24ConcurrentMarkingVisitor4CastINS0_10ConsStringEEET_NS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23LocalEmbedderHeapTracer15SetRemoteTracerEPNS_18EmbedderHeapTracerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_factory_base.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Factory11CodeBuilderC2EPNS0_7IsolateERKNS0_8CodeDescENS0_4Code4KindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31FinalizationRegistryCleanupTaskC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17GCIdleTimeHandler22kConservativeTimeRatioE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8GCTracer32worker_thread_runtime_call_statsEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11V8HeapTrait5kNameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Heap_PageFlagsAreConsistentENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21IncrementalMarkingJob5StartEPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18IncrementalMarking8Observer4StepEimm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22InvalidatedSlotsFilter8OldToOldEPNS0_11MemoryChunkE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15ItemParallelJob4TaskC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9LargePage10InitializeEPNS0_4HeapEPNS0_11MemoryChunkENS0_13ExecutabilityE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9LocalHeapC2EPNS0_4HeapESt10unique_ptrINS0_17PersistentHandlesESt14default_deleteIS5_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Marking16kWhiteBitPatternE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22MarkingWorklistsHolderD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6Bitmap5kSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11MemoryChunk19DiscardUnusedMemoryEmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21MeasureMemoryDelegateC2EPNS0_7IsolateENS0_6HandleINS0_13NativeContextEEENS4_INS0_9JSPromiseEEENS_17MeasureMemoryModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13MemoryReducer12kLongDelayMsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19FieldStatsCollector21GetInobjectFieldStatsENS0_3MapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_objects_visiting.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16OffThreadFactoryC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13OffThreadHeapC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12ReadOnlyHeap5SetUpEPNS0_7IsolateEPNS0_20ReadOnlyDeserializerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13ReadOnlySpaceC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15GlobalSafepointC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11ScavengeJob30YoungGenerationTaskTriggerSizeEPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ScavengerCollectorC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10TypedSlotsD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24PagedSpaceObjectIteratorC2EPNS0_4HeapEPNS0_10PagedSpaceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21StressMarkingObserverC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22StressScavengeObserverC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7SweeperC2EPNS0_4HeapEPNS0_26MajorNonAtomicMarkingStateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16CallOptimizationC2EPNS0_7IsolateENS0_6HandleINS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11LoadHandler17LoadFromPrototypeEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_10JSReceiverEEENS4_INS0_3SmiEEENS0_17MaybeObjectHandleESB_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7ICStats9instance_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal2IC23TransitionMarkFromStateENS0_16InlineCacheStateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9StubCacheC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15SourceCodeCache10InitializeEPNS0_7IsolateEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16IsolateAllocatorC2ENS0_21IsolateAllocationModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29InitializeExternalStartupDataEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9init_onceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter21BytecodeArrayAccessorC2ESt10unique_ptrINS1_21AbstractBytecodeArrayESt14default_deleteIS4_EEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter20BytecodeArrayBuilderC2EPNS0_4ZoneEiiPNS0_18FeedbackVectorSpecENS0_26SourcePositionTableBuilder13RecordingModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter21BytecodeArrayIteratorC2ESt10unique_ptrINS1_21AbstractBytecodeArrayESt14default_deleteIS4_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter27BytecodeArrayRandomIteratorC2ESt10unique_ptrINS1_21AbstractBytecodeArrayESt14default_deleteIS4_EEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter19BytecodeArrayWriter24kMaxSizeOfPackedBytecodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter15BytecodeDecoder21DecodeRegisterOperandEmNS1_11OperandTypeENS1_12OperandScaleE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter23CreateArrayLiteralFlags6EncodeEbi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter17BytecodeGenerator12ControlScope14PerformCommandENS3_7CommandEPNS0_9StatementEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter14BytecodeLabels3NewEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal11interpreter12BytecodeNode5PrintERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreterlsERSoRKNS1_18BytecodeSourceInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter20ConstantArrayBuilder18ConstantArraySliceC2EPNS0_4ZoneEmmNS1_11OperandSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter27BreakableControlFlowBuilderD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter19HandlerTableBuilderC2EPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter16IntrinsicsHelper11IsSupportedENS0_7Runtime10FunctionIdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter11InterpreterC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21JsonParseInternalizer11InternalizeEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES6_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13JsonStringifyEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES5_S5_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12TracingFlags13runtime_statsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal3Log19kLogToTemporaryFileE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15CodeEventLoggerC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10BignumDtoaEdNS0_14BignumDtoaModeEiNS0_6VectorIcEEPiS4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6BignumC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14StringToDoubleEPKcid",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13DoubleToAsciiEdNS0_8DtoaModeEiNS0_6VectorIcEEPiS4_S4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8FastDtoaEdNS0_12FastDtoaModeEiNS0_6VectorIcEEPiS4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13FastFixedDtoaEdiNS0_6VectorIcEEPiS3_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10MathRandom17InitializeContextEPNS0_7IsolateENS0_6HandleINS0_7ContextEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6StrtodENS0_6VectorIKcEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12BackingStore19ReserveAddressSpaceEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal4Code20safepoint_table_sizeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ScriptContextTable6ExtendENS0_6HandleIS1_EENS2_INS0_7ContextEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal9DebugInfo7IsEmptyEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23ElementsKindToShiftSizeENS0_12ElementsKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32ArrayConstructInitializeElementsENS0_6HandleINS0_7JSArrayEEEPNS0_9ArgumentsILNS0_13ArgumentsTypeE1EEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17EmbedderDataArray14EnsureCapacityEPNS0_7IsolateENS0_6HandleIS1_EEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18FeedbackVectorSpec7AddSlotENS0_16FeedbackSlotKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9FieldType4NoneEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4Intl18ToLatin1LowerTableEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13JSArrayBuffer5SetupENS0_10SharedFlagESt10shared_ptrINS0_12BackingStoreEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17JSV8BreakIterator3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_PKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10JSCollator15ResolvedOptionsEPNS0_7IsolateENS0_6HandleIS1_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16JSDateTimeFormat15ResolvedOptionsEPNS0_7IsolateENS0_6HandleIS1_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14JSDisplayNames3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12JSListFormat3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8JSLocale16Is38AlphaNumListERKSs",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14JSNumberFormat32MinimumIntegerDigitsFromSkeletonERKN6icu_6913UnicodeStringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10JSReceiver11HasPropertyEPNS0_14LookupIteratorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal13JSPluralRules12TypeAsStringEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14JSRegExpResult18GetAndCacheIndicesEPNS0_7IsolateENS0_6HandleIS1_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20JSRelativeTimeFormat3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal17JSSegmentIterator10GetSegmentEPNS0_7IsolateEii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11JSSegmenter3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14KeyAccumulator7GetKeysENS0_6HandleINS0_10JSReceiverEEENS0_17KeyCollectionModeENS0_14PropertyFilterENS0_17GetKeysConversionEbb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16LayoutDescriptor3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_15DescriptorArrayEEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_literal_objects.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21DescriptorLookupCache5ClearEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14LookupIterator3KeyC2EPNS0_7IsolateENS0_6HandleINS0_6ObjectEEEPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22ManagedObjectFinalizerERKNS_16WeakCallbackInfoIvEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10MapUpdaterC2EPNS0_7IsolateENS0_6HandleINS0_3MapEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal3Map24GetPrototypeChainRootMapEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6Module9SetStatusENS1_6StatusE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14GetShouldThrowEPNS0_7IsolateENS_5MaybeINS0_11ShouldThrowEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14OrderedHashSet3AddEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21OSROptimizedCodeCache14kInitialLengthE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18PropertyDescriptor8ToObjectEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoRKNS0_18PropertyAttributesE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9ScopeInfo18CreateForWithScopeEPNS0_7IsolateENS0_11MaybeHandleIS1_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal16SourceTextModule21GetSharedFunctionInfoEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15StackTraceFrame13GetLineNumberENS0_6HandleIS1_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16StringComparator5State4InitENS0_6StringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15SyntheticModule9SetExportEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_6StringEEENS4_INS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_tagged_impl.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25TemplateObjectDescription17GetTemplateObjectEPNS0_7IsolateENS0_6HandleINS0_13NativeContextEEENS4_IS1_EENS4_INS0_18SharedFunctionInfoEEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19TransitionsAccessor21HasSimpleTransitionToENS0_3MapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoNS0_19BinaryOperationHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15ValueSerializerC2EPNS0_7IsolateEPNS_15ValueSerializer8DelegateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11RootVisitor8RootNameENS0_4RootE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16FuncNameInferrerC2EPNS0_15AstValueFactoryE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13LiteralBuffer11NewCapacityEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23UnoptimizedCompileFlagsC2EPNS0_7IsolateEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6Parser18DefaultConstructorEPKNS0_12AstRawStringEbii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7parsing12ParseProgramEPNS0_9ParseInfoENS0_6HandleINS0_6ScriptEEENS0_11MaybeHandleINS0_9ScopeInfoEEEPNS0_7IsolateENS1_29ReportErrorsAndStatisticsModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30PendingCompilationErrorHandler14MessageDetails9SetStringENS0_6HandleINS0_6StringEEEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19PreparseDataBuilderC2EPNS0_4ZoneEPS1_PSt6vectorIPvSaIS6_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal9PreParser13GetIdentifierEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9Processor21AssignUndefinedBeforeEPNS0_9StatementE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal28BufferedUtf16CharacterStreamC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Scanner13BookmarkScope11kNoBookmarkE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal5Token5name_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19AllocationTraceNodeC2EPNS0_19AllocationTraceTreeEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14ProfilingScopeC2EPNS0_7IsolateEPNS0_16ProfilerListenerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12HeapProfilerC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13HeapGraphEdgeC2ENS1_4TypeEPKcPNS0_9HeapEntryES6_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19SourcePositionTable11SetPositionEiii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16ProfilerListenerC2EPNS0_7IsolateEPNS0_17CodeEventObserverENS_22CpuProfilingNamingModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20SamplingHeapProfiler8Observer21GetNextSampleIntervalEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14StringsStorage12StringsMatchEPvS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10TickSample4InitEPNS0_7IsolateERKNS_13RegisterStateENS1_17RecordCEntryFrameEbbNS_4base9TimeDeltaE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22TracingCpuProfilerImplC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17RegExpDisjunction6AcceptEPNS0_13RegExpVisitorEPv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23RegExpBytecodeGeneratorC2EPNS0_7IsolateEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal34RegExpBytecodePeepholeOptimization16OptimizeBytecodeEPNS0_7IsolateEPNS0_4ZoneENS0_6HandleINS0_6StringEEEPKhiRKNS0_16ZoneUnorderedMapIiiNS_4base4hashIiEESt8equal_toIiEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31RegExpBytecodeDisassembleSingleEPKhS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10RegExpAtom6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10RegExpTree12AppendToTextEPNS0_10RegExpTextEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10DotPrinter8DotPrintEPKcPNS0_10RegExpNodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19IrregexpInterpreter5MatchEPNS0_7IsolateENS0_8JSRegExpENS0_6StringEPiiiNS0_6RegExp10CallOriginE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26RegExpMacroAssemblerTracerC2EPNS0_7IsolateEPNS0_20RegExpMacroAssemblerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20RegExpMacroAssemblerC2EPNS0_7IsolateEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12RegExpParserC2EPNS0_16FlatStringReaderENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_7IsolateEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16RegExpStackScopeC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11RegExpUtils20GenericCaptureGetterEPNS0_7IsolateENS0_6HandleINS0_15RegExpMatchInfoEEEiPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6RegExp7CompileEPNS0_7IsolateENS0_6HandleINS0_8JSRegExpEEENS4_INS0_6StringEEENS_4base5FlagsINS5_4FlagEiEEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10RootsTable11root_names_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Runtime_TransitionElementsKindEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21Runtime_AtomicsLoad64EiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29Runtime_BigIntCompareToBigIntEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal34Runtime_ThrowUnsupportedSuperErrorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15Runtime_TheHoleEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19Runtime_CompileLazyEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Runtime_DateCurrentTimeEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal28Runtime_DebugBreakOnBytecodeEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22Runtime_ForInEnumerateEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31Runtime_FunctionGetScriptSourceEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal35Runtime_AtomicsNumWaitersForTestingEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32Runtime_AsyncFunctionAwaitCaughtEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19Runtime_AccessCheckEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_runtime_interpreter.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18Runtime_FormatListEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Runtime_CreateObjectLiteralEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Runtime_DynamicImportCallEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18Runtime_IsValidSmiEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Runtime17GetObjectPropertyEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES6_Pb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11Runtime_AddEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal35Runtime_PromiseRejectEventFromStackEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17Runtime_IsJSProxyEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19CompiledReplacement7CompileEPNS0_7IsolateENS0_6HandleINS0_8JSRegExpEEENS4_INS0_6StringEEEii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29Runtime_ThrowConstAssignErrorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Runtime_GetSubstitutionEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Runtime_CreatePrivateSymbolEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal33Runtime_ClearMegamorphicStubCacheEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Runtime_ArrayBufferDetachEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31Runtime_WasmIsValidFuncRefValueEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal52Runtime_ShrinkFinalizationRegistryUnregisterTokenMapEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Runtime17NeedsExactContextENS1_10FunctionIdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10ScriptDataC2EPKhi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19ContextDeserializer18DeserializeContextEPNS0_7IsolateEPKNS0_12SnapshotDataEbNS0_6HandleINS0_13JSGlobalProxyEEENS_33DeserializeInternalFieldsCallbackE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17ContextSerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEEPNS0_17StartupSerializerENS_31SerializeInternalFieldsCallbackE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21DeserializerAllocator11AllocateRawENS0_13SnapshotSpaceEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12Deserializer10InitializeEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17InstructionStream11PcIsOffHeapEPNS0_7IsolateEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ObjectDeserializerC2EPKNS0_18SerializedCodeDataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20ReadOnlyDeserializer15DeserializeIntoEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ReadOnlySerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15RootsSerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEENS0_9RootIndexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19SerializerAllocatorC2EPNS0_10SerializerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22SerializerDeserializer7IterateEPNS0_7IsolateEPNS0_11RootVisitorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10SerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19GetUncompressedSizeEPKh",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14SerializedData12AllocateDataEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16SnapshotByteSink6PutIntEmPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8ChecksumENS0_6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15MaybeDecompressERKNS0_6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19StartupDeserializer15DeserializeIntoEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17StartupSerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEEPNS0_18ReadOnlySerializerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25StringBuilderConcatLengthEiNS0_10FixedArrayEiPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_string_case.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19HeapStringAllocator8allocateEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11Utf8DecoderC2ERKNS0_6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN7unibrow4Utf814CalculateValueEPKhmPm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal3Uri6DecodeEPNS0_7IsolateENS0_6HandleINS0_6StringEEEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10CancelableD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v87tracing11TracedValue6CreateEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v87tracing23TracingCategoryObserver9instance_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12RootIndexMapC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24GetPlatformPageAllocatorEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal9BitVector5CountEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15IdentityMapBaseD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22init_memcopy_functionsEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12DbgStreamBufC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19SimpleStringBuilderC2Ei",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Version6major_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm16LiftoffAssembler11kWasmIntPtrE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm25ExecuteLiftoffCompilationEPNS0_19AccountingAllocatorEPNS1_14CompilationEnvERKNS1_12FunctionBodyEiNS1_12ForDebuggingEPNS0_8CountersEPNS1_12WasmFeaturesENS0_6VectorIiEEPSt10unique_ptrINS1_14DebugSideTableESt14default_deleteISH_EESF_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm16DecodeLocalDeclsERKNS1_12WasmFeaturesEPNS1_14BodyLocalDeclsEPKhS8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm21WasmInstructionBufferD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm12BuildTFGraphEPNS0_19AccountingAllocatorERKNS1_12WasmFeaturesEPKNS1_10WasmModuleEPNS0_8compiler16WasmGraphBuilderEPS4_RKNS1_12FunctionBodyEPNSA_15NodeOriginTableE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm18JumpTableAssembler23EmitLazyCompileJumpSlotEjm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm20TraceMemoryOperationENS1_13ExecutionTierEPKNS1_17MemoryTracingInfoEiiPh",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm16CompilationStateD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm11SectionNameENS1_11SectionCodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm27InstantiateToInstanceObjectEPNS0_7IsolateEPNS1_12ErrorThrowerENS0_6HandleINS0_16WasmModuleObjectEEENS0_11MaybeHandleINS0_10JSReceiverEEENS9_INS0_13JSArrayBufferEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm16StreamingDecoder15OnBytesReceivedENS0_6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm22DisjointAllocationPool5MergeENS_4base13AddressRegionE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm17DebugEvaluateImplENS0_6VectorIKhEENS0_6HandleINS0_18WasmInstanceObjectEEEPNS0_13StandardFrameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm20GetModuleScopeObjectENS0_6HandleINS0_18WasmInstanceObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm17NativeModuleCache20MaybeGetNativeModuleENS1_12ModuleOriginENS0_6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm17f32_trunc_wrapperEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm12WasmFeatures9FromFlagsEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm22WasmImportWrapperCache17ModificationScopeixERKSt4pairINS0_8compiler18WasmImportCallKindEPKNS0_9SignatureINS1_9ValueTypeEEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm15WasmInterpreter6Thread5stateEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v813WasmStreamingC2ESt10unique_ptrINS0_17WasmStreamingImplESt14default_deleteIS2_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm19WasmFunctionBuilderC2EPNS1_17WasmModuleBuilderE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm19WasmModuleSourceMapC2EPNS_7IsolateENS_5LocalINS_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm15WasmElemSegment10kNullIndexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16WasmModuleObject3NewEPNS0_7IsolateESt10shared_ptrINS0_4wasm12NativeModuleEENS0_6HandleINS0_6ScriptEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm11WasmOpcodes10OpcodeNameENS1_10WasmOpcodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm9WasmError11FormatErrorEPKcSt9__va_list",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm22NativeModuleSerializerC2EPKNS1_12NativeModuleENS0_6VectorIKPNS1_8WasmCodeEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19AccountingAllocatorD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4ZoneC2EPNS0_19AccountingAllocatorEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector21generateCustomPreviewEiRKNS_8String16EN2v85LocalINS3_6ObjectEEENS3_10MaybeLocalINS3_5ValueEEEiPSt10unique_ptrINS_8protocol7Runtime13CustomPreviewESt14default_deleteISD_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector14InjectedScriptC2EPNS_16InspectedContextEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector16InspectedContextC2EPNS_15V8InspectorImplERKNS_13V8ContextInfoEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector23searchInTextByLinesImplEPNS_18V8InspectorSessionERKNS_8String16ES4_bb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector8String16C2EPKtm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK12v8_inspector8protocol6Binary8toBase64Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector28SetMaxAsyncTaskStacksForTestEPNS_11V8InspectorEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector9V8ConsoleC2EPNS_15V8InspectorImplE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector18V8ConsoleAgentImplC2EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector16V8ConsoleMessageC2ENS_15V8MessageOriginEdRKNS_8String16E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector12V8DebuggerIdC2ESt4pairIllE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector19V8DebuggerAgentImplC2EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector16V8DebuggerScript6CreateEPN2v87IsolateENS1_5LocalINS1_5debug6ScriptEEEbPNS_19V8DebuggerAgentImplEPNS_17V8InspectorClientE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector23V8HeapProfilerAgentImplC2EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector11V8Inspector6createEPN2v87IsolateEPNS_17V8InspectorClientE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector18V8InspectorSession17canDispatchMethodENS_10StringViewE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector19V8ProfilerAgentImplC2EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector7V8RegexC2EPNS_15V8InspectorImplERKNS_8String16Ebb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector18V8RuntimeAgentImplC2EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector16V8StackTraceImpl25maxCallStackSizeToCaptureE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN12v8_inspector11ValueMirrorD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN8v8_crdtp4json8platform6StrToDEPKcPd",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4Heap28GetIsolateFromWritableObjectENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11CpuFeatures9ProbeImplEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11CpuFeatures11FlushICacheEPvm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25DispatchingDecoderVisitor13AppendVisitorEPNS0_14DecoderVisitorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal11Instruction6IsLoadEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23CallInterfaceDescriptor15ContextRegisterEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14TurboAssembler14DefaultTmpListEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21VectorFormatHalfWidthENS0_12VectorFormatE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10float_signEf",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13CodeGenerator24AssembleDeconstructFrameEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20InstructionScheduler18SchedulerSupportedEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19InstructionSelector14VisitStackSlotEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19UnwindingInfoWriter21BeginInstructionBlockEiPKNS1_16InstructionBlockE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12DebugCodegen31GenerateHandleDebuggerStatementEPNS0_14MacroAssemblerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11Deoptimizer28kSupportsFixedDeoptExitSizesE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20DisassemblingDecoderC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16EhFrameConstants20kCodeAlignmentFactorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15JavaScriptFrame11fp_registerEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25RegExpMacroAssemblerARM6415kRegExpCodeSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_class_definitions_tq.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Factory23NewExportedSubClassBaseENS0_6HandleINS0_10HeapObjectEEES4_NS0_14AllocationTypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21TorqueGeneratedStructINS0_6StructENS0_10HeapObjectEE11StructPrintERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_v8dbg_frametype_EntryFrame",
    "type": "CPP"
  },
  {
    "name": "OPENSSL_cpuid_setup",
    "type": "CPP"
  },
  {
    "name": "main",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node16NodeMainInstance23GetEmbeddedSnapshotBlobEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v84base20BoundedPageAllocatorC2EPNS_13PageAllocatorEmmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v84base15RegionAllocatorC2Emmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13CodeGeneratorC2EPNS0_4ZoneEPNS1_5FrameEPNS1_7LinkageEPNS1_19InstructionSequenceEPNS0_24OptimizedCompilationInfoEPNS0_7IsolateENS_4base8OptionalINS1_9OsrHelperEEEiPNS0_20JumpOptimizationInfoENS0_24PoisoningMitigationLevelERKNS0_16AssemblerOptionsEimmSt10unique_ptrINS0_15AssemblerBufferESt14default_deleteISQ_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler11GapResolver7ResolveEPNS1_12ParallelMoveE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19InstructionSelectorC2EPNS0_4ZoneEmPNS1_7LinkageEPNS1_19InstructionSequenceEPNS1_8ScheduleEPNS1_19SourcePositionTableEPNS1_5FrameENS2_21EnableSwitchJumpTableEPNS0_11TickCounterEPmSI_NS2_18SourcePositionModeENS2_8FeaturesENS2_16EnableSchedulingENS2_29EnableRootsRelativeAddressingENS0_24PoisoningMitigationLevelENS2_20EnableTraceTurboJsonE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12GetRegConfigE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13MachineTypeOfINS0_3SmiEvE5valueE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilerlsERSoNS1_10BranchHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19SourcePositionTableC2EPNS1_5GraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14FeedbackSourceC2ENS0_6HandleINS0_14FeedbackVectorEEENS0_12FeedbackSlotE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10hash_valueERKNS1_23OutputFrameStateCombineE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler5FrameC2Ei",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler5GraphC2EPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler7JSGraph18CEntryStubConstantEiNS0_14SaveFPRegsModeENS0_8ArgvModeEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler24FunctionTemplateInfoDataC2EPNS1_12JSHeapBrokerEPPNS1_10ObjectDataENS0_6HandleINS0_20FunctionTemplateInfoEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilerlsERSoRKNS1_13CallFrequencyE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilerlsERSoRKNS1_14CallDescriptor4KindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12MachineGraph13Int32ConstantEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilereqENS1_19StoreRepresentationES2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14NodeProperties11IsValueEdgeENS1_4EdgeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler4Node15OutOfLineInputs3NewEPNS0_4ZoneEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18OperatorProperties15HasContextInputEPKNS1_8OperatorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler8OperatorC2EtNS_4base5FlagsINS2_8PropertyEhEEPKcmmmmmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22PipelineCompilationJobC2EPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEENS5_INS0_10JSFunctionEEENS0_9BailoutIdEPNS0_15JavaScriptFrameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19RawMachineAssemblerC2EPNS0_7IsolateEPNS1_5GraphEPNS1_14CallDescriptorENS0_21MachineRepresentationENS_4base5FlagsINS1_22MachineOperatorBuilder4FlagEjEENSC_21AlignmentRequirementsENS0_24PoisoningMitigationLevelE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21RedundancyEliminationC2EPNS1_15AdvancedReducer6EditorEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10BasicBlockC2EPNS0_4ZoneENS2_2IdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler24ScheduledMachineLoweringC2EPNS1_7JSGraphEPNS1_8ScheduleEPNS0_4ZoneEPNS1_19SourcePositionTableEPNS1_15NodeOriginTableENS0_24PoisoningMitigationLevelE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9SchedulerC2EPNS0_4ZoneEPNS1_5GraphEPNS1_8ScheduleENS_4base5FlagsINS2_4FlagEiEEmPNS0_11TickCounterE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14SelectLoweringC2EPNS1_16JSGraphAssemblerEPNS1_5GraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler5Hints15EnsureAllocatedEPNS0_4ZoneEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22RepresentationSelector12EnqueueInputILNS1_5PhaseE0EEEvPNS1_4NodeEiNS1_7UseInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler25SimplifiedOperatorReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10hash_valueENS1_14BaseTaggednessE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler16StateValuesCacheC2EPNS1_7JSGraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21StoreStoreElimination3RunEPNS1_7JSGraphEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9TypeCache3GetEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20TypeNarrowingReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler17TypedOptimizationC2EPNS1_15AdvancedReducer6EditorEPNS1_23CompilationDependenciesEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler5TyperC2EPNS1_12JSHeapBrokerENS_4base5FlagsINS2_4FlagEiEEPNS1_5GraphEPNS0_11TickCounterE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9RangeType6Limits7IsEmptyEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21ValueNumberingReducerC2EPNS0_4ZoneES4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler8Verifier7Visitor11CheckSwitchEPNS1_4NodeERKNS1_8AllNodesE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler16WasmGraphBuilderC2EPNS0_4wasm14CompilationEnvEPNS0_4ZoneEPNS1_12MachineGraphEPKNS0_9SignatureINS3_9ValueTypeEEEPNS1_19SourcePositionTableE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13AccessBuilder17ForExternalIntPtrEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilerlsERSoNS1_10AccessModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler24AddTypeAssertionsReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler8AllNodesC2EPNS0_4ZoneEPKNS1_5GraphEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler11FrameEliderC2EPNS1_19InstructionSequenceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20InstructionScheduler19SchedulingQueueBase7AddNodeEPNS2_17ScheduleGraphNodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13JumpThreading17ComputeForwardingEPNS0_4ZoneEPNS0_10ZoneVectorINS1_9RpoNumberEEEPNS1_19InstructionSequenceEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18LiveRangeSeparator8SplinterEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13MoveOptimizerC2EPNS0_4ZoneEPNS1_19InstructionSequenceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler25RegisterAllocatorVerifierC2EPNS0_4ZoneEPKNS0_21RegisterConfigurationEPKNS1_19InstructionSequenceEPKNS1_5FrameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler11UsePositionC2ENS1_16LifetimePositionEPNS1_18InstructionOperandEPvNS1_19UsePositionHintTypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22BasicBlockInstrumentor10InstrumentEPNS0_24OptimizedCompilationInfoEPNS1_5GraphEPNS1_8ScheduleEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler17BranchEliminationC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS0_4ZoneENS2_5PhaseE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23BytecodeLoopAssignmentsC2EiiPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20BytecodeGraphBuilder11EnvironmentC2EPS2_iiNS0_11interpreter8RegisterEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler16BytecodeLivenessC2EiPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler7Linkage24GetSimplifiedCDescriptorEPNS0_4ZoneEPKNS0_9SignatureINS0_11MachineTypeEEENS_4base5FlagsINS1_14CallDescriptor4FlagEiEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21CheckpointEliminationC2EPNS1_15AdvancedReducer6EditorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15CommonNodeCache20FindExternalConstantENS0_17ExternalReferenceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21CommonOperatorReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_5GraphEPNS1_12JSHeapBrokerEPNS1_21CommonOperatorBuilderEPNS1_22MachineOperatorBuilderEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23CompilationDependenciesC2EPNS1_12JSHeapBrokerEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22ConstantFoldingReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18ControlEquivalence3RunEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20ControlFlowOptimizerC2EPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS1_22MachineOperatorBuilderEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18CsaLoadElimination6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19DeadCodeEliminationC2EPNS1_15AdvancedReducer6EditorEPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23EffectControlLinearizer3RunEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21EscapeAnalysisReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphENS1_20EscapeAnalysisResultEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18EffectGraphReducerC2EPNS1_5GraphESt8functionIFvPNS1_4NodeEPNS2_9ReductionEEEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14GraphAssembler17BasicBlockUpdaterC2EPNS1_8ScheduleEPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler7Reducer8FinalizeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12GraphTrimmerC2EPNS0_4ZoneEPNS1_5GraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler31get_cached_trace_turbo_filenameEPNS0_24OptimizedCompilationInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13Int64LoweringC2EPNS1_5GraphEPNS1_22MachineOperatorBuilderEPNS1_21CommonOperatorBuilderEPNS0_4ZoneEPNS0_9SignatureINS0_21MachineRepresentationEEESt10unique_ptrINS1_24Int64LoweringSpecialCaseESt14default_deleteISG_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22JSCallReducerAssembler19SpeculativeToNumberENS0_5TNodeINS0_6ObjectEEENS1_19NumberOperationHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23JSContextSpecialization6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler16JSCreateLowering6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler17JSGenericLoweringC2EPNS1_7JSGraphEPNS1_15AdvancedReducer6EditorEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler17JSHeapCopyReducerC2EPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19JSInliningHeuristic16CollectFunctionsEPNS1_4NodeEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9JSInliner10InlineCallEPNS1_4NodeES4_S4_S4_S4_S4_S4_RKNS0_10ZoneVectorIS4_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19JSIntrinsicLoweringC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler29JSNativeContextSpecialization27should_disallow_heap_accessEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18JSTypeHintLoweringC2EPNS1_12JSHeapBrokerEPNS1_7JSGraphENS1_17FeedbackVectorRefENS_4base5FlagsINS2_4FlagEiEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15JSTypedLoweringC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15LoadElimination6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10LoopFinder13BuildLoopTreeEPNS1_5GraphEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15PeeledIteration3mapEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21LoopVariableOptimizerC2EPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20MachineGraphVerifier3RunEPNS1_5GraphEPKNS1_8ScheduleEPNS1_7LinkageEbPKcPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22MachineOperatorReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_12MachineGraphEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12MapInferenceC2EPNS1_12JSHeapBrokerEPNS1_4NodeES6_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14MemoryLoweringC2EPNS1_7JSGraphEPNS0_4ZoneEPNS1_16JSGraphAssemblerENS0_24PoisoningMitigationLevelENS2_17AllocationFoldingESt8functionIFvPNS1_4NodeESD_PKcS6_EESF_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15MemoryOptimizerC2EPNS1_7JSGraphEPNS0_4ZoneENS0_24PoisoningMitigationLevelENS1_14MemoryLowering17AllocationFoldingEPKcPNS0_11TickCounterE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14NodeMarkerBaseC2EPNS1_5GraphEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler11NodeMatcher12IsComparisonEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler10NodeOrigin9PrintJsonERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14OperationTyperC2EPNS1_12JSHeapBrokerEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9OsrHelperC2EPNS0_24OptimizedCompilationInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18PipelineStatistics11CommonStats5BeginEPS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler21PropertyAccessBuilder5graphEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler10Truncation11descriptionEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18SimdScalarLoweringC2EPNS1_12MachineGraphEPNS0_9SignatureINS0_21MachineRepresentationEEE",
    "type": "CPP"
  },
  {
    "name": "_start",
    "type": "CPP"
  },
  {
    "name": "call_weak_fn",
    "type": "CPP"
  },
  {
    "name": "deregister_tm_clones",
    "type": "CPP"
  },
  {
    "name": "register_tm_clones",
    "type": "CPP"
  },
  {
    "name": "__do_global_dtors_aux",
    "type": "CPP"
  },
  {
    "name": "frame_dummy",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::AsyncResource(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_resource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_trigger_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::CallbackScope::CallbackScope(node::AsyncResource*)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::AsyncWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(v8::Isolate*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::Close()",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::~InternalCallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::~CallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Object>, std::allocator<v8::Global<v8::Object> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(char const*, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeBytes(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeWrite(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::LoadEnvironment(node::Environment*, char const*, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)::{lambda(node::StartExecutionCallbackInfo const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::LoadEnvironment(node::Environment*, char const*, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)::{lambda(node::StartExecutionCallbackInfo const&)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::AllowWasmCodeGenerationCallback(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::PrepareStackTraceCallback(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::ShouldAbortOnUncaughtException(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferAllocator::Create(bool)",
    "type": "CPP"
  },
  {
    "name": "node::CreateArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::FreeArrayBufferAllocator(node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateCreateParamsForNode(v8::Isolate::CreateParams*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateErrorHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateMiscHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(node::ArrayBufferAllocator*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(node::ArrayBufferAllocator*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(std::shared_ptr<node::ArrayBufferAllocator>, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateIsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeIsolateData(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeEnvironment(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvironment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&, node::EnvironmentFlags::Flags, node::ThreadId, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvironment(node::IsolateData*, v8::Local<v8::Context>, int, char const* const*, int, char const* const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetInspectorParentHandle(node::Environment*, node::ThreadId, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, char const*, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEnvironment(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetMainThreadMultiIsolatePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::GetEnvironmentIsolateData(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetArrayBufferAllocator(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, node::tracing::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::FreePlatform(node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::MultiIsolatePlatform::Create(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextRuntime(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializePrimordials(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetPerContextExports(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextForSnapshot(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::NewContext(v8::Isolate*, v8::Local<v8::ObjectTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContext(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEventLoop(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, node::node_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, napi_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, char const*, void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AllocateEnvironmentThreadId()",
    "type": "CPP"
  },
  {
    "name": "node::DefaultProcessExitHandler(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SetProcessExitHandler(node::Environment*, std::function<void (node::Environment*, int)>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&), node::LoadEnvironment(node::Environment*, char const*, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)::{lambda(node::StartExecutionCallbackInfo const&)#1}>::_M_invoke(std::_Any_data const&, node::StartExecutionCallbackInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::GetImpl()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SPrintFImpl(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, std::__va_list), unsigned long, char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<void* const, unsigned long>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, unsigned long>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ErrnoException(v8::Isolate*, int, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::UVException(v8::Isolate*, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::RunAsyncCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<node::CleanupHookCallback, true, true>, bool> std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_emplace<node::CleanupHookCallback>(std::integral_constant<bool, true>, node::CleanupHookCallback&&) [clone .constprop.85]",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.64] [clone .constprop.83]",
    "type": "CPP"
  },
  {
    "name": "node::FinishAsyncCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::RunAtExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AtExit(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AtExit(node::Environment*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::DeleteACHHandle::operator()(node::ACHHandle*) const",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*, void (*)(void*), void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHook(std::unique_ptr<node::ACHHandle, node::DeleteACHHandle>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetExecutionAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetTriggerAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(v8::Isolate*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(node::Environment*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEvent(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::signo_string(int)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<node::CleanupHookCallback, true, true>, bool> std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_emplace<node::CleanupHookCallback>(std::integral_constant<bool, true>, node::CleanupHookCallback&&) [clone .constprop.172]",
    "type": "CPP"
  },
  {
    "name": "node::DestroyParamCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::DestroyAsyncIdsCallback(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(void*)#1}::_FUN({lambda(node::Environment*)#1})",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetProviderType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.150] [clone .constprop.171]",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ClearAsyncIdStack(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::SetCallbackTrampoline(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ExecutionAsyncResource(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PushAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetPromiseHooks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterDestroyHook(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetupHooks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.170]",
    "type": "CPP"
  },
  {
    "name": "node::Emit(node::Environment*, double, node::AsyncHooks::Fields, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitPromiseResolve(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventBefore()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitBefore(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventAfter(node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAfter(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAsyncInit(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::String>, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner()",
    "type": "CPP"
  },
  {
    "name": "_register_async_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PopAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::WeakCallback(v8::WeakCallbackInfo<node::DestroyParam> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::QueueDestroyAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::Local<v8::Object>, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<double, std::allocator<double> >::_M_realloc_insert<double const&>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::~AsyncWrapObject()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::~AsyncWrapObject()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ares_poll_close_cb(uv_poll_s*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::AresTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ares_poll_cb(uv_poll_s*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::CanonicalizeIP(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_timer_s, node::cares_wrap::ChannelWrap::CloseTimer()::{lambda(uv_timer_s*)#1}>(uv_timer_s*, node::cares_wrap::ChannelWrap::CloseTimer()::{lambda(uv_timer_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.12]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.419]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.418]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*) [clone .constprop.421]",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int) [clone .constprop.430]",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseTxtReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseCaaReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "std::default_delete<node::cares_wrap::ResponseData>::operator()(node::cares_wrap::ResponseData*) const [clone .isra.208] [clone .part.209]",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseMxReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseSrvReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseNaptrReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::Cancel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseGeneralReply(node::Environment*, unsigned char const*, int, int*, v8::Local<v8::Array>, void*, int*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::StrError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::GetAddrInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::GetNameInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::GetServers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::SetServers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::AfterGetAddrInfo(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::AfterGetNameInfo(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::GetAddrInfoReqWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::GetNameInfoReqWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::Create(node::cares_wrap::ChannelWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ChannelWrap(node::Environment*, v8::Local<v8::Object>, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::StartTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::CloseTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ModifyActivityQueryCount(int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::EnsureServers()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "_register_cares_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::TrackField(char const*, node::MemoryRetainer const*, char const*) [clone .constprop.415]",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ares_sockstate_cb(void*, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::SetLocalAddress(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::WrapperNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::GetNativeObject()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getaddrinfo_s, void (*)(uv_getaddrinfo_s*, int, addrinfo*)>::Wrapper(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getnameinfo_s, void (*)(uv_getnameinfo_s*, int, char const*, char const*)>::Wrapper(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeLazilyInitializedJSTemplate(node::Environment*)::{lambda(v8::FunctionCallbackInfo<v8::Value> const&)#1}::_FUN(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MutexBase<node::LibuvMutexTraits>::~MutexBase()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethod(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetProtoMethod(v8::Local<v8::FunctionTemplate>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FromJSObject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeLazilyInitializedJSTemplate(node::Environment*)::{lambda(v8::FunctionCallbackInfo<v8::Value> const&)#1}::operator()(v8::FunctionCallbackInfo<v8::Value> const&) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::pointer_data()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::operator()(v8::WeakCallbackInfo<node::BaseObject> const&) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::_FUN(v8::WeakCallbackInfo<node::BaseObject> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Name>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(char const*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::MemoryRetainer const*, std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, std::allocator<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*> >, std::__detail::_Select1st, std::equal_to<node::MemoryRetainer const*>, std::hash<node::MemoryRetainer const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_push_back_aux<node::MemoryRetainerNode* const&>(node::MemoryRetainerNode* const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask*, std::allocator<node::cares_wrap::NodeAresTask*>, std::__detail::_Identity, node::cares_wrap::NodeAresTask::Equal, node::cares_wrap::NodeAresTask::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::erase(std::__detail::_Node_const_iterator<node::cares_wrap::NodeAresTask*, true, true>)",
    "type": "CPP"
  },
  {
    "name": "unsigned char* node::Malloc<unsigned char>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::Push(std::unique_ptr<node::CallbackQueue<void, node::Environment*>::Callback, std::default_delete<node::CallbackQueue<void, node::Environment*>::Callback> >)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::Callback(void*, int, int, hostent*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::ChannelWrap, false>::BaseObjectPtrImpl(node::cares_wrap::ChannelWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::ConnectWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.8]",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(std::string const&, bool) [clone .constprop.41]",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::New()",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::SymbolInfo::Display() const",
    "type": "CPP"
  },
  {
    "name": "node::PrintLibuvHandleInformation(uv_loop_s*, _IO_FILE*)::{lambda(uv_handle_s*, void*)#1}::_FUN(uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::DumpBacktrace(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::PrintLibuvHandleInformation(uv_loop_s*, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::CheckedUvLoopClose(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetLoadedLibraries()",
    "type": "CPP"
  },
  {
    "name": "node::FWrite(_IO_FILE*, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "__DumpBacktrace",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetLoadedLibraries()::{lambda(dl_phdr_info*, unsigned long, void*)#1}::_FUN(dl_phdr_info*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::IsMapped(void*)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<char const*&>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, char const*&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleImmediateRef(bool)::{lambda(uv_idle_s*)#1}::_FUN(uv_idle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, node::Environment::RegisterHandleCleanups()::{lambda(node::Environment*, uv_handle_s*, void*)#1}::operator()(node::Environment*, uv_handle_s*, void*) const::{lambda(uv_handle_s*)#1}>(uv_handle_s*, node::Environment::RegisterHandleCleanups()::{lambda(node::Environment*, uv_handle_s*, void*)#1}::operator()(node::Environment*, uv_handle_s*, void*) const::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::InitThreadLocalOnce()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()::{lambda(uv_check_s*)#2}::_FUN(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()::{lambda(uv_prepare_s*)#1}::_FUN(uv_prepare_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RegisterHandleCleanups()::{lambda(node::Environment*, uv_handle_s*, void*)#1}::_FUN(node::Environment*, uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "void std::__adjust_heap<__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, long, node::CleanupHookCallback, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}> >(__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, long, __gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, node::CleanupHookCallback, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>) [clone .isra.264]",
    "type": "CPP"
  },
  {
    "name": "void std::__insertion_sort<__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}> >(__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>) [clone .isra.595]",
    "type": "CPP"
  },
  {
    "name": "void node::MemoryTracker::TrackField<v8::Function>(char const*, v8::Local<v8::Function> const&, char const*) [clone .constprop.667]",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "void node::MemoryTracker::TrackField<v8::Symbol>(char const*, v8::Local<v8::Symbol> const&, char const*) [clone .constprop.678]",
    "type": "CPP"
  },
  {
    "name": "void node::MemoryTracker::TrackField<v8::String>(char const*, v8::Local<v8::String> const&, char const*) [clone .constprop.681]",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.28]",
    "type": "CPP"
  },
  {
    "name": "void std::__introsort_loop<__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}> >(__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>, long, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::DeleteMe(void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunTimers(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::DeserializeProperties(std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::IsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*, std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::UpdateTraceCategoryState()",
    "type": "CPP"
  },
  {
    "name": "node::GetExecPath(std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ExitEnv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RegisterHandleCleanups()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeLibuv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintSyncTrace() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAtExitCallbacks()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AtExit(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearInterrupts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RequestInterruptFromV8()::{lambda(v8::Isolate*, void*)#1}::_FUN(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearNativeImmediates(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeLibuv()::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CheckImmediate(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CleanupHandles()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RequestInterruptFromV8()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ScheduleTimer(long)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleTimerRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleImmediateRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetNow()",
    "type": "CPP"
  },
  {
    "name": "node::CollectExceptionInfo(node::Environment*, v8::Local<v8::Object>, int, char const*, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CollectUVExceptionInfo(v8::Local<v8::Value>, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::grow_async_ids_stack()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Exit(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::stop_sub_worker_contexts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::worker_parent_env() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::VerifyNoStrongBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "node::GuessMemoryAvailableToTheProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunWeakRefCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Environment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BuildEmbedderGraph(v8::Isolate*, v8::EmbedderGraph*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RemoveUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AddUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::NearHeapLimitCallback(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Environment*, int), void (*)(node::Environment*, int)>::_M_invoke(std::_Any_data const&, node::Environment*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<void (*)(node::Environment*, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "node::ToUpper(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCwd()",
    "type": "CPP"
  },
  {
    "name": "node::TraceEventScope::~TraceEventScope()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::Track(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, int, std::allocator<int>, std::__detail::_Identity, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<int, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::~FSEventWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::~FSEventWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::OnEvent(uv_fs_event_s*, char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::GetInitialized(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_fs_event_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HasRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsInitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsUninitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HandleWrap(node::Environment*, v8::Local<v8::Object>, uv_handle_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HandleWrap, false>::BaseObjectPtrImpl(node::HandleWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::~FileOutputStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::~FileOutputStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::heap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::TriggerHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::WriteSnapshot(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::DeleteHeapSnapshot(v8::HeapSnapshot const*)",
    "type": "CPP"
  },
  {
    "name": "_register_heap_utils()",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(node::Environment*, std::unique_ptr<v8::HeapSnapshot const, node::FunctionDeleter<v8::HeapSnapshot const, &node::heap::DeleteHeapSnapshot> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, true, false>, bool> std::_Hashtable<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::allocator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Identity, std::equal_to<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::hash<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_emplace<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >(std::integral_constant<bool, true>, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >&&) [clone .constprop.227]",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::heap::BuildEmbedderGraph(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::OutputStream::WriteHeapStatsChunk(v8::HeapStatsUpdate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::AsyncWrap, false>::BaseObjectPtrImpl(node::AsyncWrap*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddEdge(v8::EmbedderGraph::Node*, v8::EmbedderGraph::Node*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::CreateObject() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::allocator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Identity, std::equal_to<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::hash<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::V8Node(v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddNode(std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::pair<char const*, v8::EmbedderGraph::Node*>, std::pair<char const*, v8::EmbedderGraph::Node*>, std::_Identity<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > >::_M_erase(std::_Rb_tree_node<std::pair<char const*, v8::EmbedderGraph::Node*> >*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::TimerCB(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.4]",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::RecordDelta(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::Histogram(long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::IntervalHistogram(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, int, long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStart(node::IntervalHistogram::StartFlags)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStop()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Record(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HistogramBase, false>::BaseObjectPtrImpl(node::HistogramBase*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::BaseObject, false>::BaseObjectPtrImpl(node::BaseObject*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::GetNewTarget()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::Args(napi_value__**, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::SetReturnValue(napi_value__*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::CallbackBundle::Delete(napi_env__*, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::FinalizeCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::Invoke(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SecondPassCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefBase(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::New(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Data()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefCount()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::New(napi_env__*, v8::Local<v8::Value>, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Get()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SetWeak()",
    "type": "CPP"
  },
  {
    "name": "napi_get_last_error_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_get_all_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_set_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_property",
    "type": "CPP"
  },
  {
    "name": "napi_delete_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_own_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_element",
    "type": "CPP"
  },
  {
    "name": "napi_has_element",
    "type": "CPP"
  },
  {
    "name": "napi_get_element",
    "type": "CPP"
  },
  {
    "name": "napi_delete_element",
    "type": "CPP"
  },
  {
    "name": "napi_define_properties",
    "type": "CPP"
  },
  {
    "name": "napi_object_freeze",
    "type": "CPP"
  },
  {
    "name": "napi_object_seal",
    "type": "CPP"
  },
  {
    "name": "napi_is_array",
    "type": "CPP"
  },
  {
    "name": "napi_get_array_length",
    "type": "CPP"
  },
  {
    "name": "napi_strict_equals",
    "type": "CPP"
  },
  {
    "name": "napi_get_prototype",
    "type": "CPP"
  },
  {
    "name": "napi_create_object",
    "type": "CPP"
  },
  {
    "name": "napi_create_array",
    "type": "CPP"
  },
  {
    "name": "napi_create_array_with_length",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_create_double",
    "type": "CPP"
  },
  {
    "name": "napi_create_int32",
    "type": "CPP"
  },
  {
    "name": "napi_create_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_create_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_boolean",
    "type": "CPP"
  },
  {
    "name": "napi_create_symbol",
    "type": "CPP"
  },
  {
    "name": "napi_create_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_range_error",
    "type": "CPP"
  },
  {
    "name": "napi_typeof",
    "type": "CPP"
  },
  {
    "name": "napi_get_undefined",
    "type": "CPP"
  },
  {
    "name": "napi_get_null",
    "type": "CPP"
  },
  {
    "name": "napi_get_cb_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_new_target",
    "type": "CPP"
  },
  {
    "name": "napi_call_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_global",
    "type": "CPP"
  },
  {
    "name": "napi_throw",
    "type": "CPP"
  },
  {
    "name": "napi_throw_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_range_error",
    "type": "CPP"
  },
  {
    "name": "napi_is_error",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_double",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bool",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_bool",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_number",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_object",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_string",
    "type": "CPP"
  },
  {
    "name": "napi_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_unwrap",
    "type": "CPP"
  },
  {
    "name": "napi_remove_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_create_external",
    "type": "CPP"
  },
  {
    "name": "napi_type_tag_object",
    "type": "CPP"
  },
  {
    "name": "napi_check_object_type_tag",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_external",
    "type": "CPP"
  },
  {
    "name": "napi_create_reference",
    "type": "CPP"
  },
  {
    "name": "napi_delete_reference",
    "type": "CPP"
  },
  {
    "name": "napi_reference_ref",
    "type": "CPP"
  },
  {
    "name": "napi_reference_unref",
    "type": "CPP"
  },
  {
    "name": "napi_get_reference_value",
    "type": "CPP"
  },
  {
    "name": "napi_open_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_open_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_escape_handle",
    "type": "CPP"
  },
  {
    "name": "napi_new_instance",
    "type": "CPP"
  },
  {
    "name": "napi_instanceof",
    "type": "CPP"
  },
  {
    "name": "napi_is_exception_pending",
    "type": "CPP"
  },
  {
    "name": "napi_get_and_clear_last_exception",
    "type": "CPP"
  },
  {
    "name": "napi_is_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_arraybuffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_is_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_create_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_get_typedarray_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_is_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_get_dataview_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_promise",
    "type": "CPP"
  },
  {
    "name": "napi_resolve_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_reject_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_is_promise",
    "type": "CPP"
  },
  {
    "name": "napi_create_date",
    "type": "CPP"
  },
  {
    "name": "napi_is_date",
    "type": "CPP"
  },
  {
    "name": "napi_get_date_value",
    "type": "CPP"
  },
  {
    "name": "napi_run_script",
    "type": "CPP"
  },
  {
    "name": "napi_add_finalizer",
    "type": "CPP"
  },
  {
    "name": "napi_adjust_external_memory",
    "type": "CPP"
  },
  {
    "name": "napi_set_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_get_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_detach_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_is_detached_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_define_class",
    "type": "CPP"
  },
  {
    "name": "napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Finalizer::~Finalizer()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> >::_M_realloc_insert<napi_property_descriptor const&>(__gnu_cxx::__normal_iterator<napi_property_descriptor*, std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> > >, napi_property_descriptor const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::EmitEOF(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::JSStream(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_js_stream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::WriteWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::ShutdownWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EscapeJsonChars(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::Reindent(std::string const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::EmitReceived(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnAfterBind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnSendDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::JSUDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_js_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::OnAfterBind()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStatus(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetSyntheticExport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetInitializeImportMetaObjectCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetImportModuleDynamicallyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetNamespace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStaticDependencySpecifiers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::context() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Instantiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromID(node::Environment*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "_register_module_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ImportModuleDynamically(v8::Local<v8::Context>, v8::Local<v8::ScriptOrModule>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromModule(node::Environment*, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::HostInitializeImportMetaObjectCallback(v8::Local<v8::Context>, v8::Local<v8::Module>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SyntheticModuleEvaluationStepsCallback(v8::Local<v8::Context>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ModuleWrap(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Module>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ResolveCallback(v8::Local<v8::Context>, v8::Local<v8::String>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Evaluate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::equal_range(int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::string const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::string const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::erase(std::__detail::_Node_const_iterator<std::pair<int const, node::loader::ModuleWrap*>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::loader::ModuleWrap*>, std::allocator<std::pair<unsigned int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::loader::ModuleWrap*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_reallocate_map(unsigned long, bool)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<4u, std::string>(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeDiagnostics()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::MarkBootstrapComplete(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ResetStdio()",
    "type": "CPP"
  },
  {
    "name": "node::SignalExit(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TrapWebAssemblyOrContinue(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > > std::__find_if<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__ops::_Iter_equals_val<char const [30]> >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__ops::_Iter_equals_val<char const [30]>, std::random_access_iterator_tag) [clone .constprop.268]",
    "type": "CPP"
  },
  {
    "name": "node::AtomicsWaitCallback(v8::Isolate::AtomicsWaitEvent, v8::Local<v8::SharedArrayBuffer>, unsigned long, long, double, v8::Isolate::AtomicsWaitWakeHandle*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::ExecuteBootstrapper(node::Environment*, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::StartExecution(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeInspector(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeDiagnostics()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapInternalLoaders()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapNode()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunBootstrapping()",
    "type": "CPP"
  },
  {
    "name": "node::RegisterSignalHandler(int, void (*)(int, siginfo_t*, void*), bool)",
    "type": "CPP"
  },
  {
    "name": "node::TearDownOncePerProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Stop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::StartExecution(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessGlobalArgs(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeNodeWithArgs(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::Init(int*, char const**, int*, char const***)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeOncePerProcess(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::Start(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::V8Platform::~V8Platform()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::PlatformInit()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::emplace_back<std::string>(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::operator=(std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string const&>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<char const (&) [39]>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, char const (&) [39])",
    "type": "CPP"
  },
  {
    "name": "std::vector<char*, std::allocator<char*> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<long, std::allocator<long> >::_M_realloc_insert<long>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_unique_pos(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::string>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::AsyncContext::WeakCallback(v8::WeakCallbackInfo<v8impl::(anonymous namespace)::AsyncContext> const&)",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::CallJs(napi_env__*, napi_value__*, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::NewEnv(v8::Local<v8::Context>, std::string const&)::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::~ThreadSafeFunction()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::AsyncCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::Cleanup(void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1}>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::~ThreadSafeFunction()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::Init()::{lambda(uv_handle_s*)#1}>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::Init()::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::node_napi_env__(v8::Local<v8::Context>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register_by_symbol(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, napi_value__* (*)(napi_env__*, napi_value__*))",
    "type": "CPP"
  },
  {
    "name": "napi_module_register_cb(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::napi_module_to_node_module(napi_module const*)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register",
    "type": "CPP"
  },
  {
    "name": "napi_add_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_add_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_exception",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_error",
    "type": "CPP"
  },
  {
    "name": "napi_open_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_async_init",
    "type": "CPP"
  },
  {
    "name": "napi_async_destroy",
    "type": "CPP"
  },
  {
    "name": "napi_make_callback",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer_copy",
    "type": "CPP"
  },
  {
    "name": "napi_is_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_buffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_node_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_delete_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_get_uv_event_loop",
    "type": "CPP"
  },
  {
    "name": "napi_queue_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_cancel_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_create_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_threadsafe_function_context",
    "type": "CPP"
  },
  {
    "name": "napi_acquire_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_release_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_unref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_ref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "node_api_get_module_file_name",
    "type": "CPP"
  },
  {
    "name": "napi_call_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "napi_async_cleanup_hook_handle__::Hook(void*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::_FUN(uv_work_s*)",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::_FUN(uv_work_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::operator()(uv_work_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::operator()(uv_work_s*, int) const",
    "type": "CPP"
  },
  {
    "name": "void std::deque<void*, std::allocator<void*> >::_M_push_back_aux<void* const&>(void* const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.4]",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node_module_register",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::DLib(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Open()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Close()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSymbolAddress(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSavedModuleFromGlobalHandleMap()",
    "type": "CPP"
  },
  {
    "name": "node::binding::RegisterBuiltinModules()",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetInternalBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetLinkedBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}::operator()(node::binding::DLib*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<bool (node::binding::DLib*), node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}>::_M_invoke(std::_Any_data const&, node::binding::DLib*&&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::SaveInGlobalHandleMap(node::node_module*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::global_handle_map_t::~global_handle_map_t()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::binding::global_handle_map_t::Entry>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](void* const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Blob(node::Environment*, v8::Local<v8::Object>, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::FixedSizeBlobCopyJob(node::Environment*, v8::Local<v8::Object>, node::Blob*, node::FixedSizeBlobCopyJob::Mode)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Create(node::Environment*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Slice(node::Environment*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToSlice(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetArrayBuffer(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::operator=(std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::Blob, false>::BaseObjectPtrImpl(node::Blob*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::_M_realloc_insert<node::BlobEntry>(__gnu_cxx::__normal_iterator<node::BlobEntry*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > >, node::BlobEntry&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::BackingStore, std::default_delete<v8::BackingStore> >(std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)::{lambda(void*, unsigned long, void*)#1}::_FUN(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long)::{lambda(char*, void*)#1}::_FUN(char*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::ParseArrayIndex(node::Environment*, v8::Local<v8::Value>, unsigned long, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.118] [clone .constprop.135]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CallbackInfo::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CallbackInfo::CreateTrackedArrayBuffer(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)::{lambda(void*, unsigned long, void*)#1}::_FUN(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::SetBufferPrototype(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::ByteLengthUtf8(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::EncodeInto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_buffer()",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CreateFromString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::EncodeUtf8String(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(node::Environment*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(v8::Isolate*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap16(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::IndexOfNumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Compare(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Fill(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CompareOffset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Copy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::SearchString<unsigned short>(unsigned short const*, unsigned long, unsigned short const*, unsigned long, unsigned long, bool) [clone .part.108]",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::SearchString<unsigned char>(unsigned char const*, unsigned long, unsigned char const*, unsigned long, unsigned long, bool) [clone .part.109]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::IndexOfString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::IndexOfBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethodNoSideEffect(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned short>(node::stringsearch::Vector<unsigned short const>, node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned char>(node::stringsearch::Vector<unsigned char const>, node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_config()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DefineErrnoConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DefineSignalConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DefineCryptoConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::DefineConstants(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MeasureMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::WatchdogHasPendingSigint(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::StopSigintWatchdog(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::StartSigintWatchdog(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<node::CleanupHookCallback, true, true>, bool> std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_emplace<node::CleanupHookCallback>(std::integral_constant<bool, true>, node::CleanupHookCallback&&) [clone .constprop.268]",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.179] [clone .constprop.267]",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IsContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertySetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertySetterCallback(unsigned int, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDeleterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDeleterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyEnumeratorCallback(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDescriptorCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDescriptorCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyGetterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyGetterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDefinerCallback(v8::Local<v8::Name>, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDefinerCallback(unsigned int, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::WeakCallback(v8::WeakCallbackInfo<node::contextify::CompiledFnEntry> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateDataWrapper(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextFromContextifiedSandbox(node::Environment*, v8::Local<v8::Object> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::InstanceOf(node::Environment*, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::CompiledFnEntry(node::Environment*, v8::Local<v8::Object>, unsigned int, v8::Local<v8::ScriptOrModule>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::microtask_queue() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_contextify()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::~ContextifyContext()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::WeakCallback(v8::WeakCallbackInfo<node::contextify::ContextifyContext> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateV8Context(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextifyContext(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::MakeContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MicrotaskQueueWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::ContextifyScript(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::EvalMachine(node::Environment*, long, bool, bool, bool, std::shared_ptr<v8::MicrotaskQueue>, v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInThisContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > >::_M_erase(__gnu_cxx::__normal_iterator<v8::Global<v8::Context>*, std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > > >)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::contextify::MicrotaskQueueWrap, false>::BaseObjectPtrImpl(node::contextify::MicrotaskQueueWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Object>*, std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::String>*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >(std::unique_ptr<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::ContextifyScript*>, std::allocator<std::pair<unsigned int const, node::contextify::ContextifyScript*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::ContextifyScript*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, std::allocator<std::pair<unsigned int const, node::contextify::CompiledFnEntry*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::gid_by_name(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::uid_by_name(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::InitGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetEUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetEGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetEGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetEUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SafeGetenv(char const*, std::string*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SafeGetenv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_credentials()",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<unsigned int>(v8::Local<v8::Context>, std::vector<unsigned int, std::allocator<unsigned int> > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned int, std::allocator<unsigned int> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterClose(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirentListToArray(node::Environment*, uv_dirent_s*, int, node::encoding, v8::Local<v8::Value>*) [clone .isra.65] [clone .constprop.136]",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::DirHandle(node::Environment*, v8::Local<v8::Object>, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(node::Environment*, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterOpenDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "_register_fs_dir()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::OpenDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterDirRead(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_fs_s, void (*)(uv_fs_s*)>::Wrapper(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::GCClose()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::BindingData, false>::BaseObjectPtrImpl(node::fs::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FSReqBase, false>::BaseObjectPtrImpl(node::fs::FSReqBase*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<uv_dirent_s, std::allocator<uv_dirent_s> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::AssignFromObject(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::EnvQuery(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Integer> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvEnumerator(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::EnvSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::EnvDeleter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::CreateMapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvVarProxy(v8::Local<v8::Context>, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::KVStore>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::NoSideEffectsToString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.8]",
    "type": "CPP"
  },
  {
    "name": "node::errors::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::IsExceptionDecorated(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Abort()",
    "type": "CPP"
  },
  {
    "name": "node::Assert(node::AssertionInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetPrepareStackTraceCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetEnhanceStackForFatalException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetSourceMapsEnabled(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::errno_string(int)",
    "type": "CPP"
  },
  {
    "name": "_register_errors()",
    "type": "CPP"
  },
  {
    "name": "node::GetErrorSource(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Message>, bool*) [clone .constprop.61]",
    "type": "CPP"
  },
  {
    "name": "node::PrintStackTrace(v8::Isolate*, v8::Local<v8::StackTrace>)",
    "type": "CPP"
  },
  {
    "name": "node::PrintException(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::PrintCaughtException(v8::Isolate*, v8::Local<v8::Context>, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::AppendExceptionLine(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::ErrorHandlingMode)",
    "type": "CPP"
  },
  {
    "name": "node::ReportFatalException(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::EnhanceFatalException)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TryCatchScope::~TryCatchScope()",
    "type": "CPP"
  },
  {
    "name": "node::errors::DecorateErrorStack(node::Environment*, node::errors::TryCatchScope const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::Local<v8::Value>, v8::Local<v8::Message>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::PerIsolateMessageListener(v8::Local<v8::Message>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::ToString() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<3u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<4u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<3u, std::string>(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Object> node::PersistentToLocal::Default<v8::Object>(v8::Isolate*, v8::PersistentBase<v8::Object> const&) [clone .isra.152]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.416]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.415]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*) [clone .constprop.417]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.11]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReleaseFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::InternalModuleStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.418]",
    "type": "CPP"
  },
  {
    "name": "node::fs::Basename(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::TransferData(int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Resolve()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ClosePromise()::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::file_handle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::CloseReq(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Promise>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ClosePromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::AfterClose()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::FileHandleReadWrap(node::fs::FileHandle*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FromNamespacedPath(std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::binding_data()",
    "type": "CPP"
  },
  {
    "name": "_register_fs()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::FileHandle(node::fs::BindingData*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(node::fs::BindingData*, int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::NewFSReqCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool) [clone .constprop.411]",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool) [clone .constprop.412]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::FSReqAfterScope(node::fs::FSReqBase*, uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Clear()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::~FSReqAfterScope()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Reject(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Proceed()",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterInteger(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterMkdirp(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPath(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPtr(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterOpenFileHandle(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::OpenFileHandle(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStat(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterNoArgs(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FUTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::LUTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FChown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::LChown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FChmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FTruncate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Rename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Symlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::UTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Chown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::CopyFile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Access(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Chmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Fsync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Fdatasync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Mkdtemp(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::RealPath(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Unlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::ReadLink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::RMDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::LStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Stat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::WriteString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::WriteBuffers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::ReadBuffers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))::{lambda(uv_fs_s*)#1}::operator()(uv_fs_s*) const::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpSync(uv_loop_s*, uv_fs_s*, std::string const&, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::CallMKDirpSync(node::Environment*, v8::FunctionCallbackInfo<v8::Value> const&, node::fs::FSReqWrapSync*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDirWithTypes(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::ReadDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::InternalModuleReadJSON(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::TrackField(char const*, node::MemoryRetainer const*, char const*) [clone .constprop.407]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart() [clone .part.153]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart()::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "node::IsSafeJsInt(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqWrapSync::~FSReqWrapSync()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<char, 64ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<unsigned long, v8::BigUint64Array>(node::AliasedBufferBase<unsigned long, v8::BigUint64Array, std::enable_if<std::is_scalar<unsigned long>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<double, v8::Float64Array>(node::AliasedBufferBase<double, v8::Float64Array, std::enable_if<std::is_scalar<double>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData* node::Environment::GetBindingData<node::fs::BindingData>(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::Value> >(v8::Local<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Integer> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Integer>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<char, std::allocator<char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>::BaseObjectPtrImpl(node::fs::FileHandleReadWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>*, std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > > >, node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>&&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_chunk_complete>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_chunk_header>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_body>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_message_begin>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_status>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_url>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Free(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Unconsume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::CreateHeaders()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_header_value>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Initialize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::Parser::Pause<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::Parser::Pause<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::GetCurrentBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_header_field>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_message_complete>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_headers_complete>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Finish(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Execute(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "_register_http_parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeHttpParser(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameSent(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidHeader(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "__tcf_0",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<node::CleanupHookCallback, true> > >::_M_allocate_buckets(unsigned long) [clone .isra.732]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, std::__va_list), unsigned long, char const*, ...) [clone .constprop.807]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.30]",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.809]",
    "type": "CPP"
  },
  {
    "name": "node::http2::RefreshDefaultSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::HttpErrorString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::UpdateChunksSent(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::SetCallbackFunctions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.799]",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.800]",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.801]",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.802]",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Options::Http2Options(node::http2::Http2State*, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Init(node::http2::Http2State*, nghttp2_settings_entry*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Update(node::http2::Http2Session*, unsigned int (*)(nghttp2_session*, nghttp2_settings_id))",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::RefreshDefaults(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Done(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::TypeName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Origins::Origins(node::Environment*, v8::Local<v8::String>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Callbacks::Callbacks(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::StopTrackingRcbuf(nghttp2_rcbuf*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CanAddStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::GetFrameID(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HasWritesOnSocketForStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::operator*() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::stream() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IncrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DecrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopPing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopSettings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleSettingsFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Done(bool, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePingFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "_register_http2()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::EmitStatistics() [clone .part.525]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Http2Settings(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Http2Ping(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::DetachFromSession()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::FindStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RemoveStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PushOutgoingBuffer(node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CopyDataIntoOutgoing(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Http2Session(node::http2::Http2State*, v8::Local<v8::Object>, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::Environment*, unsigned long, nghttp2_settings_entry const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::PackSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::OnTrailers()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*) [clone .part.167]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleGoawayFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeScheduleWrite() [clone .part.530]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeScheduleWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::~Http2Scope()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Send()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream() [clone .part.531]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(int, unsigned char*, unsigned long, unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(node::http2::Origins const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Send(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitResponse(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Respond(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPriority(node::http2::Http2Priority const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleOriginFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy() [clone .part.744]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(unsigned int, int, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnNghttpError(nghttp2_session*, char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Http2Stream(node::http2::Http2Session*, v8::Local<v8::Object>, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::New(node::http2::Http2Session*, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SubmitRequest(node::http2::Http2Priority const&, node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPushPromise(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::AddHeader(nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddPing(unsigned char const*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Ping(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddSettings(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Settings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Priority::Http2Priority(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Priority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDWordAlignedPadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnMaxFrameSizePadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSendData(nghttp2_session*, nghttp2_frame*, unsigned char const*, unsigned long, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSelectPadding(nghttp2_session*, nghttp2_frame const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Close(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*) [clone .part.177]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading() [clone .part.215]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetNextStreamID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetLocalWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleDataFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleHeadersFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameReceive(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameNotSent(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamClose(nghttp2_session*, int, unsigned int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SendPendingData()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Close(unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitRstStream(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RstStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnHeaderCallback(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int) [clone .constprop.778]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::StartHeaders(nghttp2_headers_category)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnBeginHeadersCallback(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitInfo(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Info(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitTrailers(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Trailers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::OnRead(nghttp2_session*, int, unsigned char*, unsigned long, unsigned int*, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Request(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::PushPromise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ConsumeHTTP2Data()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidFrame(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDataChunkReceived(nghttp2_session*, unsigned char, int, unsigned char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::IsCacheable() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Lock() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Unlock() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::flags() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::name() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::value() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaderBase<node::http2::Http2Session>::ToString() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamPerformanceEntry::~Http2StreamPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2SessionPerformanceEntry::~Http2SessionPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamPerformanceEntry::~Http2StreamPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2SessionPerformanceEntry::~Http2SessionPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<unsigned int, v8::Uint32Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2State, false>::BaseObjectPtrImpl(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, false>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, true>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Stream, false>::BaseObjectPtrImpl(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaders<node::http2::Http2HeadersTraits>::NgHeaders(node::Environment*, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<int, std::allocator<int> >::_M_realloc_insert<int&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> >::_M_realloc_insert<node::http2::NgHttp2StreamWrite>(__gnu_cxx::__normal_iterator<node::http2::NgHttp2StreamWrite*, std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> > >, node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char*, std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, std::allocator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > > >, std::__detail::_Select1st, std::equal_to<char*>, std::hash<char*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, false, false>)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedStruct<node::http2::SessionJSFields>::AliasedStruct<>(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_remote_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_local_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::allocator<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >::_M_realloc_insert<node::NgHeader<node::http2::Http2HeaderTraits> >(__gnu_cxx::__normal_iterator<node::NgHeader<node::http2::Http2HeaderTraits>*, std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > > >, node::NgHeader<node::http2::Http2HeaderTraits>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Ping, false>::BaseObjectPtrImpl(node::http2::Http2Ping*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> >(node::BaseObjectPtrImpl<node::http2::Http2Ping, false>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Settings, false>::BaseObjectPtrImpl(node::http2::Http2Settings*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Settings, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> >(node::BaseObjectPtrImpl<node::http2::Http2Settings, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char*, std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, std::allocator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > > >, std::__detail::_Select1st, std::equal_to<char*>, std::hash<char*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char const*, std::pair<char const* const, v8::Eternal<v8::String> >, std::allocator<std::pair<char const* const, v8::Eternal<v8::String> > >, std::__detail::_Select1st, std::equal_to<char const*>, std::hash<char const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<char const* const, v8::Eternal<v8::String> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::String> node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::New<node::http2::Http2Session>(node::http2::Http2Session*, node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetValue(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetName(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Object> node::Buffer::New<char>(node::Environment*, node::MaybeStackBuffer<char, 1024ul>*)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Object> node::i18n::(anonymous namespace)::ToBufferEndian<char16_t>(node::Environment*, node::MaybeStackBuffer<char16_t, 1024ul>*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Decode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Has(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::ICUErrorName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeToUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeUtf8FromUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::Transcode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::GetStringWidth(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeFromUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::Transcode(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeUcs2FromUtf8(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(UConverter*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::set_subst_chars(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::reset()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::min_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::max_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::ConverterObject(node::Environment*, v8::Local<v8::Object>, UConverter*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Create(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::InitializeICUDirectory(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToUnicode(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToASCII(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long, node::i18n::idna_mode)",
    "type": "CPP"
  },
  {
    "name": "_register_icu()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToASCII(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToUnicode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Create(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Dispose()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::~NodeMainInstance()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::CreateMainEnvironment(int*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Run()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::~DeserializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::GetSharedArrayBufferFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::~DeserializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::GetWasmModuleFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::FinalizeTransferWrite(v8::Local<v8::Context>, v8::ValueSerializer*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.7]",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SetDeserializerCreateObjectFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::GetDOMException(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::ThrowDataCloneException(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::~SerializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::~SerializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Message(node::MallocedBuffer<char>&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::IsCloseMessage() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MessagePortData(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Entangle(node::worker::MessagePortData*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TriggerAsync()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::GetMessagePortConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::InitMessaging(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::JSTransferable(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferOrClone(node::BaseObject::TransferMode) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Data(std::string&&, v8::Global<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "_register_messaging()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Deserialize(node::Environment*, v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddSharedArrayBuffer(std::shared_ptr<v8::BackingStore>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddTransferable(std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::GetWasmModuleTransferId(v8::Isolate*, v8::Local<v8::WasmModuleObject>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddWASMModule(v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Serialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::ReadIterable(node::Environment*, v8::Local<v8::Context>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::AddToIncomingQueue(node::worker::Message&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Disentangle()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::MessagePortData, std::default_delete<node::worker::MessagePortData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::MessageChannel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::Local<v8::Context>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnMessage()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Drain(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MoveToContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::MessagePort, false>::BaseObjectPtrImpl(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::SharedArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::SharedArrayBuffer>*, std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > > >, v8::Local<v8::SharedArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > >::_M_realloc_insert<std::shared_ptr<v8::BackingStore> >(__gnu_cxx::__normal_iterator<std::shared_ptr<v8::BackingStore>*, std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > > >, std::shared_ptr<v8::BackingStore>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > >::_M_realloc_insert<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >*, std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > > >, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> >::_M_realloc_insert<v8::CompiledWasmModule>(__gnu_cxx::__normal_iterator<v8::CompiledWasmModule*, std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> > >, v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Global<v8::SharedArrayBuffer> >(__gnu_cxx::__normal_iterator<v8::Global<v8::SharedArrayBuffer>*, std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > > >, v8::Global<v8::SharedArrayBuffer>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::BaseObject, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::BaseObject, false>*, std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > >, node::BaseObjectPtrImpl<node::BaseObject, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::operator=(std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::ArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::ArrayBuffer>*, std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > > >, v8::Local<v8::ArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Value> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetOpenSSLVersion()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::InitializeIntlVersions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Release::Release()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::Versions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Metadata()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::~Metadata()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetInstance()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::code_cache()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCodeCache(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LoadBuiltinModuleSource(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetModuleIds()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CompileAsModule(v8::Local<v8::Context>, char const*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::InitializeModuleCategories() [clone .part.152]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::InitializeModuleCategories()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCannotBeRequired()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCanBeRequired()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CanBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CannotBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, node::UnionBytes> >*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::~NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const*&, node::UnionBytes const&>(char const*&, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_emplace_unique<std::string const&>(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, std::allocator<std::pair<std::string const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<std::string const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, false, true>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ConfigStringGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::ToJsSet(v8::Local<v8::Context>, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetCacheUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "_register_native_module()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ModuleIdsGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RecordResult(char const*, node::native_module::NativeModuleLoader::Result, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetModuleCategories(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::string>(v8::Local<v8::Context>, std::vector<std::string, std::allocator<std::string> > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::equal_range(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::erase(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy<std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node>(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node&)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)::{lambda(char const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)::{lambda(char const*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::program_name() const [clone .isra.44] [clone .part.45]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::first() [clone .part.77]",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, true> > >::_M_allocate_buckets(unsigned long) [clone .isra.623]",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [clone .part.42]",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.10]",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<std::string (char const*), node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)::{lambda(char const*)#1}>::_M_invoke(std::_Any_data const&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_range_insert<__gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > > >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, std::forward_iterator_tag) [clone .constprop.713]",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_assign_aux<std::string const*>(std::string const*, std::string const*, std::forward_iterator_tag) [clone .constprop.719]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetBashCompletion()",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>, std::function<std::string (char const*)>)",
    "type": "CPP"
  },
  {
    "name": "_register_options()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Parse(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*) const::{lambda()#1}::operator()() const [clone .isra.465]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::SplitHostPort(std::string const&, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::ParseNodeOptionsEnvVar(std::string const&, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__detail::_Insert_base<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_range<std::__detail::_Node_const_iterator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, false, true>, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, true> > > >(std::__detail::_Node_const_iterator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, false, true>, std::__detail::_Node_const_iterator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, false, true>, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, true> > > const&, std::integral_constant<bool, true>) [clone .constprop.723]",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::DebugOptions, node::Options>(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo&&) [clone .constprop.711]",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerIsolateOptions, node::Options>(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerProcessOptions, node::Options>(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo&&) [clone .constprop.722]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, bool node::EnvironmentOptions::*, node::OptionEnvvarSettings, bool) [clone .constprop.721]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, node::options_parser::OptionsParser<node::EnvironmentOptions>::NoOp, node::OptionEnvvarSettings) [clone .isra.634] [clone .constprop.720]",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo&&) [clone .constprop.703]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::AddOption(char const*, char const*, node::options_parser::OptionsParser<node::PerIsolateOptions>::V8Option, node::OptionEnvvarSettings) [clone .isra.643] [clone .constprop.702]",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo&&) [clone .constprop.698]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::PerIsolateOptionsParser(node::options_parser::EnvironmentOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::PerProcessOptionsParser(node::options_parser::PerIsolateOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::get_debug_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::get_per_isolate_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::get_per_env_options()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::ToV8Value(v8::Local<v8::Context>, std::string const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long long __gnu_cxx::__stoa<unsigned long long, unsigned long long, char, int>(unsigned long long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::string, std::vector<std::string, std::allocator<std::string> > >(v8::Local<v8::Context>, std::unordered_map<std::string, std::vector<std::string, std::allocator<std::string> >, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > > > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ParseAndValidatePort(std::string const&, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::PerProcessOptions>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::push_back(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::pop_first()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::equal_range(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::equal_range(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::equal_range(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, std::initializer_list<std::string> const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, std::initializer_list<std::string> const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Parse(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddOption(char const*, char const*, bool node::DebugOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Parse(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Parse(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, bool node::EnvironmentOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::string node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::vector<std::string, std::allocator<std::string> > node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, unsigned long node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::AddOption(char const*, char const*, bool node::PerIsolateOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, bool node::PerProcessOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, std::string node::PerProcessOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::EnvironmentOptions>::Insert<node::DebugOptions>(node::options_parser::OptionsParser<node::DebugOptions> const&, node::DebugOptions* (node::EnvironmentOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::ImpliesNot(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerIsolateOptions>::Insert<node::EnvironmentOptions>(node::options_parser::OptionsParser<node::EnvironmentOptions> const&, node::EnvironmentOptions* (node::PerIsolateOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerProcessOptions>::Insert<node::PerIsolateOptions>(node::options_parser::OptionsParser<node::PerIsolateOptions> const&, node::PerIsolateOptions* (node::PerProcessOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::ImpliesNot(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetFreeMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetTotalMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetUptime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetUserInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetLoadAvg(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetHostname(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetHomeDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetPriority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetOSInformation(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::SetPriority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_os()",
    "type": "CPP"
  },
  {
    "name": "node::os::GetCPUInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetInterfaceAddresses(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::String> >(v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::Number> >(v8::Local<v8::Number>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::String>&>(v8::Local<v8::String>&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionStart(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GarbageCollectionCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::performance::RemoveGarbageCollectionTracking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::InstallGarbageCollectionTracking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::SetupPerformanceObservers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ClearMark(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Timerify(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Notify(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::OnInterval()",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::ToObject() const",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Mark(node::performance::PerformanceMilestone, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkMilestone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::Notify(node::Environment*, node::performance::PerformanceEntryType, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceGCCallback(node::Environment*, std::unique_ptr<node::performance::GCPerformanceEntry, std::default_delete<node::performance::GCPerformanceEntry> >)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::TimerFunctionCall(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::ELDHistogram(node::Environment*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "_register_performance()",
    "type": "CPP"
  },
  {
    "name": "node::performance::Mark(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Measure(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEventWithTimestamp(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int, long)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::~ELDHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::~ELDHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::performance::GCPerformanceEntry::~GCPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::~PerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::GCPerformanceEntry::~GCPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::~PerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::GetName(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NumberOfWorkerThreads()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetStackTracePrinter()",
    "type": "CPP"
  },
  {
    "name": "node::MultiIsolatePlatform::CancelPendingDelayedTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()::{lambda(node::DelayedTask*)#1}::_FUN(node::DelayedTask*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::MonotonicallyIncreasingTime()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CurrentClockTimeMillis()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetStackTracePrinter()::{lambda()#1}::_FUN()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::PlatformWorkerThread(void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::GetForegroundTaskRunner()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::Shutdown()::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()::{lambda(node::DelayedTask*)#1}::operator()(node::DelayedTask*) const::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double) [clone .part.306]",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::BlockingDrain()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::NumberOfWorkerThreads() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DecreaseHandleCount()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DeleteFromScheduledTasks(node::DelayedTask*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallDelayedOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::AddIsolateFinishedCallback(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::AddShutdownCallback(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForNodeIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::IdleTasksEnabled(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetForegroundTaskRunner(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, false, false>, bool> std::_Hashtable<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<v8::Isolate*&, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >(std::integral_constant<bool, true>, v8::Isolate*&, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> >&&) [clone .constprop.312]",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, node::IsolatePlatformDelegate*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::WorkerThreadsTaskRunner(int)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NodePlatform(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::DrainTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::FlushForegroundTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PerIsolatePlatformData(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::UnregisterIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::UpdateTraceEventDuration(unsigned char const*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::RemoveTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetPageAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::IdleTasksEnabled(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetStackTracePrinter()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::DumpWithoutCrashing()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::Push(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::RunTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallLowPriorityTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallBlockingTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<uv_timer_s*, std::allocator<uv_timer_s*> >::_M_realloc_insert<uv_timer_s* const&>(__gnu_cxx::__normal_iterator<uv_timer_s**, std::vector<uv_timer_s*, std::allocator<uv_timer_s*> > >, uv_timer_s* const&)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> >::_M_realloc_insert<node::PerIsolatePlatformData::ShutdownCallback>(__gnu_cxx::__normal_iterator<node::PerIsolatePlatformData::ShutdownCallback*, std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> > >, node::PerIsolatePlatformData::ShutdownCallback&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > >::_M_realloc_insert<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >*, std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > > >, std::unique_ptr<unsigned long, std::default_delete<unsigned long> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::Isolate* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<uv_timer_s*, uv_timer_s*, std::allocator<uv_timer_s*>, std::__detail::_Identity, std::equal_to<uv_timer_s*>, std::hash<uv_timer_s*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<uv_timer_s*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::Run()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, std::allocator<std::unique_ptr<v8::Task, std::default_delete<v8::Task> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::TaskQueue()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> >, std::allocator<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::GenDebugSymbols()",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmit(node::Environment*, char const*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitWarningGeneric(node::Environment*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitDeprecationWarning(node::Environment*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitExperimentalWarning(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::set<std::string, std::less<std::string>, std::allocator<std::string> >::~set()",
    "type": "CPP"
  },
  {
    "name": "node::CauseSegfault(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Abort(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HrtimeBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Hrtime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CPUUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugEnd(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ReallyExit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Uptime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Rss(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Cwd(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Chdir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ResourceUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Umask(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeProcessMethods(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_process_methods()",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveRequests(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Kill(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugProcess(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::RawDebug(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "node::GetParentProcessId(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessTitleSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessTitleGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugPortGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugPortSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CreateProcessObject(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::PatchProcessObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::string const&, std::ostream&, v8::Local<v8::Object>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::string const&, std::ostream&, v8::Local<v8::Object>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.15]",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::advance() [clone .part.43]",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_one_space() [clone .isra.44] [clone .part.45]",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_new_line() [clone .isra.46] [clone .part.47]",
    "type": "CPP"
  },
  {
    "name": "report::PrintNetworkInterfaceInfo(node::JSONWriter*)",
    "type": "CPP"
  },
  {
    "name": "report::PrintJavaScriptErrorStack(node::JSONWriter*, v8::Isolate*, v8::Local<v8::Object>, char const*)",
    "type": "CPP"
  },
  {
    "name": "report::PrintVersionInformation(node::JSONWriter*)",
    "type": "CPP"
  },
  {
    "name": "report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::string const&, std::ostream&, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "report::TriggerNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::string const&, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "report::GetNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, v8::Local<v8::Object>, std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::string const&, std::ostream&, v8::Local<v8::Object>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}::operator()(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::string const&, std::ostream&, v8::Local<v8::Object>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_start()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_end()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_objectend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_arrayend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_string(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_string(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_objectstart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [9], unsigned long>(char const (&) [9], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_arraystart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [8], std::string>(char const (&) [8], std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], std::string>(char const (&) [5], std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [10], char [256]>(char const (&) [10], char const (&) [256])",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], unsigned long>(char const (&) [5], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [11], unsigned long>(char const (&) [11], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "report::SetReportOnFatalError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnFatalError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetCompact(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::WriteReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetCompact(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetFilename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetReportOnSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetReportOnUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetFilename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_report()",
    "type": "CPP"
  },
  {
    "name": "report::ReportEndpoint(uv_handle_s*, sockaddr*, char const*, node::JSONWriter*) [clone .isra.27]",
    "type": "CPP"
  },
  {
    "name": "report::WalkHandle(uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::SerializerContext::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::SerializerContext::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::SerializerContext::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::WriteHeader(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::ReadValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::SetTreatArrayBufferViewsAsHostObjects(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::ReleaseBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::ReadHeader(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::WriteDouble(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::GetWireFormatVersion(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::WriteUint32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::ReadDouble(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::WriteValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::ReadUint32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::ReadUint64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::WriteUint64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::DeserializerContext::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::ReadRawBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "_register_serdes()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::WriteRawBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SerializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DeserializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.4]",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetFlowLabel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::LegacyDetail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::ToString()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::ToString()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Detail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::ToSockAddr(int, char const*, unsigned int, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(int, char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::Hash::operator()(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_match(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::compare(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_in_network(node::SocketAddress const&, int) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressBlockList(std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::RemoveSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressRange(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressMask(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SocketAddressRule(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SocketAddressRangeRule(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SocketAddressMaskRule(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SocketAddressBlockListWrap(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Check(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddRange(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddSubnet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SocketAddressBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "_register_block_list()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::ToString()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddAddress(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetRules(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Create(node::Environment*, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<node::SocketAddress, std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > >, std::allocator<std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > > >, std::__detail::_Select1st, std::equal_to<node::SocketAddress>, node::SocketAddress::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](node::SocketAddress const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBlockListWrap, false>::BaseObjectPtrImpl(node::SocketAddressBlockListWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBase, false>::BaseObjectPtrImpl(node::SocketAddressBase*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::StatWatcher(node::fs::BindingData*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Callback(uv_fs_poll_s*, int, uv_stat_t const*, uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "node::symbols::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_symbols()",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::RunMicrotasks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::SetTickCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::SetPromiseRejectCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::EnqueueMicrotask(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::PromiseRejectCallback(v8::PromiseRejectMessage)",
    "type": "CPP"
  },
  {
    "name": "_register_task_queue()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Disable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetTraceCategoryStateUpdateHandler(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetEnabledCategories(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_trace_events()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Enable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsNumberObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsStringObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsBooleanObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsBigIntObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsBoxedPrimitive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSymbolObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsAnyArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSharedArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsModuleNamespaceObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsProxy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsDataView(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsWeakSet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsWeakMap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSetIterator(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsMapIterator(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsMap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsPromise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsGeneratorObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsGeneratorFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsAsyncFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsRegExp(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsNativeError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsArgumentsObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsDate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsExternal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeTypes(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_types()",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ToASCII(std::string const&, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ToUnicode(std::string const&, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::NormalizePort(std::string const&, int)",
    "type": "CPP"
  },
  {
    "name": "bool node::url::(anonymous namespace)::IsForbiddenHostCodePoint<char>(char)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.10]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::IsSpecial(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::URLHost::ParseIPv6Host(char const*, unsigned long) [clone .constprop.86]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::SetURLConstructor(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ToUSVString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::PercentDecode(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::AppendOrEscape(std::string*, unsigned char, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ShortenUrlPath(node::url::url_data*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::URLHost::ToStringMove()",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::EncodeAuthSet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::URLHost::ParseHost(char const*, unsigned long, bool, bool) [clone .constprop.85]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ParseHost(std::string const&, std::string*, bool, bool) [clone .constprop.84]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::DomainToASCII(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::DomainToUnicode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8String(v8::Isolate*, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToFilePath() const",
    "type": "CPP"
  },
  {
    "name": "_register_url()",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::SetArgs(node::Environment*, v8::Local<v8::Value>*, node::url::url_data const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToObject(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::Parse(char const*, unsigned long, node::url::url_parse_state, node::url::url_data*, bool, node::url::url_data const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::FromFilePath(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::Parse(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<char const (&) [1]>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, char const (&) [1])",
    "type": "CPP"
  },
  {
    "name": "node::util::ArrayBufferViewHasBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::Sleep(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetExternalValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetConstructorName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetPromiseDetails(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetProxyDetails(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::PreviewEntries(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GuessHandleType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetOwnNonIndexProperties(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetHiddenValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::SetHiddenValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_util()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::alpn_buffer_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::arrow_message_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_context_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_global_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::decorated_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_type_tag() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_wrapper() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::untransferable_object_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::Get(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::IncRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::DecRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::SetFlagsFromString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::CachedDataVersionTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapCodeStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapSpaceStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_v8()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>::BaseObjectPtrImpl(node::v8_utils::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.4]",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .constprop.233]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::_SetMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::WASI(node::Environment*, v8::Local<v8::Object>, uvwasi_options_s*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::backingStore(char**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "_register_wasi()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SchedYield(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdClose(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdDatasync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcExit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcRaise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockResGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRenumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdTell(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::RandomGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatDirName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathCreateDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRemoveDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathUnlinkFile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PollOneoff(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdWrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathSymlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathReadlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathLink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockTimeGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetFlags(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAllocate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetRights(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdReaddir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPwrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockShutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAdvise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSeek(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockRecv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockSend(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Watchdog(v8::Isolate*, unsigned long, bool*)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Run(void*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Timer(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HandleSignal(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::RunSigintWatchdog(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Watchdog(v8::Isolate*, unsigned long, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::~Watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::watchdog::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::TraceSigintWatchdog(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::InformWatchdogsAboutSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::~SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HasPendingSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Unregister(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "_register_watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleInterrupt()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::TraceSigintWatchdog(node::Environment*, v8::Local<v8::Object>)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleSigint()::{lambda(v8::Isolate*, void*)#1}::_FUN(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Register(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::SigintWatchdog(v8::Isolate*, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> >::_M_realloc_insert<node::SigintWatchdogBase* const&>(__gnu_cxx::__normal_iterator<node::SigintWatchdogBase**, std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> > >, node::SigintWatchdogBase* const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::worker::Worker::Run()::{lambda(node::Environment*, int)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::worker::Worker::Run()::{lambda(node::Environment*, int)#2}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.23]",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::GetEnvMessagePort(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopStartTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<std::string (char const*), node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*)#1}>::_M_invoke(std::_Any_data const&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::is_stopped() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::UpdateResourceConstraints(v8::ResourceConstraints*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::CreateEnvMessagePort(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::JoinThread()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::operator()(void*) const::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::InitWorker(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_worker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::operator()(void*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::operator()(void*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Worker(node::Environment*, v8::Local<v8::Object>, std::string const&, std::shared_ptr<node::PerIsolateOptions>, std::vector<std::string, std::allocator<std::string> >&&, std::shared_ptr<node::KVStore>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Exit(int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::NearHeapLimit(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Environment*, int), node::worker::Worker::Run()::{lambda(node::Environment*, int)#2}>::_M_invoke(std::_Any_data const&, node::Environment*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StopThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Run()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::WorkerHeapSnapshotTaker, false>::BaseObjectPtrImpl(node::worker::WorkerHeapSnapshotTaker*)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >(std::unique_ptr<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::worker::Worker*, node::worker::Worker*, std::allocator<node::worker::Worker*>, std::__detail::_Identity, std::equal_to<node::worker::Worker*>, std::hash<node::worker::Worker*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::worker::Worker*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Params(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AdjustAmountOfExternalAllocatedMemory()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::AdjustAmountOfExternalAllocatedMemory()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AdjustAmountOfExternalAllocatedMemory()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::FreeForZlib(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AllocForBrotli(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::~ZlibContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::~BrotliEncoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::~BrotliEncoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::ErrorForMessage(char const*) const [clone .isra.12]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Close()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Params(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::~ZlibContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::FreeForZlib(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::FreeForZlib(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AllocForBrotli(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AllocForZlib(void*, unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::~BrotliDecoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::~BrotliDecoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::EmitError(node::(anonymous namespace)::CompressionError const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::EmitError(node::(anonymous namespace)::CompressionError const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::EmitError(node::(anonymous namespace)::CompressionError const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::SetDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::InitZlib()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::GetErrorInfo() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::Params(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Write<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Write<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Write<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Write<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Write<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Write<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DefineZlibConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_zlib()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::TrackField(char const*, node::MemoryRetainer const*, char const*) [clone .constprop.158]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Fchmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::PipeWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::PipeWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, bool)",
    "type": "CPP"
  },
  {
    "name": "_register_pipe_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_connect_s, void (*)(uv_connect_s*, int)>::Wrapper(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::~ProcessWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::~ProcessWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::OnExit(uv_process_s*, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Kill(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Spawn(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_process_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::~SignalWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::~SignalWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(uv_signal_s*, int)#1}::_FUN(uv_signal_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_iterator<std::pair<int const, long> > std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<int const, long> >, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [clone .constprop.64]",
    "type": "CPP"
  },
  {
    "name": "node::HasSignalJSHandler(int)",
    "type": "CPP"
  },
  {
    "name": "_register_signal_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DecreaseSignalHandlerCount(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, long> >*)",
    "type": "CPP"
  },
  {
    "name": "std::map<int, long, std::less<int>, std::allocator<std::pair<int const, long> > >::~map()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::erase(int const&)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::WriteCallback(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ShutdownCallback(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::CloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ExitCallback(uv_process_s*, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::AllocCallback(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Kill() [clone .part.35]",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ReadCallback(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCallback(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::SyncProcessStdioPipe(node::SyncProcessRunner*, bool, bool, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::~SyncProcessStdioPipe()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Initialize(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Close()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::GetOutputAsBuffer(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SyncProcessRunner(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::~SyncProcessRunner()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseStdioPipes()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseHandlesAndDeleteLoop()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseKillTimer()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Kill()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IncrementBufferSizeAndCheckOverflow(long)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnExit(long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnKillTimerTimeout()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::GetError()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetPipeError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildOutputArray()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildResultObject()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOption(int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IsSet(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsString(v8::Local<v8::Value>, char const**)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsStringArray(v8::Local<v8::Value>, char**)",
    "type": "CPP"
  },
  {
    "name": "_register_spawn_sync()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::TryInitializeAndRunLoop(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Run(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Spawn(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> >, std::allocator<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::Error() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetObject()",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CallJSOnreadMethod(long, v8::Local<v8::ArrayBuffer>, unsigned long, node::StreamBase::StreamBaseJSChecks) [clone .constprop.115]",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetExternal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesWritten(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStartJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStopJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::UseUserBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::SetWriteResult(node::StreamWriteResult const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CallJSOnreadMethod(long, v8::Local<v8::ArrayBuffer>, unsigned long, node::StreamBase::StreamBaseJSChecks)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethod(node::Environment*, v8::Local<v8::Signature>, v8::PropertyAttribute, v8::Local<v8::FunctionTemplate>, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterReqFinished(node::StreamReq*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::ShutdownWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::WriteWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Writev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldGet<2>(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldSet<2, &(v8::Value::IsFunction() const)>(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStopJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStartJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::UseUserBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Shutdown>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Writev>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::WriteBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::IsClosed(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::StreamPipe::Unpipe(bool)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::PendingWrites(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeStreamPipe(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::StreamPipe(node::StreamBase*, node::StreamBase*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_pipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(bool)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::StreamPipe::Unpipe(bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::StreamPipe::Unpipe(bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ProcessData(unsigned long, node::AllocatedBuffer&&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::StreamPipe, false>::BaseObjectPtrImpl(node::StreamPipe*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)::{lambda(v8::FunctionCallbackInfo<v8::Value> const&)#1}::_FUN(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvShutdown(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvWrite(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()::{lambda(uv_handle_s*, unsigned long, uv_buf_t*)#1}::_FUN(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetWriteQueueSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::SetBlocking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::LibuvStreamWrap(node::Environment*, v8::Local<v8::Object>, uv_stream_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::From(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvAlloc(unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvRead(long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()::{lambda(uv_stream_s*, long, uv_buf_t const*)#2}::_FUN(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_shutdown_s, void (*)(uv_shutdown_s*, int)>::Wrapper(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_write_s, void (*)(uv_write_s*, int)>::Wrapper(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::data() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::data() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::WriteUCS2(v8::Isolate*, char*, unsigned long, v8::Local<v8::String>, int, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::StorageSize(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Size(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode(char const*, unsigned long, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, unsigned short const*, unsigned long, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*) [clone .part.29]",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Write(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding, int*)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<char>(char*, unsigned long, char const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<unsigned short>(char*, unsigned long, unsigned short const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeStringDecoder(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_string_decoder()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::MakeString(v8::Isolate*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::DecodeData(v8::Isolate*, char const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DecodeData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::FlushData(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FlushData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in6*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in6*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, sockaddr_in*), node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in*)#1}>::_M_invoke(std::_Any_data const&, char const*&&, sockaddr_in*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, sockaddr_in6*), node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in6*)#1}>::_M_invoke(std::_Any_data const&, char const*&&, sockaddr_in6*&&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetNoDelay(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetKeepAlive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::TCPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::TCPWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::AddressToJS(node::Environment*, sockaddr const*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_tcp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in*), int (*)(char const*, int, sockaddr_in*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in6*), int (*)(char const*, int, sockaddr_in6*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in6*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in6*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SetupTimers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::GetLibuvNow(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ToggleTimerRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ToggleImmediateRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ScheduleTimer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_timers()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::OnTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::TimerClosedCb(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::TimerWrap(node::Environment*, std::function<void ()> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::TimerWrapHandle(node::Environment*, std::function<void ()> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Start()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Start()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::DefaultHandle()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::StopTracing()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddMetadataEvent(std::unique_ptr<v8::platform::tracing::TraceObject, std::default_delete<v8::platform::tracing::TraceObject> >)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::AddMetadataEvent(unsigned char const*, char const*, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::InitializeWritersOnThread()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Agent()::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::CreateTraceConfig() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disable(int, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Enable(int, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disconnect(int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::GetEnabledCategories() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddClient(std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> >, node::tracing::Agent::UseDefaultCategoryMode)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AsyncTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::CurrentTimestampMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_erase(std::_Rb_tree_node<node::tracing::AsyncTraceWriter*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::erase(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<node::tracing::AsyncTraceWriter*>, bool> std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_insert_unique<node::tracing::AsyncTraceWriter* const&>(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, std::allocator<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, std::allocator<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, std::allocator<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_hint_equal_pos(std::_Rb_tree_const_iterator<std::string>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_equal<std::_Rb_tree_const_iterator<std::string> >(std::_Rb_tree_const_iterator<std::string>, std::_Rb_tree_const_iterator<std::string>)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::_Rb_tree_const_iterator<std::string> >(std::_Rb_tree_const_iterator<std::string>, std::_Rb_tree_const_iterator<std::string>)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::Flush()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NonBlockingFlushSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::MakeHandle(unsigned long, unsigned int, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::ExtractHandle(unsigned long, unsigned int*, unsigned long*, unsigned int*, unsigned long*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::TryLoadAvailableBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::InternalTraceBuffer(unsigned long, unsigned int, node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NodeTraceBuffer(unsigned long, node::tracing::Agent*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> >, std::allocator<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteToFile(std::string&&, int) [clone .part.59]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::NodeTraceWriter(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteSuffix()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::replace_substring(std::string*, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::FlushPrivate()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::InitializeOnThread(uv_loop_s*)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteToFile(std::string&&, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::StartWrite(uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AfterWrite()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::StartWrite(uv_buf_t)::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::OpenNewFileForStreaming()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetAgent(node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetAgent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::(anonymous namespace)::DoubleToCString(double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendAsTraceFormat(std::string*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::(anonymous namespace)::EscapeString(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::Create()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::CreateArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::TracedValue(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetDouble(char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetBoolean(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetNull(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetString(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendBoolean(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendNull()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendString(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteComma()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetInteger(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendInteger(int)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SetRawMode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::IsTTY(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::GetWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::TTYWrap(node::Environment*, v8::Local<v8::Object>, int, bool, int*)",
    "type": "CPP"
  },
  {
    "name": "_register_tty_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*) [clone .part.51]",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStart(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Disconnect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastLoopback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetBroadcast(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastInterface(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::BufferSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)::{lambda(uv_udp_send_s*, int)#1}::_FUN(uv_udp_send_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SendWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::listener() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::set_listener(node::UDPListener*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::FromObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::UDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::sockaddr_for_family(int, char const*, unsigned short, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoBind(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoConnect(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetSourceMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoSend(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::UDPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "_register_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(uv_udp_s*, long, uv_buf_t const*, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_udp_send_s, void (*)(uv_udp_send_s*, int)>::Wrapper(uv_udp_send_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::MakeUtf8String<char>(v8::Isolate*, v8::Local<v8::Value>, node::MaybeStackBuffer<char, 1024ul>*)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::Utf8Value(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::TwoByteValue::TwoByteValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BufferValue::BufferValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::LowMemoryNotification()",
    "type": "CPP"
  },
  {
    "name": "node::GetProcessTitle(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentTimeInMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(char const*, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(v8::Isolate*, char const*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::ReadFileSync(std::string*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::LocalTime(tm*)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::MakeFilename(unsigned long, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::SplitString(std::string const&, char)",
    "type": "CPP"
  },
  {
    "name": "node::GetHumanReadableProcessName()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::GetErrMap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ErrName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_uv()",
    "type": "CPP"
  },
  {
    "name": "node::MapStaticCodeToLargePages()",
    "type": "CPP"
  },
  {
    "name": "node::LargePagesError(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendResponse(int, std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendNotification(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::flushProtocolNotifications()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::fallThrough(int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::Agent::RequestIoThreadStart()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::Agent::RequestIoThreadStart()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::StartIoThreadWakeup(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ToProtocolString(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "_ZZN4node11Environment11CloseHandleI10uv_async_sZZNS_9inspector5Agent5StartERKSsRKNS_12DebugOptionsESt10shared_ptrINS_15ExclusiveAccessINS_8HostPortENS_9MutexBaseINS_16LibuvMutexTraitsEEEEEEbENKUlPvE_clESI_EUlPS2_E_EEvPT_T0_ENUlP11uv_handle_sE_4_FUNESQ_",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::string const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::fallThrough(int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::flushProtocolNotifications()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::inspector::(anonymous namespace)::ChannelImpl, std::default_delete<node::inspector::(anonymous namespace)::ChannelImpl> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::(anonymous namespace)::ChannelImpl, std::default_delete<node::inspector::(anonymous namespace)::ChannelImpl> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolNotification(std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolResponse(int, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolResponse(int, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolNotification(std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::SameThreadInspectorSession::Dispatch(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::StartIoThread() [clone .part.287]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::StartIoThreadAsyncCallback(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::Agent::RequestIoThreadStart()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::SameThreadInspectorSession::~SameThreadInspectorSession()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::SameThreadInspectorSession::~SameThreadInspectorSession()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Agent(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::string const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::StartIoThread()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ConnectToMainThread(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::string const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)::{lambda(void*)#2}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ReportUncaughtException(v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::PauseOnNextJavascriptStatement(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ToggleAsyncHook(v8::Isolate*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::EnableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::DisableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RegisterAsyncHook(v8::Isolate*, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskScheduled(v8_inspector::StringView const&, void*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskCanceled(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskStarted(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskFinished(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AllAsyncTasksCanceled()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RequestIoThreadStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::StartIoThreadMain(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ContextCreated(v8::Local<v8::Context>, node::ContextInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::IsActive()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::SetParentHandle(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetParentHandle(unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForConnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWorkerManager()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWsUrl() const",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::muteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::unmuteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::valueSubtype(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::formatAccessorsAsProperties(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::isInspectableHeapObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleAPIMessage(int, v8::Isolate::MessageErrorLevel, v8_inspector::StringView const&, v8_inspector::StringView const&, unsigned int, unsigned int, v8_inspector::V8StackTrace*)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::memoryInfo(v8::Isolate*, v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTime(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeEnd(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeStamp(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleClear(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::canExecuteScripts(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::quitMessageLoopOnPause()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runIfWaitingForDebugger(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::ensureDefaultContextInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::currentTimeMS()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (), node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_invoke(std::_Any_data const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::installAdditionalCommandLineAPI(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::cancelTimer(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runMessageLoopOnPause(int)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::resourceNameToUrl(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::maxAsyncCallStackDepthChanged(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::TimerWrapHandle>, std::allocator<std::pair<void* const, node::TimerWrapHandle> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::TimerWrapHandle>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::GenerateID()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetTitle(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetUrl(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::EndSession(int)",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<node::inspector::(anonymous namespace)::RequestToServer, std::allocator<node::inspector::(anonymous namespace)::RequestToServer> >::_M_initialize_map(unsigned long) [clone .constprop.169]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::MessageReceived(int, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::RequestQueueData::RequestQueueData(uv_loop_s*)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetIds()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::RequestQueueData::CloseAndFree(node::inspector::(anonymous namespace)::RequestQueueData*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::RequestQueueData::CloseAndFree(node::inspector::(anonymous namespace)::RequestQueueData*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::InspectorIo(std::shared_ptr<node::inspector::MainThreadHandle>, std::string const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, node::InspectPublishUid const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::~InspectorIo()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::Start(std::shared_ptr<node::inspector::MainThreadHandle>, std::string const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, node::InspectPublishUid const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::StopAcceptingNewConnections()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::ThreadMain()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::ThreadMain(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::GetWsUrl() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::StartSession(int, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::AssignServer(node::inspector::InspectorSocketServer*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::~InspectorIoDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::~IoSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::~IoSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::~InspectorIoDelegate()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetDirectory() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetFilename() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetDirectory() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetFilename() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetDirectory() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::EnsureDirectory(std::string const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::SetSourceMapCacheGetter(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::SetCoverageDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerConnection(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "_register_profiler()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetFilename() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::WriteProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::WriteProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<unsigned int, true, false>, bool> std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<unsigned int const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<unsigned int, false> > > >(unsigned int const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<unsigned int, false> > > const&, std::integral_constant<bool, true>, unsigned long) [clone .constprop.141]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::DispatchMessage(char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::DispatchMessage(char const*, char const*, bool) [clone .constprop.139]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::TakeCoverage()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::StopCoverage()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::StartProfilers(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::StartProfilers(node::Environment*)::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::TakeCoverage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::StopCoverage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::~V8ProfilerSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::~V8ProfilerSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::~V8HeapProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::~V8CoverageConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::~V8CpuProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::~V8CoverageConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::~V8CpuProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::~V8HeapProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<unsigned int, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::AsyncTaskScheduledWrapper(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::~JSBindingsConnection()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::~JSBindingsConnection()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ToProtocolString(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::JSBindingsSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::JSBindingsSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::~JSBindingsConnection()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::~JSBindingsConnection()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::Disconnect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::Disconnect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::IsEnabled(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WaitForDebugger(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::SetConsoleExtensionInstaller(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::Url(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::(anonymous namespace)::InvokeAsyncTaskFnWithId<&node::inspector::Agent::AsyncTaskStarted>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::(anonymous namespace)::InvokeAsyncTaskFnWithId<&node::inspector::Agent::AsyncTaskFinished>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::(anonymous namespace)::InvokeAsyncTaskFnWithId<&node::inspector::Agent::AsyncTaskCanceled>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::RegisterAsyncHookWrapper(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::Dispatch(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::Dispatch(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallAndPauseOnStart(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::InspectorConsoleCall(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::JSBindingsSessionDelegate::~JSBindingsSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::JSBindingsSessionDelegate::~JSBindingsSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::JSBindingsSessionDelegate::~JSBindingsSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::JSBindingsSessionDelegate::~JSBindingsSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::MainThreadConnection>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::JSBindingsConnection<node::inspector::(anonymous namespace)::LocalConnection>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_inspector()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::AcceptUpgrade(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::CancelHandshake()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::WaitForCloseReply()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::allocate_buffer(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WriteRequest::Cleanup(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::OnCloseFrameWritten(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::OnEof()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::~WsHandler()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::~WsHandler()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::OnPath(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<char, std::allocator<char> >::_M_range_insert<char*>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, char*, char*, std::forward_iterator_tag) [clone .constprop.139]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::ThenCloseAndReportFailure(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::OnClosed(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::OnEof()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::OnDataReceivedCb(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::OnHeaderField(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::Write(std::vector<char, std::allocator<char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::ProtocolHandler(node::inspector::InspectorSocket*, std::unique_ptr<node::inspector::TcpHolder, node::FunctionDeleter<node::inspector::TcpHolder, &node::inspector::TcpHolder::DisconnectAndDispose> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::WriteRaw(std::vector<char, std::allocator<char> > const&, void (*)(uv_write_s*, int))",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::GetHost() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::TcpHolder(std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::Accept(uv_stream_s*, std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::SetHandler(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::WriteRaw(std::vector<char, std::allocator<char> > const&, void (*)(uv_write_s*, int))",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::CancelHandshake()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::AcceptUpgrade(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::CloseFrameReceived()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::OnData(std::vector<char, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::DisconnectAndDispose(node::inspector::TcpHolder*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::ReclaimUvBuf(uv_buf_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::~InspectorSocket()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Shutdown(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Accept(uv_stream_s*, std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::AcceptUpgrade(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::CancelHandshake()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::GetHost()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::SwitchProtocol(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Write(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::~HttpHandler()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::OnMessageComplete(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::~HttpHandler()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::OnData(std::vector<char, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WsHandler::Write(std::vector<char, std::allocator<char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::HttpHandler::OnHeaderValue(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<char, std::allocator<char> >::_M_realloc_insert<char>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, char&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_unique_pos(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::MatchPathSegment(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnWsFrame(std::vector<char, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::FormatAddress(std::string const&, std::string const&, bool) [clone .constprop.183]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::FormatAddress(std::string const&, std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::FormatHostPort(std::string const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::PrintDebuggerReadyMessage(std::string const&, std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > > const&, std::vector<std::string, std::allocator<std::string> > const&, char const*, bool, _IO_FILE*) [clone .part.86]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::MapToString(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::FormatWsAddress(std::string const&, int, std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::PrintDebuggerReadyMessage(std::string const&, std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > > const&, std::vector<std::string, std::allocator<std::string> > const&, char const*, bool, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::InspectorSocketServer(std::unique_ptr<node::inspector::SocketServerDelegate, std::default_delete<node::inspector::SocketServerDelegate> >, uv_loop_s*, std::string const&, int, node::InspectPublishUid const&, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Session(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::GetFrontendURL(bool, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::TerminateConnections()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::TargetExists(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Port() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Send(int, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::CloseServerSocket(node::inspector::ServerSocket*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::SocketSession(node::inspector::InspectorSocketServer*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Send(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::DetectPort()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::Listen(sockaddr*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::~InspectorSocketServer()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_iterator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > std::_Rb_tree<int, std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [clone .constprop.176]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SessionTerminated(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Accept(int, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::SocketConnectedCallback(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SessionStarted(int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnSocketUpgrade(std::string const&, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Start()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&) [clone .constprop.178]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SendListResponse(node::inspector::InspectorSocket*, std::string const&, node::inspector::SocketSession*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::HandleGetRequest(int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnHttpGet(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::FreeOnCloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::erase(int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, int const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::allocator<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > > >::_M_realloc_insert<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > >(__gnu_cxx::__normal_iterator<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >*, std::vector<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::allocator<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >*, std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > > >, std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >&&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::(anonymous namespace)::AnotherThreadObjectReference<node::inspector::(anonymous namespace)::MainThreadSessionState>::Apply<std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> > >(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >), std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::(anonymous namespace)::AnotherThreadObjectReference<node::inspector::(anonymous namespace)::MainThreadSessionState>::Apply<std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> > >(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >), std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::DeleteRequest::~DeleteRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::InspectorSessionDelegate, node::inspector::(anonymous namespace)::ThreadSafeDelegate::SendMessageToFrontend(v8_inspector::StringView const&)::{lambda(node::inspector::InspectorSessionDelegate*)#1}>::~CallRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::DeletableWrapper<node::inspector::InspectorSessionDelegate>::~DeletableWrapper()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::(anonymous namespace)::MainThreadSessionState, std::_Bind<void (*(std::_Placeholder<1>, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >), std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >))(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >), std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >&)> >::~CallRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::(anonymous namespace)::MainThreadSessionState, std::_Bind<void (*(std::_Placeholder<1>, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >), std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >))(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >), std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >&)> >::~CallRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CreateObjectRequest<std::_Bind<std::unique_ptr<node::inspector::(anonymous namespace)::MainThreadSessionState, std::default_delete<node::inspector::(anonymous namespace)::MainThreadSessionState> > (*(std::_Placeholder<1>, bool))(node::inspector::MainThreadInterface*, bool)> >::~CreateObjectRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::MainThreadSessionState::Create(node::inspector::MainThreadInterface*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::DeleteRequest::~DeleteRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CreateObjectRequest<std::_Bind<std::unique_ptr<node::inspector::(anonymous namespace)::MainThreadSessionState, std::default_delete<node::inspector::(anonymous namespace)::MainThreadSessionState> > (*(std::_Placeholder<1>, bool))(node::inspector::MainThreadInterface*, bool)> >::~CreateObjectRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::(anonymous namespace)::MainThreadSessionState, std::_Bind<void (*(std::_Placeholder<1>, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >), std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >))(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >), std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >&)> >::~CallRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::InspectorSessionDelegate, node::inspector::(anonymous namespace)::ThreadSafeDelegate::SendMessageToFrontend(v8_inspector::StringView const&)::{lambda(node::inspector::InspectorSessionDelegate*)#1}>::~CallRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::(anonymous namespace)::MainThreadSessionState, std::_Bind<void (*(std::_Placeholder<1>, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >), std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >))(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >), std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >&)> >::~CallRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::DeletableWrapper<node::inspector::InspectorSessionDelegate>::~DeletableWrapper()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::MainThreadSessionState::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::DispatchMessages() [clone .part.177]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::DeletableWrapper<node::inspector::(anonymous namespace)::MainThreadSessionState>::~DeletableWrapper()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::DeletableWrapper<node::inspector::(anonymous namespace)::MainThreadSessionState>::~DeletableWrapper()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::(anonymous namespace)::MainThreadSessionState, std::_Bind<void (*(std::_Placeholder<1>, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >), std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >))(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >), std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >&)> >::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::(anonymous namespace)::MainThreadSessionState, std::_Bind<void (*(std::_Placeholder<1>, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >), std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >))(node::inspector::(anonymous namespace)::MainThreadSessionState*, void (node::inspector::(anonymous namespace)::MainThreadSessionState::*)(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >), std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >&)> >::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::MainThreadInterface::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::MainThreadInterface::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::MainThreadInterface::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::~MainThreadInterface()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CrossThreadInspectorSession::~CrossThreadInspectorSession()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ThreadSafeDelegate::~ThreadSafeDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CrossThreadInspectorSession::~CrossThreadInspectorSession()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ThreadSafeDelegate::~ThreadSafeDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ThreadSafeDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CrossThreadInspectorSession::Dispatch(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::MainThreadSessionState::Dispatch(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CallRequest<node::inspector::InspectorSessionDelegate, node::inspector::(anonymous namespace)::ThreadSafeDelegate::SendMessageToFrontend(v8_inspector::StringView const&)::{lambda(node::inspector::InspectorSessionDelegate*)#1}>::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::WaitForFrontendEvent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::DispatchMessages()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::RemoveObject(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::DeleteRequest::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetObject(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetObjectIfExists(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Reset()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Expired()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::MainThreadInterface(node::inspector::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::AddObject(int, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::MakeDelegateThreadSafe(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::CreateObjectRequest<std::_Bind<std::unique_ptr<node::inspector::(anonymous namespace)::MainThreadSessionState, std::default_delete<node::inspector::(anonymous namespace)::MainThreadSessionState> > (*(std::_Placeholder<1>, bool))(node::inspector::MainThreadInterface*, bool)> >::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Utf8ToStringView(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >, std::allocator<std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseJSON(v8_inspector::StringView)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::toDouble(char const*, unsigned long, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::jsonToMessage(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::binaryToMessage(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromUTF8(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::CharactersUTF8(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::builderAppendQuotedString(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseJSON(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromUTF16(unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::CharacterCount(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseMessage(std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::StringViewToUtf8(v8_inspector::StringView)",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::Append(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::~StringByteSink()",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::~StringByteSink()",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::StringByteSink(std::string*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::notifyWhenWaitingForDisconnect(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::notifyWaitingForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::~RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::~RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::inspector::protocol::NodeRuntime::Frontend, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend> >(std::unique_ptr<node::inspector::protocol::NodeRuntime::Frontend, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::DestroyFrontendWrapperRequest::~DestroyFrontendWrapperRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::DestroyFrontendWrapperRequest::~DestroyFrontendWrapperRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::DestroyFrontendWrapperRequest::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::CreateFrontendWrapperRequest::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::DeletableFrontendWrapper::~DeletableFrontendWrapper()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::DeletableFrontendWrapper::~DeletableFrontendWrapper()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::CreateFrontendWrapperRequest::~CreateFrontendWrapperRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::CreateFrontendWrapperRequest::~CreateFrontendWrapperRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::~TracingAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::~TracingAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::InspectorTraceWriter::~InspectorTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::SendMessageRequest::~SendMessageRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::SendMessageRequest::~SendMessageRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::InspectorTraceWriter::~InspectorTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::SendMessageRequest::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::InspectorTraceWriter::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::InspectorTraceWriter::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::TracingAgent(node::Environment*, std::shared_ptr<node::inspector::MainThreadHandle>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::start(std::unique_ptr<node::inspector::protocol::NodeTracing::TraceConfig, std::default_delete<node::inspector::protocol::NodeTracing::TraceConfig> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::getCategories(std::unique_ptr<node::inspector::protocol::Array<std::string>, std::default_delete<node::inspector::protocol::Array<std::string> > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::disable()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::AgentWorkerInspectorDelegate::~AgentWorkerInspectorDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::AgentWorkerInspectorDelegate::~AgentWorkerInspectorDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ParentInspectorSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::enable(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::WorkerAgent(std::weak_ptr<node::inspector::WorkerManager>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Send(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Receive(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::sendMessageToWorker(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Detached(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::detach(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ParentInspectorSessionDelegate::~ParentInspectorSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ParentInspectorSessionDelegate::~ParentInspectorSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::WorkerCreated(std::string const&, std::string const&, bool, std::shared_ptr<node::inspector::MainThreadHandle>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::AgentWorkerInspectorDelegate::WorkerCreated(std::string const&, std::string const&, bool, std::shared_ptr<node::inspector::MainThreadHandle>)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::~WorkerInfo()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::~WorkerInfo()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WorkerFinishedRequest::~WorkerFinishedRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WorkerFinishedRequest::~WorkerFinishedRequest()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, int, std::allocator<int>, std::__detail::_Identity, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, int const&) [clone .constprop.155]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WorkerStartedRequest::~WorkerStartedRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WorkerStartedRequest::~WorkerStartedRequest()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WorkerFinishedRequest::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::ParentInspectorHandle(unsigned long, std::string const&, std::shared_ptr<node::inspector::MainThreadHandle>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::~ParentInspectorHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::WorkerFinished(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::NewParentHandle(unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::RemoveAttachDelegate(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManagerEventHandle::~WorkerManagerEventHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::WorkerStarted(std::shared_ptr<node::inspector::MainThreadHandle>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::SetAutoAttach(std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::WorkerStarted(unsigned long, node::inspector::WorkerInfo const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WorkerStartedRequest::Call(node::inspector::MainThreadInterface*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::SetWaitOnStartForDelegate(int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManagerEventHandle::SetWaitOnStart(bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned long, std::pair<unsigned long const, node::inspector::WorkerInfo>, std::allocator<std::pair<unsigned long const, node::inspector::WorkerInfo> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, node::inspector::WorkerInfo>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NoPasswordCallback(char*, int, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::IsExtraRootCertsFileLoaded(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetFreeListLength(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#2}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#3}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#3}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::crypto::KeyObjectData::CreateSecret(v8::Local<v8::ArrayBufferView>)::{lambda(char*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::crypto::KeyObjectData::CreateSecret(v8::Local<v8::ArrayBufferView>)::{lambda(char*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PasswordCallback(char*, int, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ENGINE_free_fn(engine_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ENGINE_finish_and_free_fn(engine_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LoadEngineById(char const*, char (*) [1024])",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrime(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(dh_st const*)#1}::_FUN(dh_st const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetGenerator(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(dh_st const*)#1}::_FUN(dh_st const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::TicketCompatibilityCallback(ssl_st*, unsigned char*, unsigned char*, evp_cipher_ctx_st*, hmac_ctx_st*, int)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (char*), node::crypto::KeyObjectData::CreateSecret(v8::Local<v8::ArrayBufferView>)::{lambda(char*)#1}>::_M_invoke(std::_Any_data const&, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<evp_pkey_st* (unsigned char const**, long), node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#1}>::_M_invoke(std::_Any_data const&, unsigned char const**&&, long&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<evp_pkey_st* (unsigned char const**, long), node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#2}>::_M_invoke(std::_Any_data const&, unsigned char const**&&, long&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TryParsePublicKey(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, char const*, std::function<evp_pkey_st* (unsigned char const**, long)> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::IsSupportedAuthenticatedMode(evp_cipher_st const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ConvertSignatureToDER(node::crypto::ManagedEVPPKey const&, node::ArrayBufferViewContents<char, 64ul> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(dh_st const*)#1}::_FUN(dh_st const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(dh_st const*)#1}::_FUN(dh_st const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ZeroPadDiffieHellmanSecret(unsigned long, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(dh_st*, bignum_st*)#1}::_FUN(dh_st*, bignum_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(dh_st*, bignum_st*)#1}::_FUN(dh_st*, bignum_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::InitCryptoOnce()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::SecureBuffer(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*, unsigned long, void*)#1}::_FUN(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::IsASN1Sequence(unsigned char const*, unsigned long, unsigned long*, unsigned long*) [clone .part.63]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ParsePrivateKey(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, node::crypto::PrivateKeyEncodingConfig const&, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ApplyRSAOptions(node::crypto::ManagedEVPPKey const&, evp_pkey_ctx_st*, int, v8::Maybe<int> const&) [clone .isra.197]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Hmac*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Hmac*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Hash*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Hash*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<evp_pkey_st* (unsigned char const**, long), node::crypto::ParsePublicKeyPEM(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >*, char const*, int)::{lambda(unsigned char const**, long)#3}>::_M_invoke(std::_Any_data const&, unsigned char const**&&, long&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetKeyFormatAndTypeFromJs(node::crypto::AsymmetricKeyEncodingConfig*, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyEncodingContext) [clone .constprop.450]",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.21]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::array_push_back<evp_md_st>(evp_md_st const*, char const*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ThrowError(v8::Local<v8::Value> (*)(v8::Local<v8::String>), char const*) [clone .constprop.461]",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::array_push_back<evp_cipher_st>(evp_cipher_st const*, char const*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::EnableTicketKeyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::VerifyErrorGetter(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::CtxGetter(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetSymmetricKeySize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAutoPadding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GenerateKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetMaxProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetMinProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetHashes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetTicketKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetMinProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetMaxProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetRootCertificates(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::GetAuthTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ConvertSignatureToP1363(node::Environment*, node::crypto::ManagedEVPPKey const&, node::AllocatedBuffer&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacDigest(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAuthTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCurves(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CreateNativeKeyObjectClass(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSSLCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Initialize(node::Environment*, v8::Local<v8::Object>)::{lambda(v8::Local<v8::String>, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))#1}::operator()(v8::Local<v8::String>, void (*)(v8::FunctionCallbackInfo<v8::Value> const&)) const [clone .isra.124]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::~SecureContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::~SecureContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::~Hash()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::~ECDH()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::~ECDH()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::~Hash()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::error::Decorate(node::Environment*, v8::Local<v8::Object>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EntropySource(unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SecureContext(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSL_CTX_use_certificate_chain(ssl_ctx_st*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >&&, stack_st_X509*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSL_CTX_use_certificate_chain(ssl_ctx_st*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> >&&, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyCallback(int, x509_store_ctx_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ByteSource(node::crypto::ByteSource&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::~ByteSource()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::operator=(node::crypto::ByteSource&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::get() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::size() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromString(node::Environment*, v8::Local<v8::String>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromStringOrBuffer(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromBuffer(v8::Local<v8::Value>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::NullTerminatedCopy(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromSymmetricKeyObjectHandle(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ByteSource(char const*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::Allocated(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::Foreign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ManagedEVPPKey(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ManagedEVPPKey(node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::operator=(node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::get() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::CreateSecret(v8::Local<v8::ArrayBufferView>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::CreateAsymmetric(node::crypto::KeyType, node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetKeyType() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetAsymmetricKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetSymmetricKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetSymmetricKeySize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Initialize(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Data()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::KeyObjectHandle(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetAsymmetricKeyType() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetAsymmetricKeyType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportSecretKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CipherBase(node::Environment*, v8::Local<v8::Object>, node::crypto::CipherBase::CipherKind)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitAuthenticated(char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CheckCCMMessageLength(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::IsAuthenticatedMode() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MaybePassAuthTagToOpenSSL()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(char const*, unsigned int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAutoPadding(bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Final(node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::Hmac(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::Hash(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashInit(evp_md_st const*, v8::Maybe<unsigned int>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::Init(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::Update(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::SignBase(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::Sign(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignFinal(node::crypto::ManagedEVPPKey const&, int, v8::Maybe<int> const&, node::crypto::DSASigEnc)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::Verify(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyFinal(node::crypto::ManagedEVPPKey const&, node::crypto::ByteSource const&, int, v8::Maybe<int> const&, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::DiffieHellman(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(char const*, int, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::VerifyContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ECDH(node::Environment*, v8::Local<v8::Object>, std::unique_ptr<ec_key_st, node::FunctionDeleter<ec_key_st, &EC_KEY_free> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::IsKeyValidForCurve(std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::IsKeyPairValid()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifySpkac(char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportPublicKey(node::Environment*, char const*, int, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportChallenge(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::StatelessDiffieHellman(node::Environment*, node::crypto::ManagedEVPPKey, node::crypto::ManagedEVPPKey)",
    "type": "CPP"
  },
  {
    "name": "_register_crypto()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Create(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::BufferToPoint(node::Environment*, ec_group_st const*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ConvertKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::TicketKeyCallback(ssl_st*, unsigned char*, unsigned char*, evp_cipher_ctx_st*, hmac_ctx_st*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LoadBIO(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifySpkac(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportChallenge(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetPrivateKeyEncodingFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyEncodingContext)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NewRootCertStore()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::UseExtraCaCerts(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddRootCerts(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::SecureBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetField(v8::FunctionCallbackInfo<v8::Value> const&, bignum_st const* (*)(dh_st const*), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetGenerator(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ThrowCryptoError(node::Environment*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSigalgs(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetEngineKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCipherSuites(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetClientCertEngine(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::WritePublicKey(node::Environment*, evp_pkey_st*, node::crypto::AsymmetricKeyEncodingConfig const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportPublicKey(node::crypto::AsymmetricKeyEncodingConfig const&) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::WritePrivateKey(node::Environment*, evp_pkey_st*, node::crypto::PrivateKeyEncodingConfig const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportPrivateKey(node::crypto::PrivateKeyEncodingConfig const&) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Export(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CommonInit(char const*, evp_cipher_st const*, unsigned char const*, int, unsigned char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(char const*, char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(char const*, unsigned char const*, int, unsigned char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::CipherBase*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::CipherBase*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Final(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacInit(char const*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashDigest(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckThrow(node::Environment*, node::crypto::SignBase::Error)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::CheckThrow(node::crypto::SignBase::Error)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Sign*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Sign*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Verify*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Verify*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Verify>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Verify*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)) [clone .constprop.448]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Sign>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Sign*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)) [clone .constprop.449]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GenerateKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::StatelessDiffieHellman(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetEngine(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPair(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, std::unique_ptr<node::crypto::KeyPairGenerationConfig, std::default_delete<node::crypto::KeyPairGenerationConfig> >)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairRSA(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairRSAPSS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairDSA(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairEC(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairNid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairDH(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Scrypt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCert(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddCACert(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddCRL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetECDHCurve(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSessionIdContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSessionTimeout(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetKey(v8::FunctionCallbackInfo<v8::Value> const&, int (*)(dh_st*, bignum_st*), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TimingSafeEqual(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::DiffieHellmanGroup(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::LoadPKCS12(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetDHParam(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetTicketKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetPrivateKeyFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignFinal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignOneShot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetPublicOrPrivateKeyFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyFinal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyOneShot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenerationConfig::Configure(std::unique_ptr<evp_pkey_ctx_st, node::FunctionDeleter<evp_pkey_ctx_st, &EVP_PKEY_CTX_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::~RSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (engine_st*), void (*)(engine_st*)>::_M_invoke(std::_Any_data const&, engine_st*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<void (*)(engine_st*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenerationConfig::~NidKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyPairGenerationConfig::~ECKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyPairGenerationConfig::~DSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::~RSAPSSKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenerationConfig::~NidKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyPairGenerationConfig::~ECKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyPairGenerationConfig::~DSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::~RSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::~RSAPSSKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::vector<x509_st*, std::allocator<x509_st*> >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyPairGenerationConfig::~DHKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyPairGenerationConfig::~DHKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::Configure(std::unique_ptr<evp_pkey_ctx_st, node::FunctionDeleter<evp_pkey_ctx_st, &EVP_PKEY_CTX_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::~PBKDF2Job()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::Configure(std::unique_ptr<evp_pkey_ctx_st, node::FunctionDeleter<evp_pkey_ctx_st, &EVP_PKEY_CTX_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::~PBKDF2Job()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::~KeyObjectTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::~RandomBytesJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::~GenerateKeyPairJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::~ScryptJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::~KeyObjectTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::~RandomBytesJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::NewSessionDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::RequestOCSP(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::~ScryptJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::EndParser(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::IsSessionReused(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::~GenerateKeyPairJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetCertificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetProtocol(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetCipher(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetPeerCertificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetTLSTicket(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::SecureContext::GetCertificate<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::SecureContext::GetCertificate<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetALPNNegotiatedProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetMaxSendFragment(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::VerifyError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetALPNProtocols(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetEphemeralKeyInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ThrowError(v8::Local<v8::Value> (*)(v8::Local<v8::String>), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetProtoMethodNoSideEffect(v8::Local<v8::FunctionTemplate>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::BaseObject(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetSharedSigalgs(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::~NativeKeyObject()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::~DiffieHellman()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::~SignBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::~Hmac()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::~CipherBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::~KeyObjectHandle()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::~Hmac()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::~CipherBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::~KeyObjectHandle()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::~NativeKeyObject()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::~DiffieHellman()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::~Verify()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::~Sign()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::~SignBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::~Verify()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::~Sign()",
    "type": "CPP"
  },
  {
    "name": "node::AllocatedBuffer::AllocateManaged(node::Environment*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::AllocatedBuffer::Resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::TLSExtStatusCallback(ssl_st*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::InlineDecoder::Decode(node::Environment*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::ConfigureSecureContext(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetCACerts(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetSessionCallback(ssl_st*, unsigned char const*, int, int*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::NewSessionCallback(ssl_st*, ssl_session_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::KeylogCallback(ssl_st const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::OnClientHello(void*, node::crypto::ClientHelloParser::ClientHello const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::DestroySSL()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SSLCertCallback(ssl_st*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::WaitForCertCb(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob::Run(std::unique_ptr<node::crypto::CryptoJob, std::default_delete<node::crypto::CryptoJob> >, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferViewContents<char, 64ul>::ArrayBufferViewContents(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::CipherBase>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::CipherBase*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Hmac>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Hmac*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Hash>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Hash*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferViewContents<unsigned char, 64ul>::Read(v8::Local<v8::ArrayBufferView>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SelectALPNCallback(ssl_st*, unsigned char const**, unsigned char*, unsigned char const*, unsigned int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::LoadSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<x509_st*, std::allocator<x509_st*> >::_M_realloc_insert<x509_st* const&>(__gnu_cxx::__normal_iterator<x509_st**, std::vector<x509_st*, std::allocator<x509_st*> > >, x509_st* const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_encrypt_init, &EVP_PKEY_encrypt>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_decrypt_init, &EVP_PKEY_decrypt>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_sign_init, &EVP_PKEY_sign>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_verify_recover_init, &EVP_PKEY_verify_recover>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "node::AllocatedBuffer::ToBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetPeerFinished(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetFinished(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::crypto::SecureContext, false>::BaseObjectPtrImpl(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorVector::ToException(node::Environment*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorVector::Capture()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::Renegotiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::CertCbDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::ExportKeyingMaterial(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetOCSPResponse(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_verify_recover_init, &EVP_PKEY_verify_recover>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_sign_init, &EVP_PKEY_sign>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_decrypt_init, &EVP_PKEY_decrypt>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_encrypt_init, &EVP_PKEY_encrypt>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::(anonymous namespace)::Set<v8::Object>(v8::Local<v8::Context>, v8::Local<v8::Object>, v8::Local<v8::Value>, v8::MaybeLocal<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::(anonymous namespace)::Set<v8::Value>(v8::Local<v8::Context>, v8::Local<v8::Object>, v8::Local<v8::Value>, v8::MaybeLocal<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::GetFingerprintDigest(node::Environment*, evp_md_st const*, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::PrintGeneralName(std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, GENERAL_NAME_st const*) [clone .isra.44]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSL_CTX_get_issuer(ssl_ctx_st*, x509_st*, x509_st**)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LogSecret(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, char const*, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSSLOCSPResponse(node::Environment*, ssl_st*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetTLSSession(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetTLSSession(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, std::unique_ptr<ssl_session_st, node::FunctionDeleter<ssl_session_st, &SSL_SESSION_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetTLSSession(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetTLSSession(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyPeerCertificate(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::UseSNIContext(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, node::BaseObjectPtrImpl<node::crypto::SecureContext, false>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloServerName(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetServerName(ssl_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetGroups(node::crypto::SecureContext*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509ErrorCode(long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidationErrorReason(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidationErrorCode(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherName(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherStandardName(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherVersion(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloCiphers(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherInfo(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetEphemeralKey(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECPointToBuffer(node::Environment*, ec_group_st const*, ec_point_st const*, point_conversion_form_t, char const**)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509ToObject(node::Environment*, x509_st*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetPeerCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::New(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::~NodeBIO()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::~NodeBIO()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Ctrl(bio_st*, int, long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Free(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::New(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Peek(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::PeekMultiple(char**, unsigned long*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::GetMethod()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::NewFixed(char const*, unsigned long, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::TryMoveReadHead()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::FreeEmpty()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Read(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Read(bio_st*, char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::IndexOf(char, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Gets(bio_st*, char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::PeekWritable(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Commit(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::TryAllocateForWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Write(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Write(bio_st*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Puts(bio_st*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Reset()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::FromBIO(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseRecordHeader(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseExtension(unsigned short, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseTLSClientHello(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseHeader(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::Parse(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Error() const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableTrace(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(int, int, int, void const*, unsigned long, ssl_st*, void*)#1}::_FUN(int, int, int, void const*, unsigned long, ssl_st*, void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.21]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::Error() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableCertCb(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableKeylogCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnablePskCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableSessionCallbacks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableTrace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetWriteQueueSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetServername(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SetServername(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SetVerifyMode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::PskClientCallback(ssl_st*, char const*, char*, unsigned int, unsigned char*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::PskServerCallback(ssl_st*, char const*, unsigned char*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::EncOut()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::EncOut()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::EncOut()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::EncOut()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::InitSSL()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetSSLError(int, int*, std::string*)",
    "type": "CPP"
  },
  {
    "name": "_register_tls_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SelectSNIContextCallback(ssl_st*, int*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SetPskIdentityHint(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SSLInfoCallback(ssl_st const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::TLSWrap(node::Environment*, v8::Local<v8::Object>, node::crypto::SSLWrap<node::TLSWrap>::Kind, node::StreamBase*, node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Wrap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::InvokeQueued(int, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::DestroySSL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::EncOut()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ClearIn()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EncOut()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ClearOut()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::NewSessionDoneCb()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnClientHelloParseEnd(void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::TLSWrap::EncOut()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::~SSLWrap()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::~SSLWrap()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::TLSWrap, false>::BaseObjectPtrImpl(node::TLSWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Write(uv_buf_t*, unsigned long, uv_stream_s*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetConfig()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LoadJavaScriptSource()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_get_insert_unique_pos(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<std::string const, node::UnionBytes> >*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [13], node::UnionBytes>(char const (&) [13], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [20], node::UnionBytes>(char const (&) [20], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [5], node::UnionBytes>(char const (&) [5], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [15], node::UnionBytes>(char const (&) [15], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [12], node::UnionBytes>(char const (&) [12], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [18], node::UnionBytes>(char const (&) [18], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [3], node::UnionBytes>(char const (&) [3], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [17], node::UnionBytes>(char const (&) [17], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [4], node::UnionBytes>(char const (&) [4], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [6], node::UnionBytes>(char const (&) [6], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [7], node::UnionBytes>(char const (&) [7], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [14], node::UnionBytes>(char const (&) [14], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [8], node::UnionBytes>(char const (&) [8], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [10], node::UnionBytes>(char const (&) [10], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [19], node::UnionBytes>(char const (&) [19], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [21], node::UnionBytes>(char const (&) [21], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [26], node::UnionBytes>(char const (&) [26], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [22], node::UnionBytes>(char const (&) [22], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [16], node::UnionBytes>(char const (&) [16], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [23], node::UnionBytes>(char const (&) [23], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [27], node::UnionBytes>(char const (&) [27], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [29], node::UnionBytes>(char const (&) [29], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [24], node::UnionBytes>(char const (&) [24], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [30], node::UnionBytes>(char const (&) [30], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [37], node::UnionBytes>(char const (&) [37], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [28], node::UnionBytes>(char const (&) [28], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [25], node::UnionBytes>(char const (&) [25], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [36], node::UnionBytes>(char const (&) [36], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [32], node::UnionBytes>(char const (&) [32], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [31], node::UnionBytes>(char const (&) [31], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [33], node::UnionBytes>(char const (&) [33], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::asBinary(node::inspector::protocol::Binary*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asBoolean(bool*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asDouble(double*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asInteger(int*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::asBinary(node::inspector::protocol::Binary*) const",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::(anonymous namespace)::skipWhitespaceAndComments<unsigned short>(unsigned short const*, unsigned short const*, unsigned short const**)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::(anonymous namespace)::skipWhitespaceAndComments<unsigned char>(unsigned char const*, unsigned char const*, unsigned char const**)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleError(node::inspector::protocol::Status)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::~CBOREncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::~CBOREncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::asString(std::string*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::~JSONEncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::~ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::~CBOREncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::~CBOREncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.35]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ProtocolError::~ProtocolError()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned char>::HexToInt(unsigned char) [clone .part.50]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned short>::HexToInt(unsigned short) [clone .part.51]",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::json::(anonymous namespace)::State::StartElementTmpl<std::string>(std::string*) [clone .isra.57]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleNull()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleBool(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned char>::HandleError(node::inspector::protocol::Error, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned short>::HandleError(node::inspector::protocol::Error, unsigned short const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetInt32() const [clone .part.86]",
    "type": "CPP"
  },
  {
    "name": "unsigned int node::inspector::protocol::cbor::(anonymous namespace)::ReadBytesMostSignificantByteFirst<unsigned int>(node::inspector::protocol::span<unsigned char>) [clone .part.94]",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::inspector::protocol::cbor::(anonymous namespace)::ReadBytesMostSignificantByteFirst<unsigned long>(node::inspector::protocol::span<unsigned char>) [clone .part.95]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetDouble() const [clone .part.106]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::EnterEnvelope() [clone .part.107]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString8() const [clone .part.109]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::ParseUTF8String(node::inspector::protocol::cbor::CBORTokenizer*, node::inspector::protocol::StreamingParserHandler*) [clone .part.110]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString16WireRep() const [clone .part.111]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetBinary() const [clone .part.112]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleError(node::inspector::protocol::Status) [clone .part.155]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleError(node::inspector::protocol::Status) [clone .part.469]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleError(node::inspector::protocol::Status)",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<node::inspector::protocol::json::(anonymous namespace)::State, std::allocator<node::inspector::protocol::json::(anonymous namespace)::State> >::_M_initialize_map(unsigned long) [clone .constprop.530]",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::inspector::protocol::json::(anonymous namespace)::State, std::allocator<node::inspector::protocol::json::(anonymous namespace)::State> >::emplace_back<node::inspector::protocol::json::(anonymous namespace)::Container>(node::inspector::protocol::json::(anonymous namespace)::Container&&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::internals::WriteTokenStartTmpl<std::string>(node::inspector::protocol::cbor::MajorType, unsigned long, std::string*) [clone .constprop.541]",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::inspector::protocol::DispatcherBase::WeakPtr*, node::inspector::protocol::DispatcherBase::WeakPtr*, std::allocator<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Identity, std::equal_to<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::hash<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, node::inspector::protocol::DispatcherBase::WeakPtr* const&) [clone .constprop.554]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::~ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ProtocolError::~ProtocolError()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::Token node::inspector::protocol::(anonymous namespace)::parseToken<unsigned short>(unsigned short const*, unsigned short const*, unsigned short const**, unsigned short const**)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::Token node::inspector::protocol::(anonymous namespace)::parseToken<unsigned char>(unsigned char const*, unsigned char const*, unsigned char const**, unsigned char const**)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleMapEnd()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleArrayEnd()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::Emit(char const*) [clone .isra.470]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::~Callback()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::~JSONEncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::~JSONEncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::reportProtocolErrorTo(node::inspector::protocol::FrontendChannel*, node::inspector::protocol::DispatchResponse::ErrorCode, std::string const&) [clone .part.188]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleError(node::inspector::protocol::Status)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::~JSONEncoder()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::~Callback()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleError(node::inspector::protocol::Status)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned short>::ParseToken(unsigned short const*, unsigned short const*, unsigned short const**, unsigned short const**)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned char>::ParseToken(unsigned char const*, unsigned char const*, unsigned char const**, unsigned char const**)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleString16(node::inspector::protocol::span<unsigned short>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleArrayBegin()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned char, std::allocator<unsigned char> >::_M_range_insert<unsigned char const*>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const*, unsigned char const*, std::forward_iterator_tag) [clone .constprop.557]",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::json::(anonymous namespace)::PrintHex<std::string>(unsigned short, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleString8(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "bool node::inspector::protocol::(anonymous namespace)::decodeString<unsigned short>(unsigned short const*, unsigned short const*, std::string*) [clone .part.286] [clone .constprop.547]",
    "type": "CPP"
  },
  {
    "name": "bool node::inspector::protocol::(anonymous namespace)::decodeString<unsigned char>(unsigned char const*, unsigned char const*, std::string*) [clone .part.287] [clone .constprop.543]",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned char, std::allocator<unsigned char> >::_M_range_insert<char const*>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, char const*, char const*, std::forward_iterator_tag) [clone .constprop.524]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::Emit(char const*) [clone .isra.507]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleBinary(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleMapBegin()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleNull()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleBool(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::ErrorSupport()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::~ErrorSupport()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::setName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::setName(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::pop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::hasErrors()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::errors()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::reportProtocolErrorTo(node::inspector::protocol::FrontendChannel*, int, node::inspector::protocol::DispatchResponse::ErrorCode, std::string const&, node::inspector::protocol::ErrorSupport*) [clone .part.285]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::toJSONString() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::escapeLatinStringForJSON(unsigned char const*, unsigned int, std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::escapeWideStringForJSON(unsigned short const*, unsigned int, std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::Object(std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::~Object()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::OK()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::Error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::InternalError()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::InvalidParams(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::FallThrough()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::WeakPtr::WeakPtr(node::inspector::protocol::DispatcherBase*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::WeakPtr::~WeakPtr()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::Callback(std::unique_ptr<node::inspector::protocol::DispatcherBase::WeakPtr, std::default_delete<node::inspector::protocol::DispatcherBase::WeakPtr> >, int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::fallThroughIfActive()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::DispatcherBase(node::inspector::protocol::FrontendChannel*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::~DispatcherBase()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::~DispatcherBase()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::sendResponse(int, node::inspector::protocol::DispatchResponse const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::sendIfActive(std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::DispatchResponse const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::sendResponse(int, node::inspector::protocol::DispatchResponse const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::reportProtocolError(int, node::inspector::protocol::DispatchResponse::ErrorCode, std::string const&, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::clearFrontend()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::UberDispatcher(node::inspector::protocol::FrontendChannel*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::registerBackend(std::string const&, std::unique_ptr<node::inspector::protocol::DispatcherBase, std::default_delete<node::inspector::protocol::DispatcherBase> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::setupRedirects(std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::findDispatcher(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::createResponse(int, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::createNotification(std::string const&, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::InternalResponse(int, std::string const&, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::ReadTokenStart(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::cbor::MajorType*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::InitialByteForEnvelope()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::InitialByteFor32BitLengthByteString()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::IsCBORMessage(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeTrue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFalse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeNull()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeIndefiniteLengthArrayStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeIndefiniteLengthMapStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeStop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString16(node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeBinary(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeDouble(double, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStart(std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStop(std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStop(std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::NewCBOREncoder(std::vector<unsigned char, std::allocator<unsigned char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::NewCBOREncoder(std::string*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::~CBORTokenizer()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::TokenTag() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::Status() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetInt32() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetDouble() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString8() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString16WireRep() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetBinary() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetEnvelopeContents() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::ReadNextToken(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::CBORTokenizer(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::Next()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::EnterEnvelope()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::SetToken(node::inspector::protocol::cbor::CBORTokenTag, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::SetError(node::inspector::protocol::Error)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::NewJSONEncoder(node::inspector::protocol::json::Platform const*, std::vector<unsigned char, std::allocator<unsigned char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::NewJSONEncoder(node::inspector::protocol::json::Platform const*, std::string*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Status::ToASCIIString(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Status::ToASCIIString() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::string>::HandleInt32(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::~DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::~DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::~UberDispatcher()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::~UberDispatcher()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::WriteTokenStart(node::inspector::protocol::cbor::MajorType, unsigned long, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleInt32(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeInt32(int, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString8(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleString8(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::AppendString8EntryToCBORMap(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromUTF16(node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleString16(node::inspector::protocol::span<unsigned short>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleBinary(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleArrayEnd()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleMapEnd()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::WriteTokenStart(node::inspector::protocol::cbor::MajorType, unsigned long, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeInt32(int, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleInt32(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString8(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleString8(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromUTF16(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleString16(node::inspector::protocol::span<unsigned short>)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::json::(anonymous namespace)::State::StartElementTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >*) [clone .isra.448]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleArrayEnd()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleMapEnd()",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::json::(anonymous namespace)::PrintHex<std::vector<unsigned char, std::allocator<unsigned char> > >(unsigned short, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::AppendString8EntryToCBORMap(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleString8(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString16(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleNull()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleArrayBegin()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleBool(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleInt32(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleString16(node::inspector::protocol::span<unsigned short>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleMapBegin()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JSONEncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleBinary(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::get(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getBoolean(std::string const&, bool*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getInteger(std::string const&, int*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getDouble(std::string const&, double*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getString(std::string const&, std::string*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getObject(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getArray(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::parseCommand(node::inspector::protocol::Value*, int*, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::booleanProperty(std::string const&, bool) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::integerProperty(std::string const&, int) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::doubleProperty(std::string const&, double) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::dispatch(int, std::string const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::addError(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::addError(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::push()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setArray(std::string const&, std::unique_ptr<node::inspector::protocol::ListValue, std::default_delete<node::inspector::protocol::ListValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setObject(std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setValue(std::string const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setBoolean(std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setInteger(std::string const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setDouble(std::string const&, double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setString(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ProtocolError::serialize()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ProtocolError::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::ProtocolError::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > node::inspector::protocol::(anonymous namespace)::buildValue<unsigned short>(unsigned short const*, unsigned short const*, unsigned short const**, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::parseJSONCharacters(unsigned short const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > node::inspector::protocol::(anonymous namespace)::buildValue<unsigned char>(unsigned char const*, unsigned char const*, unsigned char const**, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::parseJSONCharacters(unsigned char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::parseValue(int, node::inspector::protocol::cbor::CBORTokenizer*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::(anonymous namespace)::parseMap(int, node::inspector::protocol::cbor::CBORTokenizer*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::parseBinary(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::pushValue(std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleArrayEnd()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromLatin1(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromLatin1(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeDouble(double, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeBinary(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleBool(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleNull()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleBinary(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleMapEnd()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStart(std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::ParseUTF16String(node::inspector::protocol::cbor::CBORTokenizer*, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::ParseArray(int, node::inspector::protocol::cbor::CBORTokenizer*, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::ParseMap(int, node::inspector::protocol::cbor::CBORTokenizer*, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::ParseCBOR(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertCBORToJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertCBORToJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::remove(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::weakPtr()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned short>::DecodeString(unsigned short const*, unsigned short const*, std::vector<unsigned short, std::allocator<unsigned short> >*) [clone .part.468]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned short>::ParseValue(unsigned short const*, unsigned short const*, unsigned short const**, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ParseJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned char>::DecodeString(unsigned char const*, unsigned char const*, std::vector<unsigned short, std::allocator<unsigned short> >*) [clone .part.467]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::(anonymous namespace)::JsonParser<unsigned char>::ParseValue(unsigned char const*, unsigned char const*, unsigned char const**, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ParseJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleMapBegin()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::vector<unsigned char, std::allocator<unsigned char> > >::HandleArrayBegin()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleMapBegin()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::(anonymous namespace)::CBOREncoder<std::string>::HandleArrayBegin()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::~Value()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::~FundamentalValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::~BinaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::~Value()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::~FundamentalValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::~BinaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::~StringValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::~StringValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::~InternalResponse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::~SerializedValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::~SerializedValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::~InternalResponse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::create(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::create()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::DispatcherBase, std::default_delete<node::inspector::protocol::DispatcherBase> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::DispatcherBase, std::default_delete<node::inspector::protocol::DispatcherBase> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::internals::WriteTokenStartTmpl<std::string>(node::inspector::protocol::cbor::MajorType, unsigned long, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeString8Tmpl<std::string>(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromUTF16Tmpl<std::string>(node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeBinaryTmpl<std::string>(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "bool node::inspector::protocol::cbor::EncodeStopTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "bool node::inspector::protocol::cbor::EncodeStopTmpl<std::string>(std::string*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned char, std::allocator<unsigned char> >::emplace_back<unsigned char>(unsigned char&&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::internals::WriteTokenStartTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::cbor::MajorType, unsigned long, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeString8Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromUTF16Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<char, std::allocator<char> >::emplace_back<char>(char&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::DictionaryValue::set<node::inspector::protocol::Value>(std::string const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >*, std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > > >, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >::emplace_back<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >(std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromLatin1Tmpl<std::string>(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromLatin1Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeStartTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned short, std::allocator<unsigned short> >::_M_realloc_insert<unsigned short>(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::inspector::protocol::DispatcherBase::WeakPtr*, node::inspector::protocol::DispatcherBase::WeakPtr*, std::allocator<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Identity, std::equal_to<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::hash<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::inspector::protocol::DispatcherBase::WeakPtr*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned short, std::allocator<unsigned short> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned short, std::allocator<unsigned short> >::_M_realloc_insert<unsigned short const&>(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::inspector::protocol::cbor::EnvelopeEncoder, std::allocator<node::inspector::protocol::cbor::EnvelopeEncoder> >::_M_realloc_insert<>(__gnu_cxx::__normal_iterator<node::inspector::protocol::cbor::EnvelopeEncoder*, std::vector<node::inspector::protocol::cbor::EnvelopeEncoder, std::allocator<node::inspector::protocol::cbor::EnvelopeEncoder> > >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::disable(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::enable(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::detach(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::sendMessageToWorker(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::attachedToWorker(std::string const&, std::unique_ptr<node::inspector::protocol::NodeWorker::WorkerInfo, std::default_delete<node::inspector::protocol::NodeWorker::WorkerInfo> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::detachedFromWorker(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::receivedMessageFromWorker(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::sendRawJSONNotification(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeWorker::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::dispatch(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::~InternalRawNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::~ReceivedMessageFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::~DetachedFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::~DetachedFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::~InternalRawNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::~ReceivedMessageFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::~AttachedToWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::~AttachedToWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, std::__va_list), unsigned long, char const*, ...) [clone .constprop.136]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::stop(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::getCategories(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::dataCollected(std::unique_ptr<node::inspector::protocol::Array<node::inspector::protocol::DictionaryValue>, std::default_delete<node::inspector::protocol::Array<node::inspector::protocol::DictionaryValue> > >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::tracingComplete()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::sendRawJSONNotification(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeTracing::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::dispatch(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::start(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::~DataCollectedNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::~DataCollectedNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::~TraceConfig()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::~TraceConfig()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, std::allocator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >*, std::vector<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, std::allocator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > > > >, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::notifyWhenWaitingForDisconnect(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::waitingForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::sendRawJSONNotification(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeRuntime::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::dispatch(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeRuntime::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeRuntime::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::PostGarbageCollection()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::~Relocatable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::~FunctionCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::~PropertyCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CustomArguments<v8::FunctionCallbackInfo<v8::Value> >::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CustomArguments<v8::PropertyCallbackInfo<v8::Value> >::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::~Relocatable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::~PropertyCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::~FunctionCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::PropertyCallbackArguments(v8::internal::Isolate*, v8::internal::Object, v8::internal::Object, v8::internal::JSObject, v8::Maybe<v8::internal::ShouldThrow>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::FunctionCallbackArguments(v8::internal::Isolate*, v8::internal::Object, v8::internal::HeapObject, v8::internal::Object, v8::internal::HeapObject, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::EnableAccessChecks(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::AddPropertyToPropertyList(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, int, v8::internal::Handle<v8::internal::Object>*) [clone .constprop.95]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::ProbeInstantiationsCache(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, int, v8::internal::(anonymous namespace)::CachingMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::CacheTemplateInstantiation(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, int, v8::internal::(anonymous namespace)::CachingMode, v8::internal::Handle<v8::internal::JSObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::GetIntrinsic(v8::internal::Isolate*, v8::Intrinsic)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateRemoteObject(v8::internal::Handle<v8::internal::ObjectTemplateInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::Intrinsic, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddAccessorProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddNativeDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::AccessorInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::CreateApiFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::InstanceType, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::InstantiateFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::(anonymous namespace)::GetInstancePrototype(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateFunction(v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::DefineAccessorProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSObject>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes, bool) [clone .constprop.96]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::DefineDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSObject>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::InstantiateObject(v8::internal::Isolate*, v8::internal::Handle<v8::internal::ObjectTemplateInfo>, v8::internal::Handle<v8::internal::JSReceiver>, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateObject(v8::internal::Isolate*, v8::internal::Handle<v8::internal::ObjectTemplateInfo>, v8::internal::Handle<v8::internal::JSReceiver>)",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::~Extension()",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::GetNativeFunctionTemplate(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::TracePrologue(v8::EmbedderHeapTracer::TraceFlags)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::TraceEpilogue(v8::EmbedderHeapTracer::TraceSummary*)",
    "type": "CPP"
  },
  {
    "name": "v8::TaskRunner::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "v8::OutputStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ReadOnlySpace::Available()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HeapSnapshotJSONSerializer::StringsMatch(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ExtensionResource::data() const",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ExtensionResource::length() const",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ExtensionResource::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ExternalSourceStream::SetBookmark()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::GetWasmModuleTransferId(v8::Isolate*, v8::Local<v8::WasmModuleObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::CallGCCallbackWithoutData(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::MicrotasksCompletedCallbackAdapter(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::CompareBreakLocation(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::IsRootForNonTracingGC(v8::TracedGlobal<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (), v8::base::CallOnce<void>(std::atomic<unsigned char>*, v8::base::OneArgFunction<void*>::type, void*)::{lambda()#1}>::_M_invoke(std::_Any_data const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<v8::base::CallOnce<void>(std::atomic<unsigned char>*, v8::base::OneArgFunction<void*>::type, void*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<v8::base::CallOnce<void>(std::atomic<unsigned char>*, v8::base::OneArgFunction<void*>::type, void*)::{lambda()#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ExtensionResource::~ExtensionResource()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ArrayBufferAllocator::~ArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ExternalSourceStream::ResetToBookmark()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::ResetHandleInNonTracingGC(v8::TracedReference<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::ReallocateBufferMemory(void*, unsigned long, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::FreeBufferMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::~Extension()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ArrayBufferAllocator::~ArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::ExtensionResource::~ExtensionResource()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Space::CommittedMemory()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::CallDepthScope<true>::Escape()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::CallDepthScope<false>::Escape()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InterruptsScope::~InterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InterruptsScope::~InterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PostponeInterruptsScope::~PostponeInterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PostponeInterruptsScope::~PostponeInterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::CallDepthScope<true>::~CallDepthScope()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::CallDepthScope<false>::~CallDepthScope()",
    "type": "CPP"
  },
  {
    "name": "v8::(anonymous namespace)::GetSerializedDataFromFixedArray(v8::internal::Isolate*, v8::internal::FixedArray, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::ProgramEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::IdleEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::GCEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::RootEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::UnresolvedEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::Object> v8::FromCData<unsigned long>(v8::internal::Isolate*, unsigned long) [clone .part.284]",
    "type": "CPP"
  },
  {
    "name": "_init",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<>(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_PROTO_ACCESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProtoThrower(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&>(_IO_FILE*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Maybe<bool> node::ProcessEmitWarning<int&>(node::Environment*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*>(_IO_FILE*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long>(_IO_FILE*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&, unsigned long, unsigned long>(_IO_FILE*, char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OUT_OF_RANGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_INTERRUPTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_TIMEOUT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_CACHED_DATA_REJECTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<std::string&>(char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<std::string&>(char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_LINK_FAILURE<std::string&>(v8::Isolate*, char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_VM_MODULE_LINK_FAILURE<std::string&>(v8::Isolate*, char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_NON_CONTEXT_AWARE_DISABLED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_CONTEXT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_BUFFER_CONTEXT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MEMORY_ALLOCATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_TOO_LARGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_BUFFER_TOO_LARGE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_OUT_OF_RANGE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_OUT_OF_BOUNDS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_BUFFER_OUT_OF_BOUNDS<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_THIS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_STRING_TOO_LONG<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::OnFatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<>(_IO_FILE*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*&>(_IO_FILE*, char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, char const*>(char const*, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int const&, int const&>(_IO_FILE*, char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*, int const&, int const&>(_IO_FILE*, char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::string&>(_IO_FILE*, char const*, std::string&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<std::string>(char const*, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<std::string>(char const*, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::string>(_IO_FILE*, char const*, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<>(node::AsyncWrap*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*&>(node::AsyncWrap*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, int&, char const*>(_IO_FILE*, char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*>(node::AsyncWrap*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&>(_IO_FILE*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&>(node::AsyncWrap*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&>(_IO_FILE*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&>(node::AsyncWrap*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&>(_IO_FILE*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&>(node::AsyncWrap*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&>(_IO_FILE*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&>(node::AsyncWrap*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&, int&>(_IO_FILE*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&, int&>(node::AsyncWrap*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned int&>(_IO_FILE*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned int&>(node::AsyncWrap*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&>(_IO_FILE*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&>(node::AsyncWrap*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&, unsigned long&>(_IO_FILE*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&, unsigned long&>(node::AsyncWrap*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<nghttp2_headers_category&>(_IO_FILE*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<nghttp2_headers_category&>(node::AsyncWrap*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long>(node::AsyncWrap*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&>(_IO_FILE*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&>(node::AsyncWrap*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int>(_IO_FILE*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int>(node::AsyncWrap*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int>(_IO_FILE*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int>(node::AsyncWrap*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, int&>(char const*, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, int&>(char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, int&>(char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&, unsigned int&, int&>(node::AsyncWrap*, char const*, unsigned int&, unsigned int&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char&>(char const*, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned long&, unsigned char&>(node::AsyncWrap*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_TRANSFER_OBJECT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_INVALID<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CLOSED_MESSAGE_PORT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ADDRESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WASI_NOT_STARTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_WASI_NOT_STARTED(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned int&>(char const*, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned short&>(char const*, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&>(char const*, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned char&, unsigned int&>(char const*, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<long&, unsigned char&, unsigned int&>(char const*, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned short&, unsigned int&>(char const*, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PLATFORM_FOR_WORKER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WORKER_INIT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, char const*&, char const*&>(char const*, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&, char const*&, char const*&>(_IO_FILE*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&, char const*&, char const*&>(node::AsyncWrap*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_STRING_TOO_LONG(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_MEMORY_ALLOCATION_FAILED(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ThrowErrStringTooLong(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<std::string, int>(char const*, std::string&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<std::string, int>(char const*, std::string&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*>(_IO_FILE*, char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&>(_IO_FILE*, char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const (&) [3]>(_IO_FILE*, char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_CIPHER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_CIPHER(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_DH_GROUP<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_DH_GROUP(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OSSL_EVP_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_OSSL_EVP_INVALID_DIGEST(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_ARGS<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PASSPHRASE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_PASSPHRASE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, char const*&>(_IO_FILE*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, char const*&>(node::AsyncWrap*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintFImpl<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::SPrintF<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, int&>(_IO_FILE*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long, int&>(node::AsyncWrap*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::getParameters(icu_69::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_69::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_69::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MutablePatternModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MutablePatternModifier::getParameters(icu_69::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MutablePatternModifier::toUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::ScientificModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::SimpleModifier::containsField(icu_69::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::ConstantAffixModifier::getParameters(icu_69::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::number::impl::MixedUnitLongNameHandler::getModifier(icu_69::number::impl::Signum, icu_69::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_69::number::impl::MixedUnitLongNameHandler::getModifier(icu_69::number::impl::Signum, icu_69::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "icu_69::WholeStringBreakIterator::getText() const",
    "type": "CPP"
  },
  {
    "name": "icu_69::WholeStringBreakIterator::adoptText(icu_69::CharacterIterator*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::OS::Abort()",
    "type": "CPP"
  },
  {
    "name": "uv_library_shutdown",
    "type": "CPP"
  },
  {
    "name": "OPENSSL_cpuid_setup",
    "type": "CPP"
  },
  {
    "name": "main",
    "type": "CPP"
  },
  {
    "name": "_start",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::AsyncResource(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_resource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_trigger_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::CallbackScope::CallbackScope(node::AsyncResource*)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::AsyncWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(v8::Isolate*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::Close()",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::~InternalCallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::~CallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Object>, std::allocator<v8::Global<v8::Object> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(char const*, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeBytes(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeWrite(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "node::AllowWasmCodeGenerationCallback(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::PrepareStackTraceCallback(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::ShouldAbortOnUncaughtException(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferAllocator::Create(bool)",
    "type": "CPP"
  },
  {
    "name": "node::CreateArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::FreeArrayBufferAllocator(node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateCreateParamsForNode(v8::Isolate::CreateParams*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateErrorHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateMiscHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(node::ArrayBufferAllocator*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(node::ArrayBufferAllocator*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(std::shared_ptr<node::ArrayBufferAllocator>, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateIsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeIsolateData(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeEnvironment(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvironment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&, node::EnvironmentFlags::Flags, node::ThreadId, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvironment(node::IsolateData*, v8::Local<v8::Context>, int, char const* const*, int, char const* const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetInspectorParentHandle(node::Environment*, node::ThreadId, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, char const*, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEnvironment(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetMainThreadMultiIsolatePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::GetEnvironmentIsolateData(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetArrayBufferAllocator(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, node::tracing::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::FreePlatform(node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::MultiIsolatePlatform::Create(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextRuntime(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializePrimordials(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetPerContextExports(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextForSnapshot(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::NewContext(v8::Isolate*, v8::Local<v8::ObjectTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContext(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEventLoop(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, node::node_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, napi_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, char const*, void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AllocateEnvironmentThreadId()",
    "type": "CPP"
  },
  {
    "name": "node::DefaultProcessExitHandler(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SetProcessExitHandler(node::Environment*, std::function<void (node::Environment*, int)>&&)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::GetImpl()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SPrintFImpl(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, std::__va_list), unsigned long, char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<void* const, unsigned long>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, unsigned long>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ErrnoException(v8::Isolate*, int, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::UVException(v8::Isolate*, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::RunAtExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AtExit(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AtExit(node::Environment*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::DeleteACHHandle::operator()(node::ACHHandle*) const",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*, void (*)(void*), void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHook(std::unique_ptr<node::ACHHandle, node::DeleteACHHandle>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetExecutionAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetTriggerAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(v8::Isolate*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(node::Environment*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEvent(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::signo_string(int)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::DestroyAsyncIdsCallback(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetProviderType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ClearAsyncIdStack(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::SetCallbackTrampoline(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ExecutionAsyncResource(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PushAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Emit(node::Environment*, double, node::AsyncHooks::Fields, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitPromiseResolve(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventBefore()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitBefore(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventAfter(node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAfter(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAsyncInit(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::String>, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner()",
    "type": "CPP"
  },
  {
    "name": "_register_async_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PopAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::WeakCallback(v8::WeakCallbackInfo<node::DestroyParam> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::QueueDestroyAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::Local<v8::Object>, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<double, std::allocator<double> >::_M_realloc_insert<double const&>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::~AsyncWrapObject()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::~AsyncWrapObject()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrapObject::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::AresTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::GetAddrInfoReqWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::GetNameInfoReqWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::Create(node::cares_wrap::ChannelWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ChannelWrap(node::Environment*, v8::Local<v8::Object>, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::StartTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::CloseTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ModifyActivityQueryCount(int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::EnsureServers()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "_register_cares_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::WrapperNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::GetNativeObject()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getaddrinfo_s, void (*)(uv_getaddrinfo_s*, int, addrinfo*)>::Wrapper(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getnameinfo_s, void (*)(uv_getnameinfo_s*, int, char const*, char const*)>::Wrapper(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeLazilyInitializedJSTemplate(node::Environment*)::{lambda(v8::FunctionCallbackInfo<v8::Value> const&)#1}::_FUN(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MutexBase<node::LibuvMutexTraits>::~MutexBase()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethod(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetProtoMethod(v8::Local<v8::FunctionTemplate>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FromJSObject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeLazilyInitializedJSTemplate(node::Environment*)::{lambda(v8::FunctionCallbackInfo<v8::Value> const&)#1}::operator()(v8::FunctionCallbackInfo<v8::Value> const&) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::pointer_data()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::operator()(v8::WeakCallbackInfo<node::BaseObject> const&) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::_FUN(v8::WeakCallbackInfo<node::BaseObject> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Name>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(char const*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::MemoryRetainer const*, std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, std::allocator<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*> >, std::__detail::_Select1st, std::equal_to<node::MemoryRetainer const*>, std::hash<node::MemoryRetainer const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_push_back_aux<node::MemoryRetainerNode* const&>(node::MemoryRetainerNode* const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask*, std::allocator<node::cares_wrap::NodeAresTask*>, std::__detail::_Identity, node::cares_wrap::NodeAresTask::Equal, node::cares_wrap::NodeAresTask::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::erase(std::__detail::_Node_const_iterator<node::cares_wrap::NodeAresTask*, true, true>)",
    "type": "CPP"
  },
  {
    "name": "unsigned char* node::Malloc<unsigned char>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::Push(std::unique_ptr<node::CallbackQueue<void, node::Environment*>::Callback, std::default_delete<node::CallbackQueue<void, node::Environment*>::Callback> >)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::Callback(void*, int, int, hostent*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::ChannelWrap, false>::BaseObjectPtrImpl(node::cares_wrap::ChannelWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::ConnectWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::New()",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::SymbolInfo::Display() const",
    "type": "CPP"
  },
  {
    "name": "node::DumpBacktrace(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::PrintLibuvHandleInformation(uv_loop_s*, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::CheckedUvLoopClose(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetLoadedLibraries()",
    "type": "CPP"
  },
  {
    "name": "node::FWrite(_IO_FILE*, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "__DumpBacktrace",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::IsMapped(void*)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<char const*&>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, char const*&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::InitThreadLocalOnce()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::DeleteMe(void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunTimers(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::DeserializeProperties(std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::IsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*, std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::UpdateTraceCategoryState()",
    "type": "CPP"
  },
  {
    "name": "node::GetExecPath(std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ExitEnv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RegisterHandleCleanups()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeLibuv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintSyncTrace() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAtExitCallbacks()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AtExit(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearInterrupts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearNativeImmediates(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CheckImmediate(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CleanupHandles()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RequestInterruptFromV8()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ScheduleTimer(long)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleTimerRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleImmediateRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetNow()",
    "type": "CPP"
  },
  {
    "name": "node::CollectExceptionInfo(node::Environment*, v8::Local<v8::Object>, int, char const*, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CollectUVExceptionInfo(v8::Local<v8::Value>, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::grow_async_ids_stack()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Exit(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::stop_sub_worker_contexts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::worker_parent_env() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::VerifyNoStrongBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "node::GuessMemoryAvailableToTheProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunWeakRefCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Environment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BuildEmbedderGraph(v8::Isolate*, v8::EmbedderGraph*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RemoveUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AddUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::NearHeapLimitCallback(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Environment*, int), void (*)(node::Environment*, int)>::_M_invoke(std::_Any_data const&, node::Environment*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<void (*)(node::Environment*, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "node::ToUpper(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCwd()",
    "type": "CPP"
  },
  {
    "name": "node::TraceEventScope::~TraceEventScope()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::Track(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, int, std::allocator<int>, std::__detail::_Identity, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<int, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_fs_event_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HasRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsInitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsUninitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HandleWrap(node::Environment*, v8::Local<v8::Object>, uv_handle_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HandleWrap, false>::BaseObjectPtrImpl(node::HandleWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::TriggerHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::WriteSnapshot(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::DeleteHeapSnapshot(v8::HeapSnapshot const*)",
    "type": "CPP"
  },
  {
    "name": "_register_heap_utils()",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(node::Environment*, std::unique_ptr<v8::HeapSnapshot const, node::FunctionDeleter<v8::HeapSnapshot const, &node::heap::DeleteHeapSnapshot> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::BuildEmbedderGraph(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::OutputStream::WriteHeapStatsChunk(v8::HeapStatsUpdate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::AsyncWrap, false>::BaseObjectPtrImpl(node::AsyncWrap*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddEdge(v8::EmbedderGraph::Node*, v8::EmbedderGraph::Node*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::CreateObject() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::allocator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Identity, std::equal_to<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::hash<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::V8Node(v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddNode(std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::pair<char const*, v8::EmbedderGraph::Node*>, std::pair<char const*, v8::EmbedderGraph::Node*>, std::_Identity<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > >::_M_erase(std::_Rb_tree_node<std::pair<char const*, v8::EmbedderGraph::Node*> >*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::TimerCB(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::RecordDelta(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::Histogram(long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::IntervalHistogram(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, int, long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStart(node::IntervalHistogram::StartFlags)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStop()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, long, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Record(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HistogramBase, false>::BaseObjectPtrImpl(node::HistogramBase*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::BaseObject, false>::BaseObjectPtrImpl(node::BaseObject*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::FinalizeCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SecondPassCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefBase(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::New(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Data()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefCount()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::New(napi_env__*, v8::Local<v8::Value>, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Get()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SetWeak()",
    "type": "CPP"
  },
  {
    "name": "napi_get_last_error_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_get_all_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_set_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_property",
    "type": "CPP"
  },
  {
    "name": "napi_delete_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_own_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_element",
    "type": "CPP"
  },
  {
    "name": "napi_has_element",
    "type": "CPP"
  },
  {
    "name": "napi_get_element",
    "type": "CPP"
  },
  {
    "name": "napi_delete_element",
    "type": "CPP"
  },
  {
    "name": "napi_define_properties",
    "type": "CPP"
  },
  {
    "name": "napi_object_freeze",
    "type": "CPP"
  },
  {
    "name": "napi_object_seal",
    "type": "CPP"
  },
  {
    "name": "napi_is_array",
    "type": "CPP"
  },
  {
    "name": "napi_get_array_length",
    "type": "CPP"
  },
  {
    "name": "napi_strict_equals",
    "type": "CPP"
  },
  {
    "name": "napi_get_prototype",
    "type": "CPP"
  },
  {
    "name": "napi_create_object",
    "type": "CPP"
  },
  {
    "name": "napi_create_array",
    "type": "CPP"
  },
  {
    "name": "napi_create_array_with_length",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_create_double",
    "type": "CPP"
  },
  {
    "name": "napi_create_int32",
    "type": "CPP"
  },
  {
    "name": "napi_create_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_create_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_boolean",
    "type": "CPP"
  },
  {
    "name": "napi_create_symbol",
    "type": "CPP"
  },
  {
    "name": "napi_create_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_range_error",
    "type": "CPP"
  },
  {
    "name": "napi_typeof",
    "type": "CPP"
  },
  {
    "name": "napi_get_undefined",
    "type": "CPP"
  },
  {
    "name": "napi_get_null",
    "type": "CPP"
  },
  {
    "name": "napi_get_cb_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_new_target",
    "type": "CPP"
  },
  {
    "name": "napi_call_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_global",
    "type": "CPP"
  },
  {
    "name": "napi_throw",
    "type": "CPP"
  },
  {
    "name": "napi_throw_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_range_error",
    "type": "CPP"
  },
  {
    "name": "napi_is_error",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_double",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bool",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_bool",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_number",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_object",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_string",
    "type": "CPP"
  },
  {
    "name": "napi_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_unwrap",
    "type": "CPP"
  },
  {
    "name": "napi_remove_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_create_external",
    "type": "CPP"
  },
  {
    "name": "napi_type_tag_object",
    "type": "CPP"
  },
  {
    "name": "napi_check_object_type_tag",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_external",
    "type": "CPP"
  },
  {
    "name": "napi_create_reference",
    "type": "CPP"
  },
  {
    "name": "napi_delete_reference",
    "type": "CPP"
  },
  {
    "name": "napi_reference_ref",
    "type": "CPP"
  },
  {
    "name": "napi_reference_unref",
    "type": "CPP"
  },
  {
    "name": "napi_get_reference_value",
    "type": "CPP"
  },
  {
    "name": "napi_open_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_open_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_escape_handle",
    "type": "CPP"
  },
  {
    "name": "napi_new_instance",
    "type": "CPP"
  },
  {
    "name": "napi_instanceof",
    "type": "CPP"
  },
  {
    "name": "napi_is_exception_pending",
    "type": "CPP"
  },
  {
    "name": "napi_get_and_clear_last_exception",
    "type": "CPP"
  },
  {
    "name": "napi_is_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_arraybuffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_is_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_create_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_get_typedarray_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_is_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_get_dataview_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_promise",
    "type": "CPP"
  },
  {
    "name": "napi_resolve_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_reject_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_is_promise",
    "type": "CPP"
  },
  {
    "name": "napi_create_date",
    "type": "CPP"
  },
  {
    "name": "napi_is_date",
    "type": "CPP"
  },
  {
    "name": "napi_get_date_value",
    "type": "CPP"
  },
  {
    "name": "napi_run_script",
    "type": "CPP"
  },
  {
    "name": "napi_add_finalizer",
    "type": "CPP"
  },
  {
    "name": "napi_adjust_external_memory",
    "type": "CPP"
  },
  {
    "name": "napi_set_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_get_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_detach_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_is_detached_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_define_class",
    "type": "CPP"
  },
  {
    "name": "napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Finalizer::~Finalizer()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> >::_M_realloc_insert<napi_property_descriptor const&>(__gnu_cxx::__normal_iterator<napi_property_descriptor*, std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> > >, napi_property_descriptor const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::EmitEOF(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::JSStream(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_js_stream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::WriteWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::ShutdownWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EscapeJsonChars(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::Reindent(std::string const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::EmitReceived(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnAfterBind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnSendDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::JSUDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_js_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::OnAfterBind()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStatus(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetSyntheticExport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetInitializeImportMetaObjectCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetImportModuleDynamicallyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetNamespace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStaticDependencySpecifiers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::context() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Instantiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromID(node::Environment*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "_register_module_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromModule(node::Environment*, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::HostInitializeImportMetaObjectCallback(v8::Local<v8::Context>, v8::Local<v8::Module>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SyntheticModuleEvaluationStepsCallback(v8::Local<v8::Context>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ModuleWrap(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Module>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ResolveCallback(v8::Local<v8::Context>, v8::Local<v8::String>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Evaluate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::equal_range(int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::string const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::string const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::erase(std::__detail::_Node_const_iterator<std::pair<int const, node::loader::ModuleWrap*>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::loader::ModuleWrap*>, std::allocator<std::pair<unsigned int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::loader::ModuleWrap*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_reallocate_map(unsigned long, bool)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<4u, std::string>(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::MarkBootstrapComplete(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ResetStdio()",
    "type": "CPP"
  },
  {
    "name": "node::SignalExit(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TrapWebAssemblyOrContinue(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::ExecuteBootstrapper(node::Environment*, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeInspector(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeDiagnostics()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapInternalLoaders()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapNode()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunBootstrapping()",
    "type": "CPP"
  },
  {
    "name": "node::RegisterSignalHandler(int, void (*)(int, siginfo_t*, void*), bool)",
    "type": "CPP"
  },
  {
    "name": "node::TearDownOncePerProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Stop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::StartExecution(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessGlobalArgs(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeNodeWithArgs(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::Init(int*, char const**, int*, char const***)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeOncePerProcess(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::Start(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::V8Platform::~V8Platform()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::PlatformInit()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::emplace_back<std::string>(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::operator=(std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string const&>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<char const (&) [39]>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, char const (&) [39])",
    "type": "CPP"
  },
  {
    "name": "std::vector<char*, std::allocator<char*> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<long, std::allocator<long> >::_M_realloc_insert<long>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_unique_pos(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::string>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::node_napi_env__(v8::Local<v8::Context>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register_by_symbol(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, napi_value__* (*)(napi_env__*, napi_value__*))",
    "type": "CPP"
  },
  {
    "name": "node::napi_module_to_node_module(napi_module const*)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register",
    "type": "CPP"
  },
  {
    "name": "napi_add_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_add_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_exception",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_error",
    "type": "CPP"
  },
  {
    "name": "napi_open_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_async_init",
    "type": "CPP"
  },
  {
    "name": "napi_async_destroy",
    "type": "CPP"
  },
  {
    "name": "napi_make_callback",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer_copy",
    "type": "CPP"
  },
  {
    "name": "napi_is_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_buffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_node_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_delete_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_get_uv_event_loop",
    "type": "CPP"
  },
  {
    "name": "napi_queue_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_cancel_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_create_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_threadsafe_function_context",
    "type": "CPP"
  },
  {
    "name": "napi_acquire_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_release_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_unref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_ref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "node_api_get_module_file_name",
    "type": "CPP"
  },
  {
    "name": "napi_call_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "napi_async_cleanup_hook_handle__::Hook(void*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::_FUN(uv_work_s*)",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::_FUN(uv_work_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::operator()(uv_work_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::operator()(uv_work_s*, int) const",
    "type": "CPP"
  },
  {
    "name": "void std::deque<void*, std::allocator<void*> >::_M_push_back_aux<void* const&>(void* const&)",
    "type": "CPP"
  },
  {
    "name": "node_module_register",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::DLib(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Open()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Close()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSymbolAddress(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSavedModuleFromGlobalHandleMap()",
    "type": "CPP"
  },
  {
    "name": "node::binding::RegisterBuiltinModules()",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetInternalBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetLinkedBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::SaveInGlobalHandleMap(node::node_module*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::global_handle_map_t::~global_handle_map_t()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::binding::global_handle_map_t::Entry>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](void* const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Blob(node::Environment*, v8::Local<v8::Object>, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::FixedSizeBlobCopyJob(node::Environment*, v8::Local<v8::Object>, node::Blob*, node::FixedSizeBlobCopyJob::Mode)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Create(node::Environment*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Slice(node::Environment*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToSlice(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetArrayBuffer(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::operator=(std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::Blob, false>::BaseObjectPtrImpl(node::Blob*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::_M_realloc_insert<node::BlobEntry>(__gnu_cxx::__normal_iterator<node::BlobEntry*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > >, node::BlobEntry&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::BackingStore, std::default_delete<v8::BackingStore> >(std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_buffer()",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(node::Environment*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(v8::Isolate*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethodNoSideEffect(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned short>(node::stringsearch::Vector<unsigned short const>, node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned char>(node::stringsearch::Vector<unsigned char const>, node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_config()",
    "type": "CPP"
  },
  {
    "name": "node::DefineConstants(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IsContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertySetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertySetterCallback(unsigned int, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDeleterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDeleterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyEnumeratorCallback(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDescriptorCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDescriptorCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyGetterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyGetterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDefinerCallback(v8::Local<v8::Name>, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDefinerCallback(unsigned int, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::WeakCallback(v8::WeakCallbackInfo<node::contextify::CompiledFnEntry> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateDataWrapper(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextFromContextifiedSandbox(node::Environment*, v8::Local<v8::Object> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::InstanceOf(node::Environment*, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::CompiledFnEntry(node::Environment*, v8::Local<v8::Object>, unsigned int, v8::Local<v8::ScriptOrModule>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::microtask_queue() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_contextify()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::~ContextifyContext()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::WeakCallback(v8::WeakCallbackInfo<node::contextify::ContextifyContext> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateV8Context(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextifyContext(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::MakeContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MicrotaskQueueWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::ContextifyScript(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::EvalMachine(node::Environment*, long, bool, bool, bool, std::shared_ptr<v8::MicrotaskQueue>, v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInThisContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > >::_M_erase(__gnu_cxx::__normal_iterator<v8::Global<v8::Context>*, std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > > >)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::contextify::MicrotaskQueueWrap, false>::BaseObjectPtrImpl(node::contextify::MicrotaskQueueWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Object>*, std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::String>*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >(std::unique_ptr<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::ContextifyScript*>, std::allocator<std::pair<unsigned int const, node::contextify::ContextifyScript*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::ContextifyScript*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, std::allocator<std::pair<unsigned int const, node::contextify::CompiledFnEntry*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SafeGetenv(char const*, std::string*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "_register_credentials()",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<unsigned int>(v8::Local<v8::Context>, std::vector<unsigned int, std::allocator<unsigned int> > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned int, std::allocator<unsigned int> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterClose(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::DirHandle(node::Environment*, v8::Local<v8::Object>, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(node::Environment*, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterOpenDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "_register_fs_dir()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_fs_s, void (*)(uv_fs_s*)>::Wrapper(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::GCClose()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::BindingData, false>::BaseObjectPtrImpl(node::fs::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FSReqBase, false>::BaseObjectPtrImpl(node::fs::FSReqBase*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<uv_dirent_s, std::allocator<uv_dirent_s> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::AssignFromObject(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::CreateMapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvVarProxy(v8::Local<v8::Context>, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::KVStore>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::IsExceptionDecorated(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Abort()",
    "type": "CPP"
  },
  {
    "name": "node::Assert(node::AssertionInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetPrepareStackTraceCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::errno_string(int)",
    "type": "CPP"
  },
  {
    "name": "_register_errors()",
    "type": "CPP"
  },
  {
    "name": "node::PrintStackTrace(v8::Isolate*, v8::Local<v8::StackTrace>)",
    "type": "CPP"
  },
  {
    "name": "node::PrintException(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::PrintCaughtException(v8::Isolate*, v8::Local<v8::Context>, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::AppendExceptionLine(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::ErrorHandlingMode)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TryCatchScope::~TryCatchScope()",
    "type": "CPP"
  },
  {
    "name": "node::errors::DecorateErrorStack(node::Environment*, node::errors::TryCatchScope const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::Local<v8::Value>, v8::Local<v8::Message>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::PerIsolateMessageListener(v8::Local<v8::Message>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::ToString() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<3u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<4u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::string node::ToBaseString<3u, std::string>(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReleaseFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Basename(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::TransferData(int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Resolve()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::file_handle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::CloseReq(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Promise>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ClosePromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::AfterClose()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::FileHandleReadWrap(node::fs::FileHandle*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FromNamespacedPath(std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::binding_data()",
    "type": "CPP"
  },
  {
    "name": "_register_fs()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::FileHandle(node::fs::BindingData*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(node::fs::BindingData*, int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::NewFSReqCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::FSReqAfterScope(node::fs::FSReqBase*, uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Clear()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::~FSReqAfterScope()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Reject(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Proceed()",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterInteger(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterMkdirp(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPath(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPtr(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterOpenFileHandle(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStat(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterNoArgs(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Access(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpSync(uv_loop_s*, uv_fs_s*, std::string const&, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::CallMKDirpSync(node::Environment*, v8::FunctionCallbackInfo<v8::Value> const&, node::fs::FSReqWrapSync*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDirWithTypes(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "node::IsSafeJsInt(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqWrapSync::~FSReqWrapSync()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<char, 64ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<unsigned long, v8::BigUint64Array>(node::AliasedBufferBase<unsigned long, v8::BigUint64Array, std::enable_if<std::is_scalar<unsigned long>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<double, v8::Float64Array>(node::AliasedBufferBase<double, v8::Float64Array, std::enable_if<std::is_scalar<double>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData* node::Environment::GetBindingData<node::fs::BindingData>(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::Value> >(v8::Local<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Integer> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Integer>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<char, std::allocator<char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>::BaseObjectPtrImpl(node::fs::FileHandleReadWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>*, std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > > >, node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>&&)",
    "type": "CPP"
  },
  {
    "name": "_register_http_parser()",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameSent(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidHeader(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::RefreshDefaultSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::HttpErrorString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::UpdateChunksSent(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::SetCallbackFunctions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Options::Http2Options(node::http2::Http2State*, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Init(node::http2::Http2State*, nghttp2_settings_entry*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Update(node::http2::Http2Session*, unsigned int (*)(nghttp2_session*, nghttp2_settings_id))",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::RefreshDefaults(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Done(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::TypeName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Origins::Origins(node::Environment*, v8::Local<v8::String>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Callbacks::Callbacks(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::StopTrackingRcbuf(nghttp2_rcbuf*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CanAddStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::GetFrameID(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HasWritesOnSocketForStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::operator*() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::stream() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IncrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DecrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopPing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopSettings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleSettingsFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Done(bool, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePingFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "_register_http2()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Http2Settings(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Http2Ping(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::DetachFromSession()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::FindStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RemoveStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PushOutgoingBuffer(node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CopyDataIntoOutgoing(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Http2Session(node::http2::Http2State*, v8::Local<v8::Object>, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::Environment*, unsigned long, nghttp2_settings_entry const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::PackSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::OnTrailers()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleGoawayFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeScheduleWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::~Http2Scope()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Send()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(int, unsigned char*, unsigned long, unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(node::http2::Origins const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Send(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitResponse(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Respond(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPriority(node::http2::Http2Priority const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleOriginFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(unsigned int, int, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnNghttpError(nghttp2_session*, char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Http2Stream(node::http2::Http2Session*, v8::Local<v8::Object>, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::New(node::http2::Http2Session*, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SubmitRequest(node::http2::Http2Priority const&, node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPushPromise(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::AddHeader(nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddPing(unsigned char const*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Ping(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddSettings(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Settings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Priority::Http2Priority(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Priority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDWordAlignedPadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnMaxFrameSizePadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSendData(nghttp2_session*, nghttp2_frame*, unsigned char const*, unsigned long, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSelectPadding(nghttp2_session*, nghttp2_frame const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Close(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetNextStreamID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetLocalWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleDataFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleHeadersFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameReceive(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameNotSent(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamClose(nghttp2_session*, int, unsigned int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SendPendingData()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Close(unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitRstStream(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RstStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnHeaderCallback(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::StartHeaders(nghttp2_headers_category)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnBeginHeadersCallback(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitInfo(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Info(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitTrailers(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Trailers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::OnRead(nghttp2_session*, int, unsigned char*, unsigned long, unsigned int*, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Request(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::PushPromise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ConsumeHTTP2Data()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidFrame(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDataChunkReceived(nghttp2_session*, unsigned char, int, unsigned char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::IsCacheable() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Lock() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Unlock() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::flags() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::name() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::value() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaderBase<node::http2::Http2Session>::ToString() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamPerformanceEntry::~Http2StreamPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2SessionPerformanceEntry::~Http2SessionPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamPerformanceEntry::~Http2StreamPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2SessionPerformanceEntry::~Http2SessionPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<unsigned int, v8::Uint32Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2State, false>::BaseObjectPtrImpl(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, false>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, true>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Stream, false>::BaseObjectPtrImpl(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaders<node::http2::Http2HeadersTraits>::NgHeaders(node::Environment*, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<int, std::allocator<int> >::_M_realloc_insert<int&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> >::_M_realloc_insert<node::http2::NgHttp2StreamWrite>(__gnu_cxx::__normal_iterator<node::http2::NgHttp2StreamWrite*, std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> > >, node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char*, std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, std::allocator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > > >, std::__detail::_Select1st, std::equal_to<char*>, std::hash<char*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, false, false>)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedStruct<node::http2::SessionJSFields>::AliasedStruct<>(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_remote_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_local_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::allocator<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >::_M_realloc_insert<node::NgHeader<node::http2::Http2HeaderTraits> >(__gnu_cxx::__normal_iterator<node::NgHeader<node::http2::Http2HeaderTraits>*, std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > > >, node::NgHeader<node::http2::Http2HeaderTraits>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Ping, false>::BaseObjectPtrImpl(node::http2::Http2Ping*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> >(node::BaseObjectPtrImpl<node::http2::Http2Ping, false>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Settings, false>::BaseObjectPtrImpl(node::http2::Http2Settings*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Settings, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> >(node::BaseObjectPtrImpl<node::http2::Http2Settings, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char*, std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, std::allocator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > > >, std::__detail::_Select1st, std::equal_to<char*>, std::hash<char*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char const*, std::pair<char const* const, v8::Eternal<v8::String> >, std::allocator<std::pair<char const* const, v8::Eternal<v8::String> > >, std::__detail::_Select1st, std::equal_to<char const*>, std::hash<char const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<char const* const, v8::Eternal<v8::String> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::String> node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::New<node::http2::Http2Session>(node::http2::Http2Session*, node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetValue(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetName(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Decode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Has(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(UConverter*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::set_subst_chars(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::reset()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::min_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::max_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::ConverterObject(node::Environment*, v8::Local<v8::Object>, UConverter*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Create(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::InitializeICUDirectory(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToUnicode(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToASCII(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long, node::i18n::idna_mode)",
    "type": "CPP"
  },
  {
    "name": "_register_icu()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Create(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Dispose()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::~NodeMainInstance()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::CreateMainEnvironment(int*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Run()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::FinalizeTransferWrite(v8::Local<v8::Context>, v8::ValueSerializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Message(node::MallocedBuffer<char>&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::IsCloseMessage() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MessagePortData(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Entangle(node::worker::MessagePortData*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TriggerAsync()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::GetMessagePortConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::JSTransferable(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferOrClone(node::BaseObject::TransferMode) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Data(std::string&&, v8::Global<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "_register_messaging()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Deserialize(node::Environment*, v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddSharedArrayBuffer(std::shared_ptr<v8::BackingStore>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddTransferable(std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddWASMModule(v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Serialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::AddToIncomingQueue(node::worker::Message&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Disentangle()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::MessagePortData, std::default_delete<node::worker::MessagePortData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::Local<v8::Context>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnMessage()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Drain(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MoveToContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::MessagePort, false>::BaseObjectPtrImpl(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::SharedArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::SharedArrayBuffer>*, std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > > >, v8::Local<v8::SharedArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > >::_M_realloc_insert<std::shared_ptr<v8::BackingStore> >(__gnu_cxx::__normal_iterator<std::shared_ptr<v8::BackingStore>*, std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > > >, std::shared_ptr<v8::BackingStore>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > >::_M_realloc_insert<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >*, std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > > >, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> >::_M_realloc_insert<v8::CompiledWasmModule>(__gnu_cxx::__normal_iterator<v8::CompiledWasmModule*, std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> > >, v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Global<v8::SharedArrayBuffer> >(__gnu_cxx::__normal_iterator<v8::Global<v8::SharedArrayBuffer>*, std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > > >, v8::Global<v8::SharedArrayBuffer>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::BaseObject, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::BaseObject, false>*, std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > >, node::BaseObjectPtrImpl<node::BaseObject, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::operator=(std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::ArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::ArrayBuffer>*, std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > > >, v8::Local<v8::ArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Value> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetOpenSSLVersion()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::InitializeIntlVersions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Release::Release()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::Versions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Metadata()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::~Metadata()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetInstance()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::code_cache()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCodeCache(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LoadBuiltinModuleSource(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetModuleIds()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CompileAsModule(v8::Local<v8::Context>, char const*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::InitializeModuleCategories()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCannotBeRequired()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCanBeRequired()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CanBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CannotBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, node::UnionBytes> >*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::~NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const*&, node::UnionBytes const&>(char const*&, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_emplace_unique<std::string const&>(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, std::allocator<std::pair<std::string const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<std::string const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, false, true>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ConfigStringGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::ToJsSet(v8::Local<v8::Context>, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetCacheUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "_register_native_module()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ModuleIdsGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RecordResult(char const*, node::native_module::NativeModuleLoader::Result, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetModuleCategories(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::string>(v8::Local<v8::Context>, std::vector<std::string, std::allocator<std::string> > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::equal_range(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::erase(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy<std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node>(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node&)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetBashCompletion()",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>, std::function<std::string (char const*)>)",
    "type": "CPP"
  },
  {
    "name": "_register_options()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::CheckOptions(std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::SplitHostPort(std::string const&, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::ParseNodeOptionsEnvVar(std::string const&, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::DebugOptions, node::Options>(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerIsolateOptions, node::Options>(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerProcessOptions, node::Options>(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::PerIsolateOptionsParser(node::options_parser::EnvironmentOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::PerProcessOptionsParser(node::options_parser::PerIsolateOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::get_debug_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::get_per_isolate_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::get_per_env_options()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::string, std::allocator<std::string> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::string>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::ToV8Value(v8::Local<v8::Context>, std::string const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long long __gnu_cxx::__stoa<unsigned long long, unsigned long long, char, int>(unsigned long long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::string, std::vector<std::string, std::allocator<std::string> > >(v8::Local<v8::Context>, std::unordered_map<std::string, std::vector<std::string, std::allocator<std::string> >, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > > > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ParseAndValidatePort(std::string const&, std::vector<std::string, std::allocator<std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::PerProcessOptions>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::push_back(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::pop_first()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::equal_range(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::equal_range(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::equal_range(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > >, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, std::initializer_list<std::string> const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, std::initializer_list<std::string> const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Parse(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddOption(char const*, char const*, bool node::DebugOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Parse(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Parse(std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, std::vector<std::string, std::allocator<std::string> >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::string, std::allocator<std::string> >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, bool node::EnvironmentOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::string node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::vector<std::string, std::allocator<std::string> > node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, unsigned long node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::AddOption(char const*, char const*, bool node::PerIsolateOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, bool node::PerProcessOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, std::string node::PerProcessOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::EnvironmentOptions>::Insert<node::DebugOptions>(node::options_parser::OptionsParser<node::DebugOptions> const&, node::DebugOptions* (node::EnvironmentOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::ImpliesNot(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerIsolateOptions>::Insert<node::EnvironmentOptions>(node::options_parser::OptionsParser<node::EnvironmentOptions> const&, node::EnvironmentOptions* (node::PerIsolateOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerProcessOptions>::Insert<node::PerIsolateOptions>(node::options_parser::OptionsParser<node::PerIsolateOptions> const&, node::PerIsolateOptions* (node::PerProcessOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::ImpliesNot(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::os::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_os()",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::String> >(v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::Number> >(v8::Local<v8::Number>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::String>&>(v8::Local<v8::String>&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionStart(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GarbageCollectionCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::SetupPerformanceObservers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ClearMark(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Timerify(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Notify(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::OnInterval()",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::ToObject() const",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Mark(node::performance::PerformanceMilestone, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkMilestone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::Notify(node::Environment*, node::performance::PerformanceEntryType, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceGCCallback(node::Environment*, std::unique_ptr<node::performance::GCPerformanceEntry, std::default_delete<node::performance::GCPerformanceEntry> >)",
    "type": "CPP"
  },
  {
    "name": "node::performance::TimerFunctionCall(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::ELDHistogram(node::Environment*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "_register_performance()",
    "type": "CPP"
  },
  {
    "name": "node::performance::Mark(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Measure(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEventWithTimestamp(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int, long)",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::~ELDHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::performance::ELDHistogram::~ELDHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::performance::GCPerformanceEntry::~GCPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::~PerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::GCPerformanceEntry::~GCPerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceEntry::~PerformanceEntry()",
    "type": "CPP"
  },
  {
    "name": "node::performance::GetName(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NumberOfWorkerThreads()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetStackTracePrinter()",
    "type": "CPP"
  },
  {
    "name": "node::MultiIsolatePlatform::CancelPendingDelayedTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::MonotonicallyIncreasingTime()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CurrentClockTimeMillis()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::GetForegroundTaskRunner()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::BlockingDrain()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::NumberOfWorkerThreads() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DecreaseHandleCount()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DeleteFromScheduledTasks(node::DelayedTask*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallDelayedOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::AddIsolateFinishedCallback(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::AddShutdownCallback(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForNodeIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::IdleTasksEnabled(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetForegroundTaskRunner(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, node::IsolatePlatformDelegate*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::WorkerThreadsTaskRunner(int)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NodePlatform(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::DrainTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::FlushForegroundTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PerIsolatePlatformData(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::UnregisterIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::UpdateTraceEventDuration(unsigned char const*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::RemoveTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetPageAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::IdleTasksEnabled(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetStackTracePrinter()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::DumpWithoutCrashing()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::Push(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::RunTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallLowPriorityTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallBlockingTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<uv_timer_s*, std::allocator<uv_timer_s*> >::_M_realloc_insert<uv_timer_s* const&>(__gnu_cxx::__normal_iterator<uv_timer_s**, std::vector<uv_timer_s*, std::allocator<uv_timer_s*> > >, uv_timer_s* const&)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> >::_M_realloc_insert<node::PerIsolatePlatformData::ShutdownCallback>(__gnu_cxx::__normal_iterator<node::PerIsolatePlatformData::ShutdownCallback*, std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> > >, node::PerIsolatePlatformData::ShutdownCallback&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > >::_M_realloc_insert<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >*, std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > > >, std::unique_ptr<unsigned long, std::default_delete<unsigned long> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::Isolate* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<uv_timer_s*, uv_timer_s*, std::allocator<uv_timer_s*>, std::__detail::_Identity, std::equal_to<uv_timer_s*>, std::hash<uv_timer_s*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<uv_timer_s*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::Run()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, std::allocator<std::unique_ptr<v8::Task, std::default_delete<v8::Task> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::TaskQueue()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> >, std::allocator<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::GenDebugSymbols()",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmit(node::Environment*, char const*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitWarningGeneric(node::Environment*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitDeprecationWarning(node::Environment*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitExperimentalWarning(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::set<std::string, std::less<std::string>, std::allocator<std::string> >::~set()",
    "type": "CPP"
  },
  {
    "name": "_register_process_methods()",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::RawDebug(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "node::CreateProcessObject(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::PatchProcessObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::TriggerNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::string const&, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "report::GetNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, v8::Local<v8::Object>, std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_start()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_end()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_objectend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_arrayend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_string(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_string(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_objectstart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [9], unsigned long>(char const (&) [9], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_arraystart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [8], std::string>(char const (&) [8], std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::string, std::allocator<std::string> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], std::string>(char const (&) [5], std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [10], char [256]>(char const (&) [10], char const (&) [256])",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], unsigned long>(char const (&) [5], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [11], unsigned long>(char const (&) [11], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "report::WriteReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_report()",
    "type": "CPP"
  },
  {
    "name": "report::WalkHandle(uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_serdes()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetFlowLabel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::LegacyDetail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::ToString()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::ToString()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Detail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::ToSockAddr(int, char const*, unsigned int, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(int, char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::Hash::operator()(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_match(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::compare(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_in_network(node::SocketAddress const&, int) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressBlockList(std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::RemoveSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressRange(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressMask(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SocketAddressRule(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SocketAddressRangeRule(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SocketAddressMaskRule(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SocketAddressBlockListWrap(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Check(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddRange(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddSubnet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SocketAddressBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "_register_block_list()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::ToString()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddAddress(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetRules(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Create(node::Environment*, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<node::SocketAddress, std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > >, std::allocator<std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > > >, std::__detail::_Select1st, std::equal_to<node::SocketAddress>, node::SocketAddress::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](node::SocketAddress const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBlockListWrap, false>::BaseObjectPtrImpl(node::SocketAddressBlockListWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBase, false>::BaseObjectPtrImpl(node::SocketAddressBase*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::StatWatcher(node::fs::BindingData*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Callback(uv_fs_poll_s*, int, uv_stat_t const*, uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "_register_symbols()",
    "type": "CPP"
  },
  {
    "name": "node::PromiseRejectCallback(v8::PromiseRejectMessage)",
    "type": "CPP"
  },
  {
    "name": "_register_task_queue()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Disable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetEnabledCategories(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_trace_events()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Enable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "_register_types()",
    "type": "CPP"
  },
  {
    "name": "node::Utf8String(v8::Isolate*, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToFilePath() const",
    "type": "CPP"
  },
  {
    "name": "_register_url()",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToObject(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::Parse(char const*, unsigned long, node::url::url_parse_state, node::url::url_data*, bool, node::url::url_data const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::FromFilePath(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<char const (&) [1]>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, char const (&) [1])",
    "type": "CPP"
  },
  {
    "name": "node::util::ArrayBufferViewHasBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_util()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::alpn_buffer_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::arrow_message_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_context_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_global_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::decorated_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_type_tag() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_wrapper() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::untransferable_object_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::Get(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::IncRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::DecRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::SetFlagsFromString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::CachedDataVersionTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapCodeStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapSpaceStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_v8()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>::BaseObjectPtrImpl(node::v8_utils::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::_SetMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::WASI(node::Environment*, v8::Local<v8::Object>, uvwasi_options_s*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::backingStore(char**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "_register_wasi()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SchedYield(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdClose(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdDatasync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcExit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcRaise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockResGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRenumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdTell(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::RandomGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatDirName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathCreateDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRemoveDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathUnlinkFile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PollOneoff(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdWrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathSymlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathReadlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathLink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockTimeGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetFlags(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAllocate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetRights(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdReaddir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPwrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockShutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAdvise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSeek(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockRecv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockSend(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Run(void*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Timer(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HandleSignal(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::RunSigintWatchdog(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Watchdog(v8::Isolate*, unsigned long, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::~Watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::TraceSigintWatchdog(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::InformWatchdogsAboutSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::~SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HasPendingSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Unregister(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "_register_watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleInterrupt()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Register(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::SigintWatchdog(v8::Isolate*, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> >::_M_realloc_insert<node::SigintWatchdogBase* const&>(__gnu_cxx::__normal_iterator<node::SigintWatchdogBase**, std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> > >, node::SigintWatchdogBase* const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopStartTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::is_stopped() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::UpdateResourceConstraints(v8::ResourceConstraints*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::CreateEnvMessagePort(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::JoinThread()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "_register_worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Worker(node::Environment*, v8::Local<v8::Object>, std::string const&, std::shared_ptr<node::PerIsolateOptions>, std::vector<std::string, std::allocator<std::string> >&&, std::shared_ptr<node::KVStore>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Exit(int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::NearHeapLimit(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StopThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Run()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::WorkerHeapSnapshotTaker, false>::BaseObjectPtrImpl(node::worker::WorkerHeapSnapshotTaker*)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >(std::unique_ptr<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::worker::Worker*, node::worker::Worker*, std::allocator<node::worker::Worker*>, std::__detail::_Identity, std::equal_to<node::worker::Worker*>, std::hash<node::worker::Worker*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::worker::Worker*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DefineZlibConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_zlib()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Fchmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::PipeWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::PipeWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, bool)",
    "type": "CPP"
  },
  {
    "name": "_register_pipe_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_connect_s, void (*)(uv_connect_s*, int)>::Wrapper(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "_register_process_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::HasSignalJSHandler(int)",
    "type": "CPP"
  },
  {
    "name": "_register_signal_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::DecreaseSignalHandlerCount(int)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, long> >*)",
    "type": "CPP"
  },
  {
    "name": "std::map<int, long, std::less<int>, std::allocator<std::pair<int const, long> > >::~map()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::erase(int const&)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::WriteCallback(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ShutdownCallback(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::CloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ExitCallback(uv_process_s*, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::AllocCallback(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ReadCallback(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCallback(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::SyncProcessStdioPipe(node::SyncProcessRunner*, bool, bool, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::~SyncProcessStdioPipe()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Initialize(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Close()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::GetOutputAsBuffer(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SyncProcessRunner(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::~SyncProcessRunner()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseStdioPipes()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseHandlesAndDeleteLoop()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseKillTimer()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Kill()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IncrementBufferSizeAndCheckOverflow(long)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnExit(long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnKillTimerTimeout()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::GetError()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetPipeError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildOutputArray()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildResultObject()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOption(int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IsSet(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsString(v8::Local<v8::Value>, char const**)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsStringArray(v8::Local<v8::Value>, char**)",
    "type": "CPP"
  },
  {
    "name": "_register_spawn_sync()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::TryInitializeAndRunLoop(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Run(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Spawn(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> >, std::allocator<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::Error() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetObject()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetExternal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesWritten(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStartJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStopJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::UseUserBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::SetWriteResult(node::StreamWriteResult const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CallJSOnreadMethod(long, v8::Local<v8::ArrayBuffer>, unsigned long, node::StreamBase::StreamBaseJSChecks)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethod(node::Environment*, v8::Local<v8::Signature>, v8::PropertyAttribute, v8::Local<v8::FunctionTemplate>, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterReqFinished(node::StreamReq*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::ShutdownWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::WriteWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Writev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldGet<2>(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldSet<2, &(v8::Value::IsFunction() const)>(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStopJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStartJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::UseUserBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Shutdown>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Writev>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::WriteBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::IsClosed(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::PendingWrites(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::StreamPipe(node::StreamBase*, node::StreamBase*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_pipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(bool)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ProcessData(unsigned long, node::AllocatedBuffer&&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::StreamPipe, false>::BaseObjectPtrImpl(node::StreamPipe*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvShutdown(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvWrite(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetWriteQueueSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::SetBlocking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::LibuvStreamWrap(node::Environment*, v8::Local<v8::Object>, uv_stream_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::From(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvAlloc(unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvRead(long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_shutdown_s, void (*)(uv_shutdown_s*, int)>::Wrapper(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_write_s, void (*)(uv_write_s*, int)>::Wrapper(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::WriteUCS2(v8::Isolate*, char*, unsigned long, v8::Local<v8::String>, int, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::StorageSize(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Size(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode(char const*, unsigned long, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, unsigned short const*, unsigned long, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Write(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding, int*)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<char>(char*, unsigned long, char const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<unsigned short>(char*, unsigned long, unsigned short const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_string_decoder()",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::DecodeData(v8::Isolate*, char const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::FlushData(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetNoDelay(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetKeepAlive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::TCPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::TCPWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::AddressToJS(node::Environment*, sockaddr const*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_tcp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in*), int (*)(char const*, int, sockaddr_in*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in6*), int (*)(char const*, int, sockaddr_in6*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in6*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in6*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "_register_timers()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::OnTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::TimerClosedCb(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::TimerWrap(node::Environment*, std::function<void ()> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::TimerWrapHandle(node::Environment*, std::function<void ()> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Start()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::DefaultHandle()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::StopTracing()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddMetadataEvent(std::unique_ptr<v8::platform::tracing::TraceObject, std::default_delete<v8::platform::tracing::TraceObject> >)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::AddMetadataEvent(unsigned char const*, char const*, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::InitializeWritersOnThread()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::CreateTraceConfig() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disable(int, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Enable(int, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disconnect(int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::GetEnabledCategories() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddClient(std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> >, node::tracing::Agent::UseDefaultCategoryMode)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AsyncTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::CurrentTimestampMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_erase(std::_Rb_tree_node<node::tracing::AsyncTraceWriter*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::erase(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<node::tracing::AsyncTraceWriter*>, bool> std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_insert_unique<node::tracing::AsyncTraceWriter* const&>(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, std::allocator<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, std::allocator<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > >, std::allocator<std::pair<int const, std::multiset<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_hint_equal_pos(std::_Rb_tree_const_iterator<std::string>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_equal<std::_Rb_tree_const_iterator<std::string> >(std::_Rb_tree_const_iterator<std::string>, std::_Rb_tree_const_iterator<std::string>)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::_Rb_tree_const_iterator<std::string> >(std::_Rb_tree_const_iterator<std::string>, std::_Rb_tree_const_iterator<std::string>)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::Flush()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NonBlockingFlushSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::MakeHandle(unsigned long, unsigned int, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::ExtractHandle(unsigned long, unsigned int*, unsigned long*, unsigned int*, unsigned long*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::TryLoadAvailableBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::InternalTraceBuffer(unsigned long, unsigned int, node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NodeTraceBuffer(unsigned long, node::tracing::Agent*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> >, std::allocator<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::NodeTraceWriter(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteSuffix()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::replace_substring(std::string*, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::FlushPrivate()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteToFile(std::string&&, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::StartWrite(uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AfterWrite()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::OpenNewFileForStreaming()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetAgent(node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetAgent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendAsTraceFormat(std::string*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::Create()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::CreateArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::TracedValue(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetDouble(char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetBoolean(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetNull(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetString(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendBoolean(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendNull()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendString(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteComma()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetInteger(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendInteger(int)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SetRawMode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::IsTTY(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::GetWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::TTYWrap(node::Environment*, v8::Local<v8::Object>, int, bool, int*)",
    "type": "CPP"
  },
  {
    "name": "_register_tty_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStart(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Disconnect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastLoopback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetBroadcast(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastInterface(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::BufferSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SendWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::listener() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::set_listener(node::UDPListener*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::FromObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::UDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::sockaddr_for_family(int, char const*, unsigned short, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoBind(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoConnect(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetSourceMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoSend(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::UDPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "_register_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(uv_udp_s*, long, uv_buf_t const*, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_udp_send_s, void (*)(uv_udp_send_s*, int)>::Wrapper(uv_udp_send_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::Utf8Value(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::TwoByteValue::TwoByteValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BufferValue::BufferValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::LowMemoryNotification()",
    "type": "CPP"
  },
  {
    "name": "node::GetProcessTitle(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentTimeInMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(char const*, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(v8::Isolate*, char const*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::ReadFileSync(std::string*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::LocalTime(tm*)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::MakeFilename(unsigned long, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::SplitString(std::string const&, char)",
    "type": "CPP"
  },
  {
    "name": "node::GetHumanReadableProcessName()",
    "type": "CPP"
  },
  {
    "name": "_register_uv()",
    "type": "CPP"
  },
  {
    "name": "node::MapStaticCodeToLargePages()",
    "type": "CPP"
  },
  {
    "name": "node::LargePagesError(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Agent(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::string const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::StartIoThread()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ConnectToMainThread(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ReportUncaughtException(v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::PauseOnNextJavascriptStatement(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ToggleAsyncHook(v8::Isolate*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::EnableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::DisableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RegisterAsyncHook(v8::Isolate*, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskScheduled(v8_inspector::StringView const&, void*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskCanceled(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskStarted(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskFinished(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AllAsyncTasksCanceled()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RequestIoThreadStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ContextCreated(v8::Local<v8::Context>, node::ContextInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::IsActive()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::SetParentHandle(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetParentHandle(unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForConnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWorkerManager()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWsUrl() const",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::muteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::unmuteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::valueSubtype(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::formatAccessorsAsProperties(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::isInspectableHeapObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleAPIMessage(int, v8::Isolate::MessageErrorLevel, v8_inspector::StringView const&, v8_inspector::StringView const&, unsigned int, unsigned int, v8_inspector::V8StackTrace*)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::memoryInfo(v8::Isolate*, v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTime(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeEnd(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeStamp(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleClear(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::canExecuteScripts(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::quitMessageLoopOnPause()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runIfWaitingForDebugger(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::ensureDefaultContextInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::currentTimeMS()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (), node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_invoke(std::_Any_data const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::installAdditionalCommandLineAPI(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::cancelTimer(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runMessageLoopOnPause(int)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::resourceNameToUrl(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::maxAsyncCallStackDepthChanged(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::TimerWrapHandle>, std::allocator<std::pair<void* const, node::TimerWrapHandle> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::TimerWrapHandle>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetTitle(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetUrl(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::EndSession(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::MessageReceived(int, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetIds()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::InspectorIo(std::shared_ptr<node::inspector::MainThreadHandle>, std::string const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, node::InspectPublishUid const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::~InspectorIo()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::Start(std::shared_ptr<node::inspector::MainThreadHandle>, std::string const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, node::InspectPublishUid const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::StopAcceptingNewConnections()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::ThreadMain()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::ThreadMain(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::GetWsUrl() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::StartSession(int, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::AssignServer(node::inspector::InspectorSocketServer*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::~InspectorIoDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::~IoSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::~IoSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::~InspectorIoDelegate()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetDirectory() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetFilename() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetDirectory() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetFilename() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetDirectory() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerConnection(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "_register_profiler()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetFilename() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::WriteProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::WriteProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::DispatchMessage(char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::TakeCoverage()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::StopCoverage()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::StartProfilers(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::~V8ProfilerSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::~V8ProfilerSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::~V8HeapProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::~V8CoverageConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::~V8CpuProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::~V8CoverageConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::~V8CpuProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::~V8HeapProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<unsigned int, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_inspector()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::OnClosed(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::OnDataReceivedCb(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::ProtocolHandler(node::inspector::InspectorSocket*, std::unique_ptr<node::inspector::TcpHolder, node::FunctionDeleter<node::inspector::TcpHolder, &node::inspector::TcpHolder::DisconnectAndDispose> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::WriteRaw(std::vector<char, std::allocator<char> > const&, void (*)(uv_write_s*, int))",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::GetHost() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::TcpHolder(std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::Accept(uv_stream_s*, std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::SetHandler(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::WriteRaw(std::vector<char, std::allocator<char> > const&, void (*)(uv_write_s*, int))",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::DisconnectAndDispose(node::inspector::TcpHolder*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::ReclaimUvBuf(uv_buf_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::~InspectorSocket()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Shutdown(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Accept(uv_stream_s*, std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::AcceptUpgrade(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::CancelHandshake()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::GetHost()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::SwitchProtocol(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Write(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::string> >*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<char, std::allocator<char> >::_M_realloc_insert<char>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, char&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_unique_pos(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnWsFrame(std::vector<char, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::FormatWsAddress(std::string const&, int, std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::PrintDebuggerReadyMessage(std::string const&, std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > > const&, std::vector<std::string, std::allocator<std::string> > const&, char const*, bool, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::InspectorSocketServer(std::unique_ptr<node::inspector::SocketServerDelegate, std::default_delete<node::inspector::SocketServerDelegate> >, uv_loop_s*, std::string const&, int, node::InspectPublishUid const&, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Session(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::GetFrontendURL(bool, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::TerminateConnections()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::TargetExists(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Port() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Send(int, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::CloseServerSocket(node::inspector::ServerSocket*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::SocketSession(node::inspector::InspectorSocketServer*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Send(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::DetectPort()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::Listen(sockaddr*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::~InspectorSocketServer()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SessionTerminated(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Accept(int, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::SocketConnectedCallback(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SessionStarted(int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnSocketUpgrade(std::string const&, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Start()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SendListResponse(node::inspector::InspectorSocket*, std::string const&, node::inspector::SocketSession*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::HandleGetRequest(int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnHttpGet(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::FreeOnCloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::erase(int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, std::pair<std::string, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, int const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::allocator<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > > >::_M_realloc_insert<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > >(__gnu_cxx::__normal_iterator<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >*, std::vector<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::allocator<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >*, std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > > >, std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::~MainThreadInterface()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::WaitForFrontendEvent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::DispatchMessages()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::RemoveObject(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetObject(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetObjectIfExists(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Reset()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Expired()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::MainThreadInterface(node::inspector::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::AddObject(int, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::MakeDelegateThreadSafe(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Utf8ToStringView(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >, std::allocator<std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseJSON(v8_inspector::StringView)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::toDouble(char const*, unsigned long, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::jsonToMessage(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::binaryToMessage(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromUTF8(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::CharactersUTF8(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::builderAppendQuotedString(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseJSON(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromUTF16(unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::CharacterCount(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseMessage(std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::StringViewToUtf8(v8_inspector::StringView)",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::Append(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::~StringByteSink()",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::~StringByteSink()",
    "type": "CPP"
  },
  {
    "name": "icu_69::StringByteSink<std::string>::StringByteSink(std::string*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::notifyWhenWaitingForDisconnect(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::notifyWaitingForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::~RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::~RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::inspector::protocol::NodeRuntime::Frontend, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend> >(std::unique_ptr<node::inspector::protocol::NodeRuntime::Frontend, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::~TracingAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::~TracingAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::TracingAgent(node::Environment*, std::shared_ptr<node::inspector::MainThreadHandle>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::start(std::unique_ptr<node::inspector::protocol::NodeTracing::TraceConfig, std::default_delete<node::inspector::protocol::NodeTracing::TraceConfig> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::getCategories(std::unique_ptr<node::inspector::protocol::Array<std::string>, std::default_delete<node::inspector::protocol::Array<std::string> > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::disable()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::enable(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::WorkerAgent(std::weak_ptr<node::inspector::WorkerManager>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Send(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Receive(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::sendMessageToWorker(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Detached(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::detach(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::WorkerCreated(std::string const&, std::string const&, bool, std::shared_ptr<node::inspector::MainThreadHandle>)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::~WorkerInfo()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::~WorkerInfo()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::ParentInspectorHandle(unsigned long, std::string const&, std::shared_ptr<node::inspector::MainThreadHandle>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::~ParentInspectorHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::WorkerFinished(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::NewParentHandle(unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::RemoveAttachDelegate(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManagerEventHandle::~WorkerManagerEventHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::WorkerStarted(std::shared_ptr<node::inspector::MainThreadHandle>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::SetAutoAttach(std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::WorkerStarted(unsigned long, node::inspector::WorkerInfo const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::SetWaitOnStartForDelegate(int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManagerEventHandle::SetWaitOnStart(bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned long, std::pair<unsigned long const, node::inspector::WorkerInfo>, std::allocator<std::pair<unsigned long const, node::inspector::WorkerInfo> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, node::inspector::WorkerInfo>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetFreeListLength(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ENGINE_free_fn(engine_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ENGINE_finish_and_free_fn(engine_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::TicketCompatibilityCallback(ssl_st*, unsigned char*, unsigned char*, evp_cipher_ctx_st*, hmac_ctx_st*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::InitCryptoOnce()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::EnableTicketKeyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::VerifyErrorGetter(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::CtxGetter(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetSymmetricKeySize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAutoPadding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GenerateKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetMaxProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetMinProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetHashes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetTicketKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetMinProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetMaxProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetRootCertificates(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::GetAuthTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacDigest(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAuthTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCurves(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSSLCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::~SecureContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::~SecureContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::~Hash()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::~ECDH()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::~ECDH()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::~Hash()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::error::Decorate(node::Environment*, v8::Local<v8::Object>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EntropySource(unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SecureContext(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSL_CTX_use_certificate_chain(ssl_ctx_st*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >&&, stack_st_X509*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSL_CTX_use_certificate_chain(ssl_ctx_st*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> >&&, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyCallback(int, x509_store_ctx_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ByteSource(node::crypto::ByteSource&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::~ByteSource()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::operator=(node::crypto::ByteSource&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::get() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::size() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromString(node::Environment*, v8::Local<v8::String>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromStringOrBuffer(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromBuffer(v8::Local<v8::Value>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::NullTerminatedCopy(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromSymmetricKeyObjectHandle(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ByteSource(char const*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::Allocated(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::Foreign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ManagedEVPPKey(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ManagedEVPPKey(node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::operator=(node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::get() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::CreateSecret(v8::Local<v8::ArrayBufferView>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::CreateAsymmetric(node::crypto::KeyType, node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetKeyType() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetAsymmetricKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetSymmetricKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetSymmetricKeySize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Initialize(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Data()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::KeyObjectHandle(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetAsymmetricKeyType() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetAsymmetricKeyType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportSecretKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CipherBase(node::Environment*, v8::Local<v8::Object>, node::crypto::CipherBase::CipherKind)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitAuthenticated(char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CheckCCMMessageLength(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::IsAuthenticatedMode() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MaybePassAuthTagToOpenSSL()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(char const*, unsigned int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAutoPadding(bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Final(node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::Hmac(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::Hash(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashInit(evp_md_st const*, v8::Maybe<unsigned int>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::Init(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::Update(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::SignBase(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::Sign(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignFinal(node::crypto::ManagedEVPPKey const&, int, v8::Maybe<int> const&, node::crypto::DSASigEnc)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::Verify(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyFinal(node::crypto::ManagedEVPPKey const&, node::crypto::ByteSource const&, int, v8::Maybe<int> const&, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::DiffieHellman(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(char const*, int, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::VerifyContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ECDH(node::Environment*, v8::Local<v8::Object>, std::unique_ptr<ec_key_st, node::FunctionDeleter<ec_key_st, &EC_KEY_free> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::IsKeyValidForCurve(std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::IsKeyPairValid()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifySpkac(char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportPublicKey(node::Environment*, char const*, int, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportChallenge(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::StatelessDiffieHellman(node::Environment*, node::crypto::ManagedEVPPKey, node::crypto::ManagedEVPPKey)",
    "type": "CPP"
  },
  {
    "name": "_register_crypto()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Create(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::BufferToPoint(node::Environment*, ec_group_st const*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ConvertKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::TicketKeyCallback(ssl_st*, unsigned char*, unsigned char*, evp_cipher_ctx_st*, hmac_ctx_st*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifySpkac(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportChallenge(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::UseExtraCaCerts(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddRootCerts(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetField(v8::FunctionCallbackInfo<v8::Value> const&, bignum_st const* (*)(dh_st const*), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetGenerator(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ThrowCryptoError(node::Environment*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSigalgs(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetEngineKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCipherSuites(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetClientCertEngine(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportPublicKey(node::crypto::AsymmetricKeyEncodingConfig const&) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportPrivateKey(node::crypto::PrivateKeyEncodingConfig const&) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Export(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CommonInit(char const*, evp_cipher_st const*, unsigned char const*, int, unsigned char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(char const*, char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(char const*, unsigned char const*, int, unsigned char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Final(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacInit(char const*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashDigest(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckThrow(node::Environment*, node::crypto::SignBase::Error)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::CheckThrow(node::crypto::SignBase::Error)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GenerateKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::StatelessDiffieHellman(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetEngine(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPair(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, std::unique_ptr<node::crypto::KeyPairGenerationConfig, std::default_delete<node::crypto::KeyPairGenerationConfig> >)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairRSA(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairRSAPSS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairDSA(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairEC(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairNid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairDH(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Scrypt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCert(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddCACert(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddCRL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetECDHCurve(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSessionIdContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSessionTimeout(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetKey(v8::FunctionCallbackInfo<v8::Value> const&, int (*)(dh_st*, bignum_st*), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TimingSafeEqual(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::DiffieHellmanGroup(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::LoadPKCS12(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetDHParam(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetTicketKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignFinal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignOneShot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyFinal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyOneShot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenerationConfig::Configure(std::unique_ptr<evp_pkey_ctx_st, node::FunctionDeleter<evp_pkey_ctx_st, &EVP_PKEY_CTX_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::~RSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (engine_st*), void (*)(engine_st*)>::_M_invoke(std::_Any_data const&, engine_st*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<void (*)(engine_st*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenerationConfig::~NidKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyPairGenerationConfig::~ECKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyPairGenerationConfig::~DSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::~RSAPSSKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenerationConfig::~NidKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyPairGenerationConfig::~ECKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyPairGenerationConfig::~DSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::~RSAKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::~RSAPSSKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::vector<x509_st*, std::allocator<x509_st*> >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyPairGenerationConfig::~DHKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyPairGenerationConfig::~DHKeyPairGenerationConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyPairGenerationConfig::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyPairGenerationConfig::Configure(std::unique_ptr<evp_pkey_ctx_st, node::FunctionDeleter<evp_pkey_ctx_st, &EVP_PKEY_CTX_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::~PBKDF2Job()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAPSSKeyPairGenerationConfig::Configure(std::unique_ptr<evp_pkey_ctx_st, node::FunctionDeleter<evp_pkey_ctx_st, &EVP_PKEY_CTX_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::~PBKDF2Job()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::~KeyObjectTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::~RandomBytesJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::~GenerateKeyPairJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::~ScryptJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::~KeyObjectTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::~RandomBytesJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::NewSessionDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::RequestOCSP(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::~ScryptJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::EndParser(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::IsSessionReused(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::~GenerateKeyPairJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetCertificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetProtocol(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetCipher(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetPeerCertificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetTLSTicket(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::SecureContext::GetCertificate<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::SecureContext::GetCertificate<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetALPNNegotiatedProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetMaxSendFragment(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::VerifyError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetALPNProtocols(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetEphemeralKeyInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Job::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ThrowError(v8::Local<v8::Value> (*)(v8::Local<v8::String>), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetProtoMethodNoSideEffect(v8::Local<v8::FunctionTemplate>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::BaseObject(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetSharedSigalgs(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::~NativeKeyObject()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::~DiffieHellman()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::~SignBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::~Hmac()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::~CipherBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::~KeyObjectHandle()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::~Hmac()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::~CipherBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::~KeyObjectHandle()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::~NativeKeyObject()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::~DiffieHellman()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::~Verify()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::~Sign()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::~SignBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::~Verify()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::~Sign()",
    "type": "CPP"
  },
  {
    "name": "node::AllocatedBuffer::AllocateManaged(node::Environment*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::AllocatedBuffer::Resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::TLSExtStatusCallback(ssl_st*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::InlineDecoder::Decode(node::Environment*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::ConfigureSecureContext(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetCACerts(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetSessionCallback(ssl_st*, unsigned char const*, int, int*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::NewSessionCallback(ssl_st*, ssl_session_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::KeylogCallback(ssl_st const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::OnClientHello(void*, node::crypto::ClientHelloParser::ClientHello const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::DestroySSL()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SSLCertCallback(ssl_st*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::WaitForCertCb(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob::Run(std::unique_ptr<node::crypto::CryptoJob, std::default_delete<node::crypto::CryptoJob> >, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferViewContents<char, 64ul>::ArrayBufferViewContents(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::CipherBase>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::CipherBase*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Hmac>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Hmac*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Hash>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Hash*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferViewContents<unsigned char, 64ul>::Read(v8::Local<v8::ArrayBufferView>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SelectALPNCallback(ssl_st*, unsigned char const**, unsigned char*, unsigned char const*, unsigned int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::LoadSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<x509_st*, std::allocator<x509_st*> >::_M_realloc_insert<x509_st* const&>(__gnu_cxx::__normal_iterator<x509_st**, std::vector<x509_st*, std::allocator<x509_st*> > >, x509_st* const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_encrypt_init, &EVP_PKEY_encrypt>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_decrypt_init, &EVP_PKEY_decrypt>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_sign_init, &EVP_PKEY_sign>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_verify_recover_init, &EVP_PKEY_verify_recover>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, void const*, unsigned long, unsigned char const*, int, node::AllocatedBuffer*)",
    "type": "CPP"
  },
  {
    "name": "node::AllocatedBuffer::ToBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetPeerFinished(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::GetFinished(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::crypto::SecureContext, false>::BaseObjectPtrImpl(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorVector::ToException(node::Environment*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorVector::Capture()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::Renegotiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::CertCbDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::ExportKeyingMaterial(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GenerateKeyPairJob::AfterThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetOCSPResponse(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::SetSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_verify_recover_init, &EVP_PKEY_verify_recover>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_sign_init, &EVP_PKEY_sign>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_decrypt_init, &EVP_PKEY_decrypt>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_encrypt_init, &EVP_PKEY_encrypt>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSL_CTX_get_issuer(ssl_ctx_st*, x509_st*, x509_st**)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LogSecret(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, char const*, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSSLOCSPResponse(node::Environment*, ssl_st*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetTLSSession(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetTLSSession(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, std::unique_ptr<ssl_session_st, node::FunctionDeleter<ssl_session_st, &SSL_SESSION_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetTLSSession(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetTLSSession(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyPeerCertificate(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::UseSNIContext(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, node::BaseObjectPtrImpl<node::crypto::SecureContext, false>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloServerName(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetServerName(ssl_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetGroups(node::crypto::SecureContext*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509ErrorCode(long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidationErrorReason(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidationErrorCode(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherName(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherStandardName(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherVersion(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloCiphers(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherInfo(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetEphemeralKey(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECPointToBuffer(node::Environment*, ec_group_st const*, ec_point_st const*, point_conversion_form_t, char const**)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509ToObject(node::Environment*, x509_st*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetPeerCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::New(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::~NodeBIO()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::~NodeBIO()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Ctrl(bio_st*, int, long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Free(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::New(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Peek(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::PeekMultiple(char**, unsigned long*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::GetMethod()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::NewFixed(char const*, unsigned long, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::TryMoveReadHead()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::FreeEmpty()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Read(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Read(bio_st*, char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::IndexOf(char, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Gets(bio_st*, char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::PeekWritable(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Commit(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::TryAllocateForWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Write(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Write(bio_st*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Puts(bio_st*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Reset()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::FromBIO(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseRecordHeader(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseExtension(unsigned short, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseTLSClientHello(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseHeader(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::Parse(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Error() const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::Error() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableCertCb(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableKeylogCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnablePskCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableSessionCallbacks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EnableTrace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetWriteQueueSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetServername(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SetServername(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SetVerifyMode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::PskClientCallback(ssl_st*, char const*, char*, unsigned int, unsigned char*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::PskServerCallback(ssl_st*, char const*, unsigned char*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::InitSSL()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::GetSSLError(int, int*, std::string*)",
    "type": "CPP"
  },
  {
    "name": "_register_tls_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SelectSNIContextCallback(ssl_st*, int*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SetPskIdentityHint(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SSLInfoCallback(ssl_st const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::TLSWrap(node::Environment*, v8::Local<v8::Object>, node::crypto::SSLWrap<node::TLSWrap>::Kind, node::StreamBase*, node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Wrap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::InvokeQueued(int, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::DestroySSL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ClearIn()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::EncOut()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::ClearOut()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::NewSessionDoneCb()",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnClientHelloParseEnd(void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TLSWrap::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TLSWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::~SSLWrap()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSLWrap<node::TLSWrap>::~SSLWrap()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::TLSWrap, false>::BaseObjectPtrImpl(node::TLSWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Write(uv_buf_t*, unsigned long, uv_stream_s*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetConfig()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LoadJavaScriptSource()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_get_insert_unique_pos(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<std::string const, node::UnionBytes> >*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [13], node::UnionBytes>(char const (&) [13], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [20], node::UnionBytes>(char const (&) [20], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [5], node::UnionBytes>(char const (&) [5], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [15], node::UnionBytes>(char const (&) [15], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [12], node::UnionBytes>(char const (&) [12], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [18], node::UnionBytes>(char const (&) [18], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [3], node::UnionBytes>(char const (&) [3], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [17], node::UnionBytes>(char const (&) [17], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [4], node::UnionBytes>(char const (&) [4], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [6], node::UnionBytes>(char const (&) [6], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [7], node::UnionBytes>(char const (&) [7], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [14], node::UnionBytes>(char const (&) [14], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [8], node::UnionBytes>(char const (&) [8], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [10], node::UnionBytes>(char const (&) [10], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [19], node::UnionBytes>(char const (&) [19], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [21], node::UnionBytes>(char const (&) [21], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [26], node::UnionBytes>(char const (&) [26], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [22], node::UnionBytes>(char const (&) [22], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [16], node::UnionBytes>(char const (&) [16], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [23], node::UnionBytes>(char const (&) [23], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [27], node::UnionBytes>(char const (&) [27], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [29], node::UnionBytes>(char const (&) [29], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [24], node::UnionBytes>(char const (&) [24], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [30], node::UnionBytes>(char const (&) [30], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [37], node::UnionBytes>(char const (&) [37], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [28], node::UnionBytes>(char const (&) [28], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [25], node::UnionBytes>(char const (&) [25], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [36], node::UnionBytes>(char const (&) [36], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [32], node::UnionBytes>(char const (&) [32], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [31], node::UnionBytes>(char const (&) [31], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::string const, node::UnionBytes> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, node::UnionBytes>, std::_Select1st<std::pair<std::string const, node::UnionBytes> >, std::less<std::string>, std::allocator<std::pair<std::string const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [33], node::UnionBytes>(char const (&) [33], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::asBinary(node::inspector::protocol::Binary*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asBoolean(bool*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asDouble(double*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asInteger(int*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::asBinary(node::inspector::protocol::Binary*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::asString(std::string*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::~ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::~ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::~Callback()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::~Callback()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::ErrorSupport()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::~ErrorSupport()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::setName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::setName(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::pop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::hasErrors()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::errors()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::toJSONString() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::escapeLatinStringForJSON(unsigned char const*, unsigned int, std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::escapeWideStringForJSON(unsigned short const*, unsigned int, std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::Object(std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::~Object()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::OK()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::Error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::InternalError()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::InvalidParams(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::FallThrough()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::WeakPtr::WeakPtr(node::inspector::protocol::DispatcherBase*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::WeakPtr::~WeakPtr()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::Callback(std::unique_ptr<node::inspector::protocol::DispatcherBase::WeakPtr, std::default_delete<node::inspector::protocol::DispatcherBase::WeakPtr> >, int, std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::fallThroughIfActive()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::DispatcherBase(node::inspector::protocol::FrontendChannel*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::~DispatcherBase()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::~DispatcherBase()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::sendResponse(int, node::inspector::protocol::DispatchResponse const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::sendIfActive(std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::DispatchResponse const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::sendResponse(int, node::inspector::protocol::DispatchResponse const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::reportProtocolError(int, node::inspector::protocol::DispatchResponse::ErrorCode, std::string const&, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::clearFrontend()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::UberDispatcher(node::inspector::protocol::FrontendChannel*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::registerBackend(std::string const&, std::unique_ptr<node::inspector::protocol::DispatcherBase, std::default_delete<node::inspector::protocol::DispatcherBase> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::setupRedirects(std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::findDispatcher(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::createResponse(int, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::createNotification(std::string const&, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::InternalResponse(int, std::string const&, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::ReadTokenStart(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::cbor::MajorType*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::InitialByteForEnvelope()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::InitialByteFor32BitLengthByteString()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::IsCBORMessage(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeTrue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFalse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeNull()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeIndefiniteLengthArrayStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeIndefiniteLengthMapStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeStop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString16(node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeBinary(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeDouble(double, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStart(std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStop(std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStop(std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::NewCBOREncoder(std::vector<unsigned char, std::allocator<unsigned char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::NewCBOREncoder(std::string*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::~CBORTokenizer()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::TokenTag() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::Status() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetInt32() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetDouble() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString8() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString16WireRep() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetBinary() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetEnvelopeContents() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::ReadNextToken(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::CBORTokenizer(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::Next()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::EnterEnvelope()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::SetToken(node::inspector::protocol::cbor::CBORTokenTag, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::SetError(node::inspector::protocol::Error)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::NewJSONEncoder(node::inspector::protocol::json::Platform const*, std::vector<unsigned char, std::allocator<unsigned char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::NewJSONEncoder(node::inspector::protocol::json::Platform const*, std::string*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Status::ToASCIIString(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Status::ToASCIIString() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::~DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::~DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::~UberDispatcher()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::~UberDispatcher()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::WriteTokenStart(node::inspector::protocol::cbor::MajorType, unsigned long, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeInt32(int, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString8(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::AppendString8EntryToCBORMap(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromUTF16(node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::WriteTokenStart(node::inspector::protocol::cbor::MajorType, unsigned long, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeInt32(int, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString8(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromUTF16(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::AppendString8EntryToCBORMap(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString16(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::get(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getBoolean(std::string const&, bool*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getInteger(std::string const&, int*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getDouble(std::string const&, double*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getString(std::string const&, std::string*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getObject(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getArray(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::parseCommand(node::inspector::protocol::Value*, int*, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::writeJSON(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::booleanProperty(std::string const&, bool) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::integerProperty(std::string const&, int) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::doubleProperty(std::string const&, double) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::dispatch(int, std::string const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::addError(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::addError(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::push()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setArray(std::string const&, std::unique_ptr<node::inspector::protocol::ListValue, std::default_delete<node::inspector::protocol::ListValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setObject(std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setValue(std::string const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setBoolean(std::string const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setInteger(std::string const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setDouble(std::string const&, double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setString(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::parseJSONCharacters(unsigned short const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::parseJSONCharacters(unsigned char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::parseBinary(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::pushValue(std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromLatin1(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromLatin1(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeDouble(double, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeBinary(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStart(std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::ParseCBOR(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertCBORToJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertCBORToJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::remove(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::weakPtr()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ParseJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ParseJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::~Value()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::~FundamentalValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::~BinaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::~Value()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::~FundamentalValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::~BinaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::~StringValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::~StringValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::~InternalResponse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::~SerializedValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::~SerializedValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::~InternalResponse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::create(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::create()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::DispatcherBase, std::default_delete<node::inspector::protocol::DispatcherBase> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::DispatcherBase, std::default_delete<node::inspector::protocol::DispatcherBase> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::internals::WriteTokenStartTmpl<std::string>(node::inspector::protocol::cbor::MajorType, unsigned long, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeString8Tmpl<std::string>(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromUTF16Tmpl<std::string>(node::inspector::protocol::span<unsigned short>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeBinaryTmpl<std::string>(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "bool node::inspector::protocol::cbor::EncodeStopTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "bool node::inspector::protocol::cbor::EncodeStopTmpl<std::string>(std::string*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned char, std::allocator<unsigned char> >::emplace_back<unsigned char>(unsigned char&&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::internals::WriteTokenStartTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::cbor::MajorType, unsigned long, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeString8Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromUTF16Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<char, std::allocator<char> >::emplace_back<char>(char&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::string const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::DictionaryValue::set<node::inspector::protocol::Value>(std::string const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >*, std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > > >, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >::emplace_back<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >(std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromLatin1Tmpl<std::string>(node::inspector::protocol::span<unsigned char>, std::string*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromLatin1Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeStartTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned short, std::allocator<unsigned short> >::_M_realloc_insert<unsigned short>(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::inspector::protocol::DispatcherBase::WeakPtr*, node::inspector::protocol::DispatcherBase::WeakPtr*, std::allocator<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Identity, std::equal_to<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::hash<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::inspector::protocol::DispatcherBase::WeakPtr*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned short, std::allocator<unsigned short> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned short, std::allocator<unsigned short> >::_M_realloc_insert<unsigned short const&>(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::inspector::protocol::cbor::EnvelopeEncoder, std::allocator<node::inspector::protocol::cbor::EnvelopeEncoder> >::_M_realloc_insert<>(__gnu_cxx::__normal_iterator<node::inspector::protocol::cbor::EnvelopeEncoder*, std::vector<node::inspector::protocol::cbor::EnvelopeEncoder, std::allocator<node::inspector::protocol::cbor::EnvelopeEncoder> > >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::disable(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::enable(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::detach(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::sendMessageToWorker(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::attachedToWorker(std::string const&, std::unique_ptr<node::inspector::protocol::NodeWorker::WorkerInfo, std::default_delete<node::inspector::protocol::NodeWorker::WorkerInfo> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::detachedFromWorker(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::receivedMessageFromWorker(std::string const&, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::sendRawJSONNotification(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeWorker::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::dispatch(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::~InternalRawNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::~ReceivedMessageFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::~DetachedFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::~DetachedFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::~InternalRawNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::~ReceivedMessageFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::~AttachedToWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::~AttachedToWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::stop(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::getCategories(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::dataCollected(std::unique_ptr<node::inspector::protocol::Array<node::inspector::protocol::DictionaryValue>, std::default_delete<node::inspector::protocol::Array<node::inspector::protocol::DictionaryValue> > >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::tracingComplete()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::sendRawJSONNotification(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeTracing::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::dispatch(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::start(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::~DataCollectedNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::~DataCollectedNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::~TraceConfig()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::~TraceConfig()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::serializeToJSON()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, std::allocator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >*, std::vector<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, std::allocator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > > > >, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::canDispatch(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::notifyWhenWaitingForDisconnect(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::waitingForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::sendRawJSONNotification(std::string)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeRuntime::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::dispatch(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, void (node::inspector::protocol::NodeRuntime::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::string const, void (node::inspector::protocol::NodeRuntime::DispatcherImpl::*)(int, std::string const&, std::string const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::PostGarbageCollection()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::~Relocatable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::~FunctionCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::~PropertyCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CustomArguments<v8::FunctionCallbackInfo<v8::Value> >::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CustomArguments<v8::PropertyCallbackInfo<v8::Value> >::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::~Relocatable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::~PropertyCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::~FunctionCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::PropertyCallbackArguments(v8::internal::Isolate*, v8::internal::Object, v8::internal::Object, v8::internal::JSObject, v8::Maybe<v8::internal::ShouldThrow>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::FunctionCallbackArguments(v8::internal::Isolate*, v8::internal::Object, v8::internal::HeapObject, v8::internal::Object, v8::internal::HeapObject, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateRemoteObject(v8::internal::Handle<v8::internal::ObjectTemplateInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::Intrinsic, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddAccessorProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddNativeDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::AccessorInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::CreateApiFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::InstanceType, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateFunction(v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateObject(v8::internal::Isolate*, v8::internal::Handle<v8::internal::ObjectTemplateInfo>, v8::internal::Handle<v8::internal::JSReceiver>)",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::~Extension()",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::GetNativeFunctionTemplate(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::TracePrologue(v8::EmbedderHeapTracer::TraceFlags)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::TraceEpilogue(v8::EmbedderHeapTracer::TraceSummary*)",
    "type": "CPP"
  },
  {
    "name": "v8::TaskRunner::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "v8::OutputStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ReadOnlySpace::Available()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HeapSnapshotJSONSerializer::StringsMatch(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ExternalSourceStream::SetBookmark()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::GetWasmModuleTransferId(v8::Isolate*, v8::Local<v8::WasmModuleObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::IsRootForNonTracingGC(v8::TracedGlobal<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (), v8::base::CallOnce<void>(std::atomic<unsigned char>*, v8::base::OneArgFunction<void*>::type, void*)::{lambda()#1}>::_M_invoke(std::_Any_data const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<v8::base::CallOnce<void>(std::atomic<unsigned char>*, v8::base::OneArgFunction<void*>::type, void*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<v8::base::CallOnce<void>(std::atomic<unsigned char>*, v8::base::OneArgFunction<void*>::type, void*)::{lambda()#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ExternalSourceStream::ResetToBookmark()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::ResetHandleInNonTracingGC(v8::TracedReference<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::ReallocateBufferMemory(void*, unsigned long, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::FreeBufferMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::~Extension()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Space::CommittedMemory()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InterruptsScope::~InterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InterruptsScope::~InterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PostponeInterruptsScope::~PostponeInterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PostponeInterruptsScope::~PostponeInterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::ProgramEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::IdleEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::GCEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::RootEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::LazyInstanceImpl<v8::internal::CodeEntry, v8::base::DynamicallyAllocatedInstanceTrait<v8::internal::CodeEntry>, v8::internal::CodeEntry::UnresolvedEntryCreateTrait, v8::base::ThreadSafeInitOnceTrait, v8::base::LeakyInstanceTrait<v8::internal::CodeEntry> >::InitInstance(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::Allocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::TypeProfile*, std::default_delete<v8::internal::TypeProfile>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::Coverage*, std::default_delete<v8::internal::Coverage>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::GetWasmModuleFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::GetSharedArrayBufferFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScope::~HandleScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::heap_internals::GenerationalBarrierInternal(v8::internal::HeapObject, unsigned long, v8::internal::HeapObject)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::MarkingBarrier(v8::internal::HeapObject, v8::internal::FullObjectSlot, v8::internal::HeapObject)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ReadOnlyHeap::GetReadOnlyRoots(v8::internal::HeapObject)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FixedArray::set(int, v8::internal::Object)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::tracing::ScopedTracer::~ScopedTracer()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::RuntimeCallTimerScope::RuntimeCallTimerScope(v8::internal::Isolate*, v8::internal::RuntimeCallCounterId)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PrototypeIterator::Advance()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::script() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionTemplateInfo::SetAccessCheckInfo(v8::internal::Isolate*, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::String::Flatten(v8::internal::Isolate*, v8::internal::Handle<v8::internal::String>, v8::internal::AllocationType)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::LookupIterator::LookupIterator(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Name>, unsigned long, v8::internal::Handle<v8::internal::JSReceiver>, v8::internal::LookupIterator::Configuration)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::LookupIterator::Key::Key(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "unibrow::Utf8::Encode(char*, unsigned int, int, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Utils::ReportApiFailure(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetSnapshotDataBlob(v8::StartupData*)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::SnapshotCreator(v8::Isolate*, long const*, v8::StartupData*)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::SnapshotCreator(long const*, v8::StartupData*)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::~SnapshotCreator()",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::GetIsolate()",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::AddData(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::AddData(v8::Local<v8::Context>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::StartupData::CanBeRehashed() const",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetDcheckErrorHandler(void (*)(char const*, int, char const*))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFlagsFromString(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFlagsFromString(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFlagsFromCommandLine(int*, char**, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::RegisteredExtension::RegisteredExtension(std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >)",
    "type": "CPP"
  },
  {
    "name": "v8::RegisteredExtension::Register(std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >)",
    "type": "CPP"
  },
  {
    "name": "v8::RegisteredExtension::UnregisterAll()",
    "type": "CPP"
  },
  {
    "name": "v8::RegisterExtension(std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >)",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::Extension(char const*, char const*, int, char const**, int)",
    "type": "CPP"
  },
  {
    "name": "v8::ResourceConstraints::ConfigureDefaultsFromHeapSize(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ResourceConstraints::ConfigureDefaults(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ResourceConstraints::max_semi_space_size_in_kb() const",
    "type": "CPP"
  },
  {
    "name": "v8::ResourceConstraints::set_max_semi_space_size_in_kb(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::GlobalizeReference(v8::internal::Isolate*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::SetDefaultContext(v8::Local<v8::Context>, v8::SerializeInternalFieldsCallback)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::GlobalizeTracedReference(v8::internal::Isolate*, unsigned long*, unsigned long*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::CopyGlobalReference(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::MoveGlobalReference(unsigned long**, unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::MoveTracedGlobalReference(unsigned long**, unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::CopyTracedGlobalReference(unsigned long const* const*, unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::MakeWeak(unsigned long*, void*, void (*)(v8::WeakCallbackInfo<void> const&), v8::WeakCallbackType)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::MakeWeak(unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::ClearWeak(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::AnnotateStrongRetainer(unsigned long*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::DisposeGlobal(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::DisposeTracedGlobal(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFinalizationCallbackTraced(unsigned long*, void*, void (*)(v8::WeakCallbackInfo<void> const&))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::Eternalize(v8::Isolate*, v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::FromJustIsNothing()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::ToLocalEmpty()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InternalFieldOutOfBounds(int)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::HandleScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::Initialize(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::~HandleScope()",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::NumberOfHandles(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::CreateHandle(v8::internal::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::EscapableHandleScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::Escape(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::SealHandleScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::~SealHandleScope()",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::Enter()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::Exit()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::BackupIncumbentScope::BackupIncumbentScope(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::BackupIncumbentScope::~BackupIncumbentScope()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetNumberOfEmbedderDataFields()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SlowGetEmbedderData(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetEmbedderData(int, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SlowGetAlignedPointerFromEmbedderData(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetAlignedPointerInEmbedderData(int, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::Set(v8::Local<v8::Name>, v8::Local<v8::Data>, v8::PropertyAttribute)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetPrivate(v8::Local<v8::Private>, v8::Local<v8::Data>, v8::PropertyAttribute)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetAccessorProperty(v8::Local<v8::Name>, v8::Local<v8::FunctionTemplate>, v8::Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::PrototypeTemplate()",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetPrototypeProviderTemplate(v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::Inherit(v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::Signature::New(v8::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::AccessorSignature::New(v8::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetCallHandler(void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::SideEffectType, v8::CFunction const*)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::NewWithCache(v8::Isolate*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Private>, v8::Local<v8::Value>, v8::Local<v8::Signature>, int, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::InstanceTemplate()",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetLength(int)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetClassName(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetAcceptAnyReceiver(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::ReadOnlyPrototype()",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::RemovePrototype()",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::New(v8::Isolate*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType, v8::CFunction const*)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::New(v8::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::New(v8::internal::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetNativeDataProperty(v8::Local<v8::String>, void (*)(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetNativeDataProperty(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetLazyDataProperty(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetIntrinsicDataProperty(v8::Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessor(v8::Local<v8::String>, void (*)(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessor(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetHandler(v8::NamedPropertyHandlerConfiguration const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::MarkAsUndetectable()",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessCheckCallback(bool (*)(v8::Local<v8::Context>, v8::Local<v8::Object>, v8::Local<v8::Value>), v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessCheckCallbackAndHandler(bool (*)(v8::Local<v8::Context>, v8::Local<v8::Object>, v8::Local<v8::Value>), v8::NamedPropertyHandlerConfiguration const&, v8::IndexedPropertyHandlerConfiguration const&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetHandler(v8::IndexedPropertyHandlerConfiguration const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetCallAsFunctionHandler(void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::InternalFieldCount()",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetInternalFieldCount(int)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::IsImmutableProto()",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetImmutableProto()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CachedData::CachedData(unsigned char const*, int, v8::ScriptCompiler::CachedData::BufferPolicy)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CachedData::~CachedData()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StreamedSource::StreamedSource(v8::ScriptCompiler::ExternalSourceStream*, v8::ScriptCompiler::StreamedSource::Encoding)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StreamedSource::StreamedSource(std::unique_ptr<v8::ScriptCompiler::ExternalSourceStream, std::default_delete<v8::ScriptCompiler::ExternalSourceStream> >, v8::ScriptCompiler::StreamedSource::Encoding)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StreamedSource::~StreamedSource()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::BindToCurrentContext()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetId()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetLineNumber(int)",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetScriptName()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetSourceURL()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetSourceMappingURL()",
    "type": "CPP"
  },
  {
    "name": "v8::Script::Run(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptOrModule::GetResourceName()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptOrModule::GetHostDefinedOptions()",
    "type": "CPP"
  },
  {
    "name": "v8::Script::GetUnboundScript()",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::New(v8::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::Length() const",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::Set(v8::Isolate*, int, v8::Local<v8::Primitive>)",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::Get(v8::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetStatus() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetException() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetModuleRequestsLength() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetModuleRequest(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetModuleRequestLocation(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetModuleNamespace()",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetUnboundModuleScript()",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetIdentityHash() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::InstantiateModule(v8::Local<v8::Context>, v8::MaybeLocal<v8::Module> (*)(v8::Local<v8::Context>, v8::Local<v8::String>, v8::Local<v8::Module>))",
    "type": "CPP"
  },
  {
    "name": "v8::Module::Evaluate(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Module::CreateSyntheticModule(v8::Isolate*, v8::Local<v8::String>, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > > const&, v8::MaybeLocal<v8::Value> (*)(v8::Local<v8::Context>, v8::Local<v8::Module>))",
    "type": "CPP"
  },
  {
    "name": "v8::Module::SetSyntheticModuleExport(v8::Local<v8::String>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ScriptStreamingTask::Run()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StartStreamingScript(v8::Isolate*, v8::ScriptCompiler::StreamedSource*, v8::ScriptCompiler::CompileOptions)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::Compile(v8::Local<v8::Context>, v8::ScriptCompiler::StreamedSource*, v8::Local<v8::String>, v8::ScriptOrigin const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CachedDataVersionTag()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CreateCodeCache(v8::Local<v8::UnboundScript>)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CreateCodeCache(v8::Local<v8::UnboundModuleScript>)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CreateCodeCacheForFunction(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::TryCatch(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::~TryCatch()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::HasCaught() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::CanContinue() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::HasTerminated() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::ReThrow()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::Exception() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::StackTrace(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::StackTrace(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::Message() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::Reset()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::ResetInternal()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::SetVerbose(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::IsVerbose() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::SetCaptureMessage(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Message::Get() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetIsolate() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetScriptOrigin() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetScriptResourceName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStackTrace() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetLineNumber(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStartPosition() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetEndPosition() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::ErrorLevel() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStartColumn() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetWasmFunctionIndex() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStartColumn(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetEndColumn() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetEndColumn(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::IsSharedCrossOrigin() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::IsOpaque() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetSourceLine(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::PrintCurrentStackTrace(v8::Isolate*, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "v8::StackTrace::GetFrame(v8::Isolate*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "v8::StackTrace::GetFrameCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackTrace::CurrentStackTrace(v8::Isolate*, int, v8::StackTrace::StackTraceOptions)",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetLineNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetColumn() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptId() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptName() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptNameOrSourceURL() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetFunctionName() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsEval() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsConstructor() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsWasm() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsUserJavaScript() const",
    "type": "CPP"
  },
  {
    "name": "v8::JSON::Parse(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::JSON::Stringify(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::ValueSerializer(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::ValueSerializer(v8::Isolate*, v8::ValueSerializer::Delegate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::~ValueSerializer()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteHeader()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::SetTreatArrayBufferViewsAsHostObjects(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteValue(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Release()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::TransferArrayBuffer(unsigned int, v8::Local<v8::ArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteUint32(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteUint64(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteDouble(double)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteRawBytes(void const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ValueDeserializer(v8::Isolate*, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ValueDeserializer(v8::Isolate*, unsigned char const*, unsigned long, v8::ValueDeserializer::Delegate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::~ValueDeserializer()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadHeader(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::SetSupportsLegacyWireFormat(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::GetWireFormatVersion() const",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadValue(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::TransferArrayBuffer(unsigned int, v8::Local<v8::ArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::TransferSharedArrayBuffer(unsigned int, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadUint32(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadUint64(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadDouble(double*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadRawBytes(unsigned long, void const**)",
    "type": "CPP"
  },
  {
    "name": "v8::Value::FullIsUndefined() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::FullIsNull() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsTrue() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFalse() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::FullIsString() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSymbol() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArrayBuffer() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArrayBufferView() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsTypedArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint8Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt8Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint16Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt16Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint32Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt32Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFloat32Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFloat64Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint8ClampedArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigUint64Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigInt64Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsDataView() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSharedArrayBuffer() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigInt() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsProxy() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArgumentsObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigIntObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBooleanObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsNumberObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsStringObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSymbolObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsDate() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsMap() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSet() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsWasmModuleObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsWeakMap() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsWeakSet() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBoolean() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsExternal() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt32() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint32() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsNativeError() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsRegExp() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsAsyncFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsGeneratorFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsGeneratorObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsMapIterator() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSetIterator() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsPromise() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsModuleNamespaceObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToString(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToDetailString(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToObject(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToBigInt(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::BooleanValue(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToBoolean(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToNumber(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToInteger(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToInt32(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToUint32(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IsolateFromNeverReadOnlySpaceObject(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ShouldThrowOnError(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Internals::CheckInitializedImpl(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::External::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Function::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Boolean::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Name::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Private::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Number::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Integer::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int32::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Map::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Set::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Resolver::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Proxy::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::AccessorPair::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmValue::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::~BackingStore()",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::Data() const",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::ByteLength() const",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::IsShared() const",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::Reallocate(v8::Isolate*, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::EmptyDeleter(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBufferView::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::TypedArray::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int8Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint16Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int16Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int32Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Float32Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Float64Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8ClampedArray::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigUint64Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt64Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::DataView::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Date::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::StringObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::SymbolObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::NumberObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigIntObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BooleanObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::RegExp::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Value::NumberValue(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IntegerValue(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::Int32Value(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::Uint32Value(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::Equals(v8::Local<v8::Context>, v8::Local<v8::Value>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::StrictEquals(v8::Local<v8::Value>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::SameValue(v8::Local<v8::Value>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::TypeOf(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Value::InstanceOf(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Set(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Set(v8::Local<v8::Context>, unsigned int, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CreateDataProperty(v8::Local<v8::Context>, v8::Local<v8::Name>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CreateDataProperty(v8::Local<v8::Context>, unsigned int, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor()",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor(v8::Local<v8::Value>, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::~PropertyDescriptor()",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::value() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::get() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::set() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_value() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_get() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_set() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::writable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_writable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::set_enumerable(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::enumerable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_enumerable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::set_configurable(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::configurable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_configurable() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::DefineOwnProperty(v8::Local<v8::Context>, v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyAttribute)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::DefineProperty(v8::Local<v8::Context>, v8::Local<v8::Name>, v8::PropertyDescriptor&)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetPrivate(v8::Local<v8::Context>, v8::Local<v8::Private>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Get(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Get(v8::Local<v8::Context>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetPrivate(v8::Local<v8::Context>, v8::Local<v8::Private>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetPropertyAttributes(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetOwnPropertyDescriptor(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetPrototype()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetPrototype(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::FindInstanceInPrototypeChain(v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetPropertyNames(v8::Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetPropertyNames(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetOwnPropertyNames(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetOwnPropertyNames(v8::Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::ObjectProtoToString(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetConstructorName()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetIntegrityLevel(v8::Local<v8::Context>, v8::IntegrityLevel)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Delete(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::DeletePrivate(v8::Local<v8::Context>, v8::Local<v8::Private>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Has(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Delete(v8::Local<v8::Context>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Has(v8::Local<v8::Context>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetAccessor(v8::Local<v8::Context>, v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetAccessorProperty(v8::Local<v8::Name>, v8::Local<v8::Function>, v8::Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetNativeDataProperty(v8::Local<v8::Context>, v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetLazyDataProperty(v8::Local<v8::Context>, v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasOwnProperty(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasPrivate(v8::Local<v8::Context>, v8::Local<v8::Private>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasOwnProperty(v8::Local<v8::Context>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasRealNamedProperty(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasRealIndexedProperty(v8::Local<v8::Context>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasRealNamedCallbackProperty(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasNamedLookupInterceptor()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasIndexedLookupInterceptor()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetRealNamedPropertyInPrototypeChain(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetRealNamedPropertyAttributesInPrototypeChain(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetRealNamedProperty(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetRealNamedPropertyAttributes(v8::Local<v8::Context>, v8::Local<v8::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Clone()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CreationContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetIdentityHash()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsCallable()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsConstructor()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsApiWrapper()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsUndetectable()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CallAsFunction(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CallAsConstructor(v8::Local<v8::Context>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "v8::Function::NewInstanceWithSideEffectType(v8::Local<v8::Context>, int, v8::Local<v8::Value>*, v8::SideEffectType) const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::NewInstance(v8::Local<v8::Context>, int, v8::Local<v8::Value>*) const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "v8::Function::SetName(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetInferredName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetDebugName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetDisplayName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetScriptOrigin() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetScriptLineNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetScriptColumnNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::ScriptId() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetBoundFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Name::GetIdentityHash()",
    "type": "CPP"
  },
  {
    "name": "v8::String::Length() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::IsOneByte() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::Utf8Length(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::WriteUtf8(v8::Isolate*, char*, int, int*, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::WriteOneByte(v8::Isolate*, unsigned char*, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::Write(v8::Isolate*, unsigned short*, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::IsExternal() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::IsExternalOneByte() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::VerifyExternalStringResource(v8::String::ExternalStringResource*) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::VerifyExternalStringResourceBase(v8::String::ExternalStringResourceBase*, v8::String::Encoding) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::GetExternalStringResourceSlow() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::GetExternalStringResourceBaseSlow(v8::String::Encoding*) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::GetExternalOneByteStringResource() const",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::Description() const",
    "type": "CPP"
  },
  {
    "name": "v8::Private::Name() const",
    "type": "CPP"
  },
  {
    "name": "v8::Number::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Boolean::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Integer::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CompileFunctionInContext(v8::Local<v8::Context>, v8::ScriptCompiler::Source*, unsigned long, v8::Local<v8::String>*, unsigned long, v8::Local<v8::Object>*, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason, v8::Local<v8::ScriptOrModule>*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int32::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::InternalFieldCount()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SlowGetInternalField(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetInternalField(int, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SlowGetAlignedPointerFromInternalField(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetAlignedPointerInInternalField(int, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetAlignedPointerInInternalFields(int, int*, void**)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializePlatform(v8::Platform*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::ShutdownPlatform()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::Initialize(int)",
    "type": "CPP"
  },
  {
    "name": "v8::TryHandleWebAssemblyTrapPosix(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::TryHandleSignal(int, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::EnableWebAssemblyTrapHandler(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetEntropySource(bool (*)(unsigned char*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetReturnAddressLocationResolver(unsigned long (*)(unsigned long))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::SharedMemoryStatistics::SharedMemoryStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapStatistics::HeapStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSpaceStatistics::HeapSpaceStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapObjectStatistics::HeapObjectStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapCodeStatistics::HeapCodeStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeICU(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeICUDefaultLocation(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeExternalStartupData(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeExternalStartupDataFromFile(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::GetVersion()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::GetSharedMemoryStatistics(v8::SharedMemoryStatistics*)",
    "type": "CPP"
  },
  {
    "name": "v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal<v8::ObjectTemplate>, v8::MaybeLocal<v8::Value>, unsigned long, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::New(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal<v8::ObjectTemplate>, v8::MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::FromSnapshot(v8::Isolate*, unsigned long, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration*, v8::MaybeLocal<v8::Value>, v8::MicrotaskQueue*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetSecurityToken(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::UseDefaultSecurityToken()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetSecurityToken()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetIsolate()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::Global()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::DetachGlobal()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetExtrasBindingObject()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::AllowCodeGenerationFromStrings(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::IsCodeGenerationFromStringsAllowed()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetErrorMessageForCodeGenerationFromStrings(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetAbortScriptExecution(void (*)(v8::Isolate*, v8::Local<v8::Context>))",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetContinuationPreservedEmbedderData() const",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetContinuationPreservedEmbedderData(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetPromiseHooks(v8::Local<v8::Function>, v8::Local<v8::Function>, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetDataFromSnapshotOnce(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::NewInstance(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Signature::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::AccessorSignature::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::GetFunction(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Function::New(v8::Local<v8::Context>, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::HasInstance(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::External::New(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::External::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromUtf8Literal(v8::Isolate*, char const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromUtf8(v8::Isolate*, char const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromOneByte(v8::Isolate*, unsigned char const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromTwoByte(v8::Isolate*, unsigned short const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "v8::String::Concat(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewExternalTwoByte(v8::Isolate*, v8::String::ExternalStringResource*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewExternalOneByte(v8::Isolate*, v8::String::ExternalOneByteStringResource*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::MakeExternal(v8::String::ExternalStringResource*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::MakeExternal(v8::String::ExternalOneByteStringResource*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::CanMakeExternal()",
    "type": "CPP"
  },
  {
    "name": "v8::String::StringEquals(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetIsolate()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::New(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::New(v8::Isolate*, v8::Local<v8::Value>, v8::Local<v8::Name>*, v8::Local<v8::Value>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::NumberObject::New(v8::Isolate*, double)",
    "type": "CPP"
  },
  {
    "name": "v8::NumberObject::ValueOf() const",
    "type": "CPP"
  },
  {
    "name": "v8::BigIntObject::New(v8::Isolate*, long)",
    "type": "CPP"
  },
  {
    "name": "v8::BigIntObject::ValueOf() const",
    "type": "CPP"
  },
  {
    "name": "v8::BooleanObject::New(v8::Isolate*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::BooleanObject::ValueOf() const",
    "type": "CPP"
  },
  {
    "name": "v8::StringObject::New(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::StringObject::ValueOf() const",
    "type": "CPP"
  },
  {
    "name": "v8::SymbolObject::New(v8::Isolate*, v8::Local<v8::Symbol>)",
    "type": "CPP"
  },
  {
    "name": "v8::SymbolObject::ValueOf() const",
    "type": "CPP"
  },
  {
    "name": "v8::Date::New(v8::Local<v8::Context>, double)",
    "type": "CPP"
  },
  {
    "name": "v8::Date::ValueOf() const",
    "type": "CPP"
  },
  {
    "name": "v8::RegExp::New(v8::Local<v8::Context>, v8::Local<v8::String>, v8::RegExp::Flags)",
    "type": "CPP"
  },
  {
    "name": "v8::RegExp::NewWithBacktrackLimit(v8::Local<v8::Context>, v8::Local<v8::String>, v8::RegExp::Flags, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::RegExp::GetSource() const",
    "type": "CPP"
  },
  {
    "name": "v8::RegExp::GetFlags() const",
    "type": "CPP"
  },
  {
    "name": "v8::RegExp::Exec(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Array::New(v8::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::Array::New(v8::Isolate*, v8::Local<v8::Value>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Array::Length() const",
    "type": "CPP"
  },
  {
    "name": "v8::Map::New(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Map::Size() const",
    "type": "CPP"
  },
  {
    "name": "v8::Map::Clear()",
    "type": "CPP"
  },
  {
    "name": "v8::Map::Get(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Map::Set(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Map::Has(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Map::Delete(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Map::AsArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Set::New(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Set::Size() const",
    "type": "CPP"
  },
  {
    "name": "v8::Set::Clear()",
    "type": "CPP"
  },
  {
    "name": "v8::Set::Add(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Set::Has(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Set::Delete(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Set::AsArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Resolver::New(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Resolver::GetPromise()",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Resolver::Resolve(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Resolver::Reject(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Catch(v8::Local<v8::Context>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Then(v8::Local<v8::Context>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Then(v8::Local<v8::Context>, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::HasHandler()",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Result()",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::State()",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::MarkAsHandled()",
    "type": "CPP"
  },
  {
    "name": "v8::Proxy::GetTarget()",
    "type": "CPP"
  },
  {
    "name": "v8::Proxy::GetHandler()",
    "type": "CPP"
  },
  {
    "name": "v8::Proxy::IsRevoked()",
    "type": "CPP"
  },
  {
    "name": "v8::Proxy::Revoke()",
    "type": "CPP"
  },
  {
    "name": "v8::Proxy::New(v8::Local<v8::Context>, v8::Local<v8::Object>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::CompiledWasmModule::CompiledWasmModule(std::shared_ptr<v8::internal::wasm::NativeModule>, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::CompiledWasmModule::Serialize()",
    "type": "CPP"
  },
  {
    "name": "v8::CompiledWasmModule::GetWireBytesRef()",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObject::GetCompiledModule()",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObjectBuilderStreaming::WasmModuleObjectBuilderStreaming(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObjectBuilderStreaming::GetPromise()",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObjectBuilderStreaming::OnBytesReceived(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObjectBuilderStreaming::Finish()",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObjectBuilderStreaming::Abort(v8::MaybeLocal<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::Allocator::NewDefaultAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::IsExternal() const",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::IsDetachable() const",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::Contents::Contents(void*, unsigned long, void*, unsigned long, v8::ArrayBuffer::Allocator::AllocationMode, void (*)(void*, unsigned long, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::Externalize(std::shared_ptr<v8::BackingStore> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::Detach()",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::ByteLength() const",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::New(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::NewBackingStore(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::NewBackingStore(void*, unsigned long, void (*)(void*, unsigned long, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBufferView::Buffer()",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBufferView::CopyContents(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBufferView::HasBuffer() const",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBufferView::ByteOffset()",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBufferView::ByteLength()",
    "type": "CPP"
  },
  {
    "name": "v8::TypedArray::Length()",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Int8Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Int8Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint16Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint16Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Int16Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Int16Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Int32Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Int32Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Float32Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Float32Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Float64Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Float64Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8ClampedArray::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8ClampedArray::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::BigUint64Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::BigUint64Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt64Array::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt64Array::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::DataView::New(v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::DataView::New(v8::Local<v8::SharedArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::IsExternal() const",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::Contents::Contents(void*, unsigned long, void*, unsigned long, v8::ArrayBuffer::Allocator::AllocationMode, void (*)(void*, unsigned long, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::Externalize(std::shared_ptr<v8::BackingStore> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::ByteLength() const",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::NewBackingStore(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::NewBackingStore(void*, unsigned long, void (*)(void*, unsigned long, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::New(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::For(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::ForApi(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetAsyncIterator(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetHasInstance(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetIsConcatSpreadable(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetIterator(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetMatch(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetReplace(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetSearch(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetSplit(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetToPrimitive(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetToStringTag(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::GetUnscopables(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Private::New(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Private::ForApi(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Number::New(v8::Isolate*, double)",
    "type": "CPP"
  },
  {
    "name": "v8::Integer::New(v8::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::Integer::NewFromUnsigned(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::New(v8::Isolate*, long)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::NewFromUnsigned(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::NewFromWords(v8::Local<v8::Context>, int, int, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::Uint64Value(bool*) const",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::Int64Value(bool*) const",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::WordCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::ToWordsArray(int*, int*, unsigned long*) const",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::ReportExternalAllocationLimitReached()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::CheckMemoryPressure()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetHeapProfiler()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetIdle(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::InContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::ClearKeptObjects()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetCurrentContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Module::SetSyntheticModuleExport(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CompileUnboundInternal(v8::Isolate*, v8::ScriptCompiler::Source*, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CompileUnboundScript(v8::Isolate*, v8::ScriptCompiler::Source*, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::Compile(v8::Local<v8::Context>, v8::ScriptCompiler::Source*, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)",
    "type": "CPP"
  },
  {
    "name": "v8::Script::Compile(v8::Local<v8::Context>, v8::Local<v8::String>, v8::ScriptOrigin*)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CompileModule(v8::Isolate*, v8::ScriptCompiler::Source*, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetEnteredContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetEnteredOrMicrotaskContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetIncumbentContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::ThrowException(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddGCPrologueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*), void*, v8::GCType)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveGCPrologueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddGCEpilogueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*), void*, v8::GCType)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveGCEpilogueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddGCPrologueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags), v8::GCType)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveGCPrologueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddGCEpilogueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags), v8::GCType)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveGCEpilogueCallback(void (*)(v8::Isolate*, v8::GCType, v8::GCCallbackFlags))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetEmbedderHeapTracer(v8::EmbedderHeapTracer*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetEmbedderHeapTracer()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetGetExternallyAllocatedMemoryInBytesCallback(unsigned long (*)())",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::TerminateExecution()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IsExecutionTerminating()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::CancelTerminateExecution()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RequestInterrupt(void (*)(v8::Isolate*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RequestGarbageCollectionForTesting(v8::Isolate::GarbageCollectionType)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetCurrent()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::Allocate()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::DumpAndResetStats()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::DiscardThreadSpecificMetadata()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::Enter()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::Exit()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetAbortOnUncaughtExceptionCallback(bool (*)(v8::Isolate*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetHostCleanupFinalizationGroupCallback(void (*)(v8::Local<v8::Context>, v8::Local<v8::FinalizationGroup>))",
    "type": "CPP"
  },
  {
    "name": "v8::FinalizationGroup::Cleanup(v8::Local<v8::FinalizationGroup>)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetHostImportModuleDynamicallyCallback(v8::MaybeLocal<v8::Promise> (*)(v8::Local<v8::Context>, v8::Local<v8::ScriptOrModule>, v8::Local<v8::String>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetHostInitializeImportMetaObjectCallback(void (*)(v8::Local<v8::Context>, v8::Local<v8::Module>, v8::Local<v8::Object>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetPrepareStackTraceCallback(v8::MaybeLocal<v8::Value> (*)(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Array>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::DisallowJavascriptExecutionScope::DisallowJavascriptExecutionScope(v8::Isolate*, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::DisallowJavascriptExecutionScope::~DisallowJavascriptExecutionScope()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AllowJavascriptExecutionScope::AllowJavascriptExecutionScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AllowJavascriptExecutionScope::~AllowJavascriptExecutionScope()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SuppressMicrotaskExecutionScope::SuppressMicrotaskExecutionScope(v8::Isolate*, v8::MicrotaskQueue*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SuppressMicrotaskExecutionScope::~SuppressMicrotaskExecutionScope()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SafeForTerminationScope::SafeForTerminationScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SafeForTerminationScope::~SafeForTerminationScope()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetDataFromSnapshotOnce(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetHeapStatistics(v8::HeapStatistics*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::NumberOfHeapSpaces()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetHeapSpaceStatistics(v8::HeapSpaceStatistics*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::NumberOfTrackedHeapObjectTypes()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetHeapObjectStatisticsAtLastGC(v8::HeapObjectStatistics*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetHeapCodeAndMetadataStatistics(v8::HeapCodeStatistics*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::MeasureMemory(v8::Local<v8::Context>, v8::MeasureMemoryMode)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::MeasureMemory(std::unique_ptr<v8::MeasureMemoryDelegate, std::default_delete<v8::MeasureMemoryDelegate> >, v8::MeasureMemoryExecution)",
    "type": "CPP"
  },
  {
    "name": "v8::MeasureMemoryDelegate::Default(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Promise::Resolver>, v8::MeasureMemoryMode)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetStackSample(v8::RegisterState const&, void**, unsigned long, v8::SampleInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::NumberOfPhantomHandleResetsSinceLastCall()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetEventLogger(void (*)(char const*, int))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddBeforeCallEnteredCallback(void (*)(v8::Isolate*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveBeforeCallEnteredCallback(void (*)(v8::Isolate*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddCallCompletedCallback(void (*)(v8::Isolate*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveCallCompletedCallback(void (*)(v8::Isolate*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AtomicsWaitWakeHandle::Wake()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetAtomicsWaitCallback(void (*)(v8::Isolate::AtomicsWaitEvent, v8::Local<v8::SharedArrayBuffer>, unsigned long, long, double, v8::Isolate::AtomicsWaitWakeHandle*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetPromiseHook(void (*)(v8::PromiseHookType, v8::Local<v8::Promise>, v8::Local<v8::Value>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetPromiseRejectCallback(void (*)(v8::PromiseRejectMessage))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::EnqueueMicrotask(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetMicrotasksPolicy(v8::MicrotasksPolicy)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetMicrotasksPolicy() const",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetUseCounterCallback(void (*)(v8::Isolate*, v8::Isolate::UseCounterFeature))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetCounterFunction(int* (*)(char const*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetCreateHistogramFunction(void* (*)(char const*, int, int, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetAddHistogramSampleFunction(void (*)(void*, int))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetAddCrashKeyCallback(void (*)(v8::CrashKeyId, std::string const&))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IdleNotificationDeadline(double)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::LowMemoryNotification()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::ContextDisposedNotification(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IsolateInForegroundNotification()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IsolateInBackgroundNotification()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::MemoryPressureNotification(v8::MemoryPressureLevel)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::EnableMemorySavingsMode()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::DisableMemorySavingsMode()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetRAILMode(v8::RAILMode)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IncreaseHeapLimitForDebugging()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RestoreOriginalHeapLimit()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetJitCodeEventHandler(v8::JitCodeEventOptions, void (*)(v8::JitCodeEvent const*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetStackLimit(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetCodeRange(void**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetUnwindState()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::GetJSEntryStubs()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::CopyCodePages(unsigned long, v8::MemoryRange*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetFatalErrorHandler(void (*)(char const*, char const*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetOOMErrorHandler(void (*)(char const*, bool))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetAllowCodeGenerationFromStringsCallback(bool (*)(v8::Local<v8::Context>, v8::Local<v8::String>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetModifyCodeGenerationFromStringsCallback(v8::ModifyCodeGenerationFromStringsResult (*)(v8::Local<v8::Context>, v8::Local<v8::Value>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetAllowWasmCodeGenerationCallback(bool (*)(v8::Local<v8::Context>, v8::Local<v8::String>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetWasmModuleCallback(bool (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetWasmInstanceCallback(bool (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetWasmStreamingCallback(void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetWasmThreadsEnabledCallback(bool (*)(v8::Local<v8::Context>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetWasmLoadSourceMapCallback(v8::Local<v8::String> (*)(v8::Isolate*, char const*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetWasmSimdEnabledCallback(bool (*)(v8::Local<v8::Context>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddNearHeapLimitCallback(unsigned long (*)(void*, unsigned long, unsigned long), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveNearHeapLimitCallback(unsigned long (*)(void*, unsigned long, unsigned long), unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AutomaticallyRestoreInitialHeapLimit(double)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IsDead()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddMessageListenerWithErrorLevel(void (*)(v8::Local<v8::Message>, v8::Local<v8::Value>), int, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddMessageListener(void (*)(v8::Local<v8::Message>, v8::Local<v8::Value>), v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveMessageListeners(void (*)(v8::Local<v8::Message>, v8::Local<v8::Value>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetFailedAccessCheckCallbackFunction(void (*)(v8::Local<v8::Object>, v8::AccessType, v8::Local<v8::Value>))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetCaptureStackTraceForUncaughtExceptions(bool, int, v8::StackTrace::StackTraceOptions)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::VisitExternalResources(v8::ExternalResourceVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IsInUse()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::VisitHandlesWithClassIds(v8::PersistentHandleVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::VisitWeakHandles(v8::PersistentHandleVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::SetAllowAtomicsWait(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::DateTimeConfigurationChangeNotification(v8::Isolate::TimeZoneDetection)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::LocaleConfigurationChangeNotification()",
    "type": "CPP"
  },
  {
    "name": "v8::MicrotaskQueue::New(v8::Isolate*, v8::MicrotasksPolicy)",
    "type": "CPP"
  },
  {
    "name": "v8::MicrotasksScope::MicrotasksScope(v8::Isolate*, v8::MicrotasksScope::Type)",
    "type": "CPP"
  },
  {
    "name": "v8::MicrotasksScope::MicrotasksScope(v8::Isolate*, v8::MicrotaskQueue*, v8::MicrotasksScope::Type)",
    "type": "CPP"
  },
  {
    "name": "v8::MicrotasksScope::IsRunningMicrotasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::Utf8Value::Utf8Value(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::String::Utf8Value::~Utf8Value()",
    "type": "CPP"
  },
  {
    "name": "v8::String::Value::Value(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::String::Value::~Value()",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::RangeError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::ReferenceError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::SyntaxError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::TypeError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::WasmCompileError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::WasmLinkError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::WasmRuntimeError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::Error(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::CreateMessage(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Exception::GetStackTrace(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetContextId(v8::Local<v8::Context>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetContextId(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetInspector(v8::Isolate*, v8_inspector::V8Inspector*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetInspector(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetBreakOnNextFunctionCall(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::ClearBreakOnNextFunctionCall(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetInternalProperties(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetCreationContext(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::ChangeBreakOnException(v8::Isolate*, v8::debug::ExceptionBreakState)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetBreakPointsActive(v8::Isolate*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::PrepareStep(v8::Isolate*, v8::debug::StepAction)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::ClearStepping(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::BreakRightNow(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetTerminateOnResume(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::AllFramesOnStackAreBlackboxed(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::GetIsolate() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::OriginOptions() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::WasCompiled() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::IsEmbedded() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::Id() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::LineOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::ColumnOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::LineEnds() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::ContextId() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::IsWasm() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::IsModule() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::GetSourceOffset(v8::debug::Location const&) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::GetSourceLocation(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::SetScriptSource(v8::Local<v8::String>, bool, v8::debug::LiveEditResult*) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::SetBreakpoint(v8::Local<v8::String>, v8::debug::Location*, int*) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::SetBreakpointOnScriptEntry(int*) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::RemoveWasmBreakpoint(int)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::RemoveBreakpoint(v8::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetCurrentPlatform()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::Cast(v8::debug::Script*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::GetDebugSymbolType() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::ExternalSymbolsURL() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::NumFunctions() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::NumImportedFunctions() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::Bytecode() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::GetFunctionRange(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::GetContainingFunction(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::GetFunctionHash(int)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmScript::CodeOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Location::Location(int, int)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Location::Location()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Location::GetLineNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Location::GetColumnNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Location::IsEmpty() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::CompileInspectorScript(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TierDownAllModulesPerIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TierUpAllModulesPerIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetDebugDelegate(v8::Isolate*, v8::debug::DebugDelegate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetAsyncEventDelegate(v8::Isolate*, v8::debug::AsyncEventDelegate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::ResetBlackboxedStateCache(v8::Isolate*, v8::Local<v8::debug::Script>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::EstimatedValueSize(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::PreviewEntries(bool*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetBuiltin(v8::Isolate*, v8::debug::Builtin)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetConsoleDelegate(v8::Isolate*, v8::debug::ConsoleDelegate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::ConsoleCallArguments::ConsoleCallArguments(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::ConsoleCallArguments::ConsoleCallArguments(v8::internal::BuiltinArguments const&)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetStackFrameId(v8::Local<v8::StackFrame>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetDetailedStackTrace(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GeneratorObject::Script()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GeneratorObject::Function()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GeneratorObject::SuspendedLocation()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GeneratorObject::IsSuspended()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GeneratorObject::Cast(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::EvaluateGlobal(v8::Isolate*, v8::Local<v8::String>, v8::debug::EvaluateGlobalMode, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::QueryObjects(v8::Local<v8::Context>, v8::debug::QueryObjectPredicate*, v8::PersistentValueVector<v8::Object, v8::DefaultPersistentValueVectorTraits>*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetReturnValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetNextRandomInt64(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetDebuggingId(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::SetFunctionBreakpoint(v8::Local<v8::Function>, v8::Local<v8::String>, int*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::PostponeInterruptsScope::PostponeInterruptsScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::PostponeInterruptsScope::~PostponeInterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetFunctionName() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::BlockData::StartOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::BlockData::EndOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::BlockData::Count() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::FunctionData::StartOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::FunctionData::EndOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::FunctionData::Count() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::FunctionData::Name() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::FunctionData::BlockCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::FunctionData::HasBlockCoverage() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::FunctionData::GetBlockData(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::ScriptData::GetScript() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::ScriptData::FunctionCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::ScriptData::GetFunctionData(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::ScriptData::ScriptData(unsigned long, std::shared_ptr<v8::internal::Coverage>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::ScriptCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::GetScriptData(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::SelectMode(v8::Isolate*, v8::debug::CoverageMode)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::Entry::SourcePosition() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::Entry::Types() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::ScriptData::ScriptData(unsigned long, std::shared_ptr<v8::internal::TypeProfile>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::ScriptData::GetScript() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::SelectMode(v8::Isolate*, v8::debug::TypeProfileMode)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::ScriptCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::GetScriptData(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WeakMap::Get(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WeakMap::Set(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WeakMap::New(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::AccessorPair::getter()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::AccessorPair::setter()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::AccessorPair::IsAccessorPair(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmValue::value_type()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmValue::bytes()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmValue::ref()",
    "type": "CPP"
  },
  {
    "name": "v8::debug::WasmValue::IsWasmValue(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetMessageFromPromise(v8::Local<v8::Promise>)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetFunctionNameStr() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetScriptId() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetScriptResourceName() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetScriptResourceNameStr() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::IsScriptSharedCrossOrigin() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetLineNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetColumnNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetHitLineCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetLineTicks(v8::CpuProfileNode::LineTick*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetBailoutReason() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetHitCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetNodeId() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetSourceType() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetChildrenCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetChild(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetParent() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfileNode::GetDeoptInfos() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::Delete()",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::GetTitle() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::GetTopDownRoot() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::GetSample(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::GetSampleTimestamp(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::GetStartTime() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::GetEndTime() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfile::GetSamplesCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::New(v8::Isolate*, v8::CpuProfilingNamingMode, v8::CpuProfilingLoggingMode)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfilingOptions::CpuProfilingOptions(v8::CpuProfilingMode, unsigned int, int, v8::MaybeLocal<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfilingOptions::raw_filter_context() const",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::CollectSample(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::SetSamplingInterval(int)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::SetUsePreciseSampling(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::StartProfiling(v8::Local<v8::String>, v8::CpuProfilingOptions)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::StartProfiling(v8::Local<v8::String>, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::StartProfiling(v8::Local<v8::String>, v8::CpuProfilingMode, bool, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::StopProfiling(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::CpuProfiler::UseDetailedSourcePositionsForProfiling(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetCodeStartAddress()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetCodeSize()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetFunctionName()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetScriptName()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetScriptLine()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetScriptColumn()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetCodeType()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetComment()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetPreviousCodeStartAddress()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEvent::GetCodeEventTypeName(v8::CodeEventType)",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEventHandler::CodeEventHandler(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEventHandler::~CodeEventHandler()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEventHandler::~CodeEventHandler()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEventHandler::Enable()",
    "type": "CPP"
  },
  {
    "name": "v8::CodeEventHandler::Disable()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphEdge::GetType() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphEdge::GetName() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphEdge::GetFromNode() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphEdge::GetToNode() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphNode::GetType() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphNode::GetName() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphNode::GetId() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphNode::GetShallowSize() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphNode::GetChildrenCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapGraphNode::GetChild(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSnapshot::Delete()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSnapshot::GetRoot() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSnapshot::GetNodeById(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSnapshot::GetNodesCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSnapshot::GetNode(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSnapshot::GetMaxSnapshotJSObjectId() const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSnapshot::Serialize(v8::OutputStream*, v8::HeapSnapshot::SerializationFormat) const",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::GetSnapshotCount()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::GetHeapSnapshot(int)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::GetObjectId(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::GetObjectId(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::FindObjectById(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::ClearObjectIds()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::TakeHeapSnapshot(v8::ActivityControl*, v8::HeapProfiler::ObjectNameResolver*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::StartTrackingHeapObjects(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::StopTrackingHeapObjects()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::GetHeapStats(v8::OutputStream*, long*)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::StartSamplingHeapProfiler(unsigned long, int, v8::HeapProfiler::SamplingFlags)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::StopSamplingHeapProfiler()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::GetAllocationProfile()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::DeleteAllHeapSnapshots()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::AddBuildEmbedderGraphCallback(void (*)(v8::Isolate*, v8::EmbedderGraph*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::HeapProfiler::RemoveBuildEmbedderGraphCallback(void (*)(v8::Isolate*, v8::EmbedderGraph*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::SetStackStart(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::NotifyEmptyEmbedderStack()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::FinalizeTracing()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::GarbageCollectionForTesting(cppgc::EmbedderStackState)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::RegisterEmbedderReference(v8::TracedReferenceBase<v8::Data> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::IterateTracedGlobalHandles(v8::EmbedderHeapTracer::TracedGlobalHandleVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::CTypeInfo::GetWrapperInfo() const",
    "type": "CPP"
  },
  {
    "name": "v8::CFunction::CFunction(void const*, v8::CFunctionInfo const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::FreeThreadResources()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::ArchiveThread(char*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::ArchiveSpacePerThread()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::RestoreThread(char*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::IterateThis(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::Iterate(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::Iterate(v8::internal::RootVisitor*, char*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::BeginDeferredScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeferredHandles::~DeferredHandles()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeferredHandles::Iterate(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InvokeAccessorGetterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InvokeFunctionCallback(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InvokeFinalizationRegistryCleanupFromTask(v8::internal::Handle<v8::internal::Context>, v8::internal::Handle<v8::internal::JSFinalizationRegistry>, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::Object> v8::internal::FactoryBase<v8::internal::Factory>::NewNumber<(v8::internal::AllocationType)0>(double)",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToArrayIndex(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConsString v8::internal::String::VisitFlat<v8::ContainsOnlyOneByteHelper>(v8::ContainsOnlyOneByteHelper*, v8::internal::String, int)",
    "type": "CPP"
  },
  {
    "name": "v8::ContainsOnlyOneByteHelper::CheckCons(v8::internal::ConsString)",
    "type": "CPP"
  },
  {
    "name": "v8::String::ContainsOnlyOneByte() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::JSObject> v8::internal::HandleScope::CloseAndEscape<v8::internal::JSObject>(v8::internal::Handle<v8::internal::JSObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::NewRemoteContext(v8::Isolate*, v8::Local<v8::ObjectTemplate>, v8::MaybeLocal<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::NewRemoteInstance()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::String> v8::internal::HandleScope::CloseAndEscape<v8::internal::String>(v8::internal::Handle<v8::internal::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::Source() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::Name() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::SourceURL() const",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::SourceMappingURL() const",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::debug::BreakLocation, std::allocator<v8::debug::BreakLocation> >::emplace_back<int, int, v8::debug::BreakLocationType>(int&&, int&&, v8::debug::BreakLocationType&&)",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObject::FromCompiledModule(v8::Isolate*, v8::CompiledWasmModule const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::New(v8::Isolate*, std::shared_ptr<v8::BackingStore>)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::New(v8::Isolate*, std::shared_ptr<v8::BackingStore>)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::Initialize(v8::Isolate*, v8::Isolate::CreateParams const&)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::New(v8::Isolate::CreateParams const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::GetContents(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::Externalize()",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::GetContents()",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::GetContents(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::Externalize()",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::GetContents()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GlobalLexicalScopeNames(v8::Local<v8::Context>, v8::PersistentValueVector<v8::String, v8::DefaultPersistentValueVectorTraits>*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetLoadedScripts(v8::Isolate*, v8::PersistentValueVector<v8::debug::Script, v8::DefaultPersistentValueVectorTraits>&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::SerializeInternalFieldsCallback, std::allocator<v8::SerializeInternalFieldsCallback> >::_M_realloc_insert<v8::SerializeInternalFieldsCallback const&>(__gnu_cxx::__normal_iterator<v8::SerializeInternalFieldsCallback*, std::vector<v8::SerializeInternalFieldsCallback, std::allocator<v8::SerializeInternalFieldsCallback> > >, v8::SerializeInternalFieldsCallback const&)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::AddContext(v8::Local<v8::Context>, v8::SerializeInternalFieldsCallback)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long*, std::allocator<unsigned long*> >::_M_realloc_insert<unsigned long* const&>(__gnu_cxx::__normal_iterator<unsigned long**, std::vector<unsigned long*, std::allocator<unsigned long*> > >, unsigned long* const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HandleScopeImplementer::Detach(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::Context, std::allocator<v8::internal::Context> >::_M_realloc_insert<v8::internal::Context>(__gnu_cxx::__normal_iterator<v8::internal::Context*, std::vector<v8::internal::Context, std::allocator<v8::internal::Context> > >, v8::internal::Context&&)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::CreateBlob(v8::SnapshotCreator::FunctionCodeHandling)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::internal::BackingStore, std::default_delete<v8::internal::BackingStore> >(std::unique_ptr<v8::internal::BackingStore, std::default_delete<v8::internal::BackingStore> >&&)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::New(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::New(v8::Isolate*, void*, unsigned long, v8::ArrayBufferCreationMode)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::New(v8::Isolate*, void*, unsigned long, v8::ArrayBufferCreationMode)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::New(v8::Isolate*, v8::SharedArrayBuffer::Contents const&, v8::ArrayBufferCreationMode)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::GetBackingStore()",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::GetBackingStore()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Value> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::GetPrivateMembers(v8::Local<v8::Context>, v8::Local<v8::Object>, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::internal::Coverage, std::default_delete<v8::internal::Coverage> >(std::unique_ptr<v8::internal::Coverage, std::default_delete<v8::internal::Coverage> >&&)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::CollectPrecise(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Coverage::CollectBestEffort(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::debug::TypeProfile::Entry, std::allocator<v8::debug::TypeProfile::Entry> >::_M_realloc_insert<v8::debug::TypeProfile::Entry>(__gnu_cxx::__normal_iterator<v8::debug::TypeProfile::Entry*, std::vector<v8::debug::TypeProfile::Entry, std::allocator<v8::debug::TypeProfile::Entry> > >, v8::debug::TypeProfile::Entry&&)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::ScriptData::Entries() const",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::internal::TypeProfile, std::default_delete<v8::internal::TypeProfile> >(std::unique_ptr<v8::internal::TypeProfile, std::default_delete<v8::internal::TypeProfile> >&&)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::TypeProfile::Collect(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void std::__insertion_sort<__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)> >(__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)>)",
    "type": "CPP"
  },
  {
    "name": "void std::__move_median_to_first<__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)> >(__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)>)",
    "type": "CPP"
  },
  {
    "name": "void std::__adjust_heap<__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, long, v8::internal::BreakLocation, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)> >(__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, long, long, v8::internal::BreakLocation, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)>)",
    "type": "CPP"
  },
  {
    "name": "void std::__heap_select<__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)> >(__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)>)",
    "type": "CPP"
  },
  {
    "name": "void std::__introsort_loop<__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)> >(__gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, __gnu_cxx::__normal_iterator<v8::internal::BreakLocation*, std::vector<v8::internal::BreakLocation, std::allocator<v8::internal::BreakLocation> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(v8::internal::BreakLocation const&, v8::internal::BreakLocation const&)>)",
    "type": "CPP"
  },
  {
    "name": "v8::debug::Script::GetPossibleBreakpoints(v8::debug::Location const&, v8::debug::Location const&, bool, std::vector<v8::debug::BreakLocation, std::allocator<v8::debug::BreakLocation> >*) const",
    "type": "CPP"
  },
  {
    "name": "v8::MicrotasksScope::~MicrotasksScope()",
    "type": "CPP"
  },
  {
    "name": "v8::MicrotasksScope::PerformCheckpoint(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::PerformMicrotaskCheckpoint()",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::EnqueueMicrotask(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddMicrotasksCompletedCallback(void (*)(v8::Isolate*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::AddMicrotasksCompletedCallback(void (*)(v8::Isolate*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveMicrotasksCompletedCallback(void (*)(v8::Isolate*))",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::RemoveMicrotasksCompletedCallback(void (*)(v8::Isolate*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "v8::MicrotasksScope::GetCurrentDepth(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationJob::~CompilationJob()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsCompilationJob::~AsmJsCompilationJob()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsCompilationJob::FinalizeJobImpl(v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationJob::~CompilationJob()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsCompilationJob::~AsmJsCompilationJob()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsCompilationJob::FinalizeJobImpl(v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::JSReceiver::GetDataProperty(v8::internal::Handle<v8::internal::JSReceiver>, v8::internal::Handle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsCompilationJob::RecordHistograms(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJs::NewCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::AccountingAllocator*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJs::InstantiateAsmWasm(v8::internal::Isolate*, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::AsmWasmData>, v8::internal::Handle<v8::internal::JSReceiver>, v8::internal::Handle<v8::internal::JSReceiver>, v8::internal::Handle<v8::internal::JSArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, int>, std::allocator<std::pair<std::string const, int> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsCompilationJob::ExecuteJobImpl()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmFunctionType::AsFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Zone::New(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ConvertSignature(v8::internal::wasm::AsmType*, v8::internal::ZoneVector<v8::internal::wasm::AsmType*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::VarIndex(v8::internal::wasm::AsmJsParser::VarInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::AddGlobalImport(v8::internal::Vector<char const>, v8::internal::wasm::AsmType*, v8::internal::wasm::ValueType, bool, v8::internal::wasm::AsmJsParser::VarInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::DeclareGlobal(v8::internal::wasm::AsmJsParser::VarInfo*, bool, v8::internal::wasm::AsmType*, v8::internal::wasm::ValueType, v8::internal::wasm::WasmInitExpr const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::DeclareStdlibFunc(v8::internal::wasm::AsmJsParser::VarInfo*, v8::internal::wasm::AsmJsParser::VarKind, v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::TempVariable(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::CopyCurrentIdentifierString()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::SkipSemicolon()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::End()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::BareEnd()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::FindContinueLabelDepth(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::FindBreakLabelDepth(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModuleParameters()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModuleVarImport(v8::internal::wasm::AsmJsParser::VarInfo*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModuleVarNewStdlib(v8::internal::wasm::AsmJsParser::VarInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModuleVarStdlib(v8::internal::wasm::AsmJsParser::VarInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::EmptyStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::BreakStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ContinueStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::NumericLiteral()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ScanToClosingParenthesis()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::GatherCases(v8::internal::ZoneVector<int>*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::wasm::AsmType*, v8::internal::ZoneAllocator<v8::internal::wasm::AsmType*> >::_M_realloc_insert<v8::internal::wasm::AsmType* const&>(__gnu_cxx::__normal_iterator<v8::internal::wasm::AsmType**, std::vector<v8::internal::wasm::AsmType*, v8::internal::ZoneAllocator<v8::internal::wasm::AsmType*> > >, v8::internal::wasm::AsmType* const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::InitializeStdlibTypes()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::AsmJsParser(v8::internal::Zone*, unsigned long, v8::internal::Utf16CharacterStream*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::internal::wasm::AsmJsParser::VarInfo, v8::internal::ZoneAllocator<v8::internal::wasm::AsmJsParser::VarInfo> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::GetVarInfo(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModuleVarFromGlobal(v8::internal::wasm::AsmJsParser::VarInfo*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateExport()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateFunctionTable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::Identifier()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModuleVar(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModuleVars()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::PeekCall()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::wasm::AsmJsParser::BlockInfo, v8::internal::ZoneAllocator<v8::internal::wasm::AsmJsParser::BlockInfo> >::_M_realloc_insert<v8::internal::wasm::AsmJsParser::BlockInfo const&>(__gnu_cxx::__normal_iterator<v8::internal::wasm::AsmJsParser::BlockInfo*, std::vector<v8::internal::wasm::AsmJsParser::BlockInfo, v8::internal::ZoneAllocator<v8::internal::wasm::AsmJsParser::BlockInfo> > >, v8::internal::wasm::AsmJsParser::BlockInfo const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::BareBegin(v8::internal::wasm::AsmJsParser::BlockKind, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::Begin(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::Loop(int)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::wasm::AsmType*, v8::internal::ZoneAllocator<v8::internal::wasm::AsmType*> >::emplace_back<v8::internal::wasm::AsmType*>(v8::internal::wasm::AsmType*&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::wasm::ValueType, v8::internal::ZoneAllocator<v8::internal::wasm::ValueType> >::_M_realloc_insert<v8::internal::wasm::ValueType const&>(__gnu_cxx::__normal_iterator<v8::internal::wasm::ValueType*, std::vector<v8::internal::wasm::ValueType, v8::internal::ZoneAllocator<v8::internal::wasm::ValueType> > >, v8::internal::wasm::ValueType const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateFunctionLocals(unsigned long, v8::internal::ZoneVector<v8::internal::wasm::ValueType>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::internal::Signature<v8::internal::wasm::ValueType>, std::pair<v8::internal::Signature<v8::internal::wasm::ValueType> const, unsigned int>, v8::internal::ZoneAllocator<std::pair<v8::internal::Signature<v8::internal::wasm::ValueType> const, unsigned int> >, std::__detail::_Select1st, std::equal_to<v8::internal::Signature<v8::internal::wasm::ValueType> >, v8::base::hash<v8::internal::Signature<v8::internal::wasm::ValueType> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(v8::internal::Signature<v8::internal::wasm::ValueType> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::internal::Signature<v8::internal::wasm::ValueType>, std::pair<v8::internal::Signature<v8::internal::wasm::ValueType> const, unsigned int>, v8::internal::ZoneAllocator<std::pair<v8::internal::Signature<v8::internal::wasm::ValueType> const, unsigned int> >, std::__detail::_Select1st, std::equal_to<v8::internal::Signature<v8::internal::wasm::ValueType> >, v8::base::hash<v8::internal::Signature<v8::internal::wasm::ValueType> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](v8::internal::Signature<v8::internal::wasm::ValueType> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::ZoneVector<v8::internal::wasm::AsmType*>, v8::internal::ZoneAllocator<v8::internal::ZoneVector<v8::internal::wasm::AsmType*> > >::emplace_back<v8::internal::ZoneVector<v8::internal::wasm::AsmType*> >(v8::internal::ZoneVector<v8::internal::wasm::AsmType*>&&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateCall()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::CallExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::UnaryExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::MultiplicativeExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::AdditiveExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ShiftExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::RelationalExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::EqualityExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::BitwiseANDExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::BitwiseXORExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::BitwiseORExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ConditionalExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::AssignmentExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::Expression(v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ParenthesizedExpression()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ReturnStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateFloatCoercion()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateHeapAccess()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::MemberExpression()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::ZoneVector<v8::internal::wasm::ValueType>, v8::internal::ZoneAllocator<v8::internal::ZoneVector<v8::internal::wasm::ValueType> > >::emplace_back<v8::internal::ZoneVector<v8::internal::wasm::ValueType> >(v8::internal::ZoneVector<v8::internal::wasm::ValueType>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::ZoneVector<int>, v8::internal::ZoneAllocator<v8::internal::ZoneVector<int> > >::emplace_back<v8::internal::ZoneVector<int> >(v8::internal::ZoneVector<int>&&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateFunctionParams(v8::internal::ZoneVector<v8::internal::wasm::AsmType*>*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::SwitchStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateFunction()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateModule()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::Run()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::Block()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::IfStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::WhileStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::DoStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ForStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::IterationStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::LabelledStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateCase()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateDefault()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ExpressionStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::Rewind()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::ResetLocals()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::ConsumeNumber(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::ConsumeCComment()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::ConsumeCPPComment()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::ConsumeString(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::ConsumeCompareOrShift(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::IsIdentifierStart(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::IsIdentifierPart(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::IsNumberStart(int)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, int>, std::allocator<std::pair<std::string const, int> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::string, std::pair<std::string const, int>, std::allocator<std::pair<std::string const, int> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, int>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, int>, std::allocator<std::pair<std::string const, int> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::string, std::pair<std::string const, int>, std::allocator<std::pair<std::string const, int> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::ConsumeIdentifier(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::Seek(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::Next()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AsmJsScanner::AsmJsScanner(v8::internal::Utf16CharacterStream*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmCallableType::AsFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmCallableType::AsOverloadedFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmOverloadedFunctionType::AsOverloadedFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmCallableType::IsA(v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmOverloadedFunctionType::CanBeInvokedWith(v8::internal::wasm::AsmType*, v8::internal::ZoneVector<v8::internal::wasm::AsmType*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmOverloadedFunctionType::~AsmOverloadedFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmFunctionType::~AsmFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmOverloadedFunctionType::~AsmOverloadedFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmFunctionType::~AsmFunctionType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmFunctionType::IsA(v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmFunctionType::CanBeInvokedWith(v8::internal::wasm::AsmType*, v8::internal::ZoneVector<v8::internal::wasm::AsmType*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmOverloadedFunctionType::Name()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::AsCallableType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::Name()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmFunctionType::Name()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::IsExactly(v8::internal::wasm::AsmType*, v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::IsA(v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::ElementSizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::LoadType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::StoreType()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::FroundType(v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmType::MinMaxType(v8::internal::Zone*, v8::internal::wasm::AsmType*, v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmOverloadedFunctionType::AddOverload(v8::internal::wasm::AsmType*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstFunctionLiteralIdReindexer::AstFunctionLiteralIdReindexer(unsigned long, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstFunctionLiteralIdReindexer::~AstFunctionLiteralIdReindexer()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::AstFunctionLiteralIdReindexer>::VisitSwitchStatement(v8::internal::SwitchStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::AstFunctionLiteralIdReindexer>::VisitNoStackOverflowCheck(v8::internal::AstNode*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstFunctionLiteralIdReindexer::VisitFunctionLiteral(v8::internal::FunctionLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstFunctionLiteralIdReindexer::Reindex(v8::internal::Expression*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstFunctionLiteralIdReindexer::VisitClassLiteral(v8::internal::ClassLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned short>::~SequentialStringKey()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned char>::~SequentialStringKey()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstRawString::Compare(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned char>::AsHandle(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned char>::~SequentialStringKey()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned short>::~SequentialStringKey()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned short>::AsHandle(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned short>::IsMatch(v8::internal::String)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SequentialStringKey<unsigned char>::IsMatch(v8::internal::String)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstRawString::Internalize(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstRawString::Internalize(v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstRawString::AsArrayIndex(unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstRawString::IsIntegerIndex() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstRawString::IsOneByteEqualTo(char const*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstRawString::FirstCharacter() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::String> v8::internal::AstConsString::Allocate<v8::internal::Isolate>(v8::internal::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::String> v8::internal::AstConsString::Allocate<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstConsString::ToRawStrings() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::CloneFromOtherFactory(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::NewConsString()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::NewConsString(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::NewConsString(v8::internal::AstRawString const*, v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::AstValueFactory::Internalize<v8::internal::Isolate>(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::AstValueFactory::Internalize<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::GetString(unsigned int, bool, v8::internal::Vector<unsigned char const>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::GetOneByteStringInternal(v8::internal::Vector<unsigned char const>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::GetTwoByteStringInternal(v8::internal::Vector<unsigned short const>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstValueFactory::GetString(v8::internal::Handle<v8::internal::String>)",
    "type": "CPP"
  },
  {
    "name": "unsigned int v8::internal::StringHasher::HashSequentialString<unsigned char>(unsigned char const*, int, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstStringConstants::AstStringConstants(v8::internal::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::CopyChars<unsigned char, unsigned short>(unsigned short*, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::CopyChars<unsigned short, unsigned short>(unsigned short*, unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::String> v8::internal::AstConsString::AllocateFlat<v8::internal::Isolate>(v8::internal::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::String> v8::internal::AstConsString::AllocateFlat<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Literal::Match(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Variable::SetMaybeAssigned()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstNode::AsIterationStatement()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstNode::AsMaterializedLiteral()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsSmiLiteral() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsNumberLiteral() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsStringLiteral() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsPropertyName() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsNullLiteral() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsTheHoleLiteral() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsCompileTimeValue()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsUndefinedLiteral() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsLiteralButNotNullOrUndefined() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::ToBooleanIsTrue() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::ToBooleanIsFalse() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsPrivateName() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsValidReferenceExpression() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsAnonymousFunctionDefinition() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsConciseMethodDefinition() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Expression::IsAccessorFunctionDefinition() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableProxy::VariableProxy(v8::internal::Variable*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableProxy::VariableProxy(v8::internal::VariableProxy const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableProxy::BindTo(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Assignment::Assignment(v8::internal::AstNode::NodeType, v8::internal::Token::Value, v8::internal::Expression*, v8::internal::Expression*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::set_inferred_name(v8::internal::Handle<v8::internal::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::set_raw_inferred_name(v8::internal::AstConsString*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::ShouldEagerCompile() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::SetShouldEagerCompile()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::AllowsLazyCompilation()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::SafeToSkipArgumentsAdaptor() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::start_position() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::end_position() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::language_mode() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::kind() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::NeedsHomeObject(v8::internal::Expression*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::GetDebugName() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionLiteral::private_name_lookup_skips_outer_class() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteralProperty::ObjectLiteralProperty(v8::internal::Expression*, v8::internal::Expression*, v8::internal::ObjectLiteralProperty::Kind, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteralProperty::ObjectLiteralProperty(v8::internal::AstValueFactory*, v8::internal::Expression*, v8::internal::Expression*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::LiteralProperty::NeedsSetFunctionName() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassLiteralProperty::ClassLiteralProperty(v8::internal::Expression*, v8::internal::Expression*, v8::internal::ClassLiteralProperty::Kind, bool, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteralProperty::IsCompileTimeValue() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteralProperty::set_emit_store(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteralProperty::emit_store() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteral::InitFlagsForPendingNullPrototype(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteral::InitDepthAndFlags()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteral::IsFastCloningSupported() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ArrayLiteral::InitDepthAndFlags()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ArrayLiteral::IsFastCloningSupported() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::MaterializedLiteral::IsSimple() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::MaterializedLiteral::InitDepthAndFlags()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::MaterializedLiteral::NeedsInitialAllocationSite()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::TemplateObjectDescription> v8::internal::GetTemplateObject::GetOrBuildDescription<v8::internal::Isolate>(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::TemplateObjectDescription> v8::internal::GetTemplateObject::GetOrBuildDescription<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BinaryOperation::IsSmiLiteralOperation(v8::internal::Expression**, v8::internal::Smi*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompareOperation::IsLiteralCompareTypeof(v8::internal::Expression**, v8::internal::Literal**)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompareOperation::IsLiteralCompareUndefined(v8::internal::Expression**)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompareOperation::IsLiteralCompareNull(v8::internal::Expression**)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Call::GetCallType() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CaseClause::CaseClause(v8::internal::Zone*, v8::internal::Expression*, v8::internal::ScopedList<v8::internal::Statement*, void*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Literal::IsPropertyName() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Literal::ToUint32(unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Literal::AsArrayIndex(unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::Object> v8::internal::Literal::BuildValue<v8::internal::Isolate>(v8::internal::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::Object> v8::internal::MaterializedLiteral::GetBoilerplateValue<v8::internal::Isolate>(v8::internal::Expression*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::ArrayLiteral::BuildBoilerplateDescription<v8::internal::Isolate>(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::MaterializedLiteral::BuildConstants<v8::internal::Isolate>(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::ObjectLiteral::BuildBoilerplateDescription<v8::internal::Isolate>(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::Object> v8::internal::Literal::BuildValue<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::Object> v8::internal::MaterializedLiteral::GetBoilerplateValue<v8::internal::OffThreadIsolate>(v8::internal::Expression*, v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::ArrayLiteral::BuildBoilerplateDescription<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::MaterializedLiteral::BuildConstants<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::ObjectLiteral::BuildBoilerplateDescription<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Literal::ToBooleanIsTrue() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Literal::Hash()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstNodeFactory::NewNumberLiteral(double, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallRuntime::debug_name()",
    "type": "CPP"
  },
  {
    "name": "v8::base::TemplateHashMapImpl<void*, void*, v8::base::HashEqualityThenKeyMatcher<void*, bool (*)(void*, void*)>, v8::internal::ZoneAllocationPolicy>::Resize(v8::internal::ZoneAllocationPolicy)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteral::CalculateEmitStore(v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AstRawStringComparer::operator()(v8::internal::AstRawString const*, v8::internal::AstRawString const*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AddExport(v8::internal::AstRawString const*, v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::SourceTextModuleInfoEntry> v8::internal::SourceTextModuleDescriptor::Entry::Serialize<v8::internal::Isolate>(v8::internal::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::SourceTextModuleInfoEntry> v8::internal::SourceTextModuleDescriptor::Entry::Serialize<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::GetCellIndexKind(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AssignCellIndices()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::SourceTextModuleDescriptor::Entry const*, v8::internal::ZoneAllocator<v8::internal::SourceTextModuleDescriptor::Entry const*> >::_M_realloc_insert<v8::internal::SourceTextModuleDescriptor::Entry const* const&>(__gnu_cxx::__normal_iterator<v8::internal::SourceTextModuleDescriptor::Entry const**, std::vector<v8::internal::SourceTextModuleDescriptor::Entry const*, v8::internal::ZoneAllocator<v8::internal::SourceTextModuleDescriptor::Entry const*> > >, v8::internal::SourceTextModuleDescriptor::Entry const* const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::MakeIndirectExportsExplicit(v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<v8::internal::AstRawString const*, std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry*>, std::_Select1st<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry*> >, v8::internal::SourceTextModuleDescriptor::AstRawStringComparer, v8::internal::ZoneAllocator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry*> > >::find(v8::internal::AstRawString const* const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*> >, bool> std::_Rb_tree<v8::internal::AstRawString const*, std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*>, std::_Select1st<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*> >, std::less<v8::internal::AstRawString const*>, v8::internal::ZoneAllocator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*> > >::_M_emplace_unique<std::pair<v8::internal::AstRawString const*, v8::internal::SourceTextModuleDescriptor::Entry const*> >(std::pair<v8::internal::AstRawString const*, v8::internal::SourceTextModuleDescriptor::Entry const*>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<v8::internal::AstRawString const*, std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*>, std::_Select1st<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*> >, std::less<v8::internal::AstRawString const*>, v8::internal::ZoneAllocator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*> > >::_M_erase(std::_Rb_tree_node<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry const*> >*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::FindDuplicateExport(v8::internal::Zone*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::Validate(v8::internal::ModuleScope*, v8::internal::PendingCompilationErrorHandler*, v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<v8::internal::AstRawString const*, std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry*>, std::_Select1st<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry*> >, v8::internal::SourceTextModuleDescriptor::AstRawStringComparer, v8::internal::ZoneAllocator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::Entry*> > >::_M_get_insert_unique_pos(v8::internal::AstRawString const* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<v8::internal::AstRawString const*, std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::ModuleRequest>, std::_Select1st<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::ModuleRequest> >, v8::internal::SourceTextModuleDescriptor::AstRawStringComparer, v8::internal::ZoneAllocator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::ModuleRequest> > >::_M_get_insert_unique_pos(v8::internal::AstRawString const* const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::ModuleRequest> >, bool> std::_Rb_tree<v8::internal::AstRawString const*, std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::ModuleRequest>, std::_Select1st<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::ModuleRequest> >, v8::internal::SourceTextModuleDescriptor::AstRawStringComparer, v8::internal::ZoneAllocator<std::pair<v8::internal::AstRawString const* const, v8::internal::SourceTextModuleDescriptor::ModuleRequest> > >::_M_emplace_unique<std::pair<v8::internal::AstRawString const*, v8::internal::SourceTextModuleDescriptor::ModuleRequest> >(std::pair<v8::internal::AstRawString const*, v8::internal::SourceTextModuleDescriptor::ModuleRequest>&&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AddImport(v8::internal::AstRawString const*, v8::internal::AstRawString const*, v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::Scanner::Location, v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AddEmptyImport(v8::internal::AstRawString const*, v8::internal::Scanner::Location)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AddExport(v8::internal::AstRawString const*, v8::internal::AstRawString const*, v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::Scanner::Location, v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AddStarExport(v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::Scanner::Location, v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceTextModuleDescriptor::AddStarImport(v8::internal::AstRawString const*, v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::Scanner::Location, v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::internal::Handle<v8::internal::Object>, v8::internal::ZoneAllocator<v8::internal::Handle<v8::internal::Object> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::FixedArray> v8::internal::SourceTextModuleDescriptor::SerializeRegularExports<v8::internal::Isolate>(v8::internal::Isolate*, v8::internal::Zone*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::FixedArray> v8::internal::SourceTextModuleDescriptor::SerializeRegularExports<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*, v8::internal::Zone*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::CallPrinter(v8::internal::Isolate*, bool, v8::internal::CallPrinter::SpreadErrorInArgsHint)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::~CallPrinter()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::GetErrorHint() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::Print(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::Print(v8::internal::Handle<v8::internal::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitVariableDeclaration(v8::internal::VariableDeclaration*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitFunctionDeclaration(v8::internal::FunctionDeclaration*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitEmptyStatement(v8::internal::EmptyStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitContinueStatement(v8::internal::ContinueStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitBreakStatement(v8::internal::BreakStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitDebuggerStatement(v8::internal::DebuggerStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitNativeFunctionLiteral(v8::internal::NativeFunctionLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitEmptyParentheses(v8::internal::EmptyParentheses*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitGetTemplateObject(v8::internal::GetTemplateObject*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitThisExpression(v8::internal::ThisExpression*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitSuperPropertyReference(v8::internal::SuperPropertyReference*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitSuperCallReference(v8::internal::SuperCallReference*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::PrintLiteral(v8::internal::Handle<v8::internal::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitLiteral(v8::internal::Literal*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitRegExpLiteral(v8::internal::RegExpLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitVariableProxy(v8::internal::VariableProxy*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCall(v8::internal::Call*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitSwitchStatement(v8::internal::SwitchStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCallNew(v8::internal::CallNew*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitNaryOperation(v8::internal::NaryOperation*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitTemplateLiteral(v8::internal::TemplateLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitFunctionLiteral(v8::internal::FunctionLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitClassLiteral(v8::internal::ClassLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitObjectLiteral(v8::internal::ObjectLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitInitializeClassMembersStatement(v8::internal::InitializeClassMembersStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitNoStackOverflowCheck(v8::internal::AstNode*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::Find(v8::internal::AstNode*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitUnaryOperation(v8::internal::UnaryOperation*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitSpread(v8::internal::Spread*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitProperty(v8::internal::Property*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitImportCallExpression(v8::internal::ImportCallExpression*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCountOperation(v8::internal::CountOperation*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitAssignment(v8::internal::Assignment*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCompareOperation(v8::internal::CompareOperation*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitBinaryOperation(v8::internal::BinaryOperation*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::Print(v8::internal::FunctionLiteral*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitYield(v8::internal::Yield*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitAwait(v8::internal::Await*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitSloppyBlockFunctionStatement(v8::internal::SloppyBlockFunctionStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitOptionalChain(v8::internal::OptionalChain*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitThrow(v8::internal::Throw*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitExpressionStatement(v8::internal::ExpressionStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitReturnStatement(v8::internal::ReturnStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitTryFinallyStatement(v8::internal::TryFinallyStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitWithStatement(v8::internal::WithStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitTryCatchStatement(v8::internal::TryCatchStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitDoWhileStatement(v8::internal::DoWhileStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitWhileStatement(v8::internal::WhileStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitConditional(v8::internal::Conditional*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitForInStatement(v8::internal::ForInStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitIfStatement(v8::internal::IfStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitYieldStar(v8::internal::YieldStar*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitForStatement(v8::internal::ForStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitForOfStatement(v8::internal::ForOfStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitArrayLiteral(v8::internal::ArrayLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::FindStatements(v8::internal::ZoneList<v8::internal::Statement*> const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::FindArguments(v8::internal::ZoneList<v8::internal::Expression*> const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCompoundAssignment(v8::internal::CompoundAssignment*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitBlock(v8::internal::Block*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCallRuntime(v8::internal::CallRuntime*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::PrintLiteral(v8::internal::AstRawString const*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableMap::VariableMap(v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableMap::Remove(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableMap::Lookup(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::Scope(v8::internal::Zone*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::Scope(v8::internal::Zone*, v8::internal::Scope*, v8::internal::ScopeType)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclarationScope(v8::internal::Zone*, v8::internal::Scope*, v8::internal::ScopeType, v8::internal::FunctionKind)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ModuleScope::ModuleScope(v8::internal::DeclarationScope*, v8::internal::AstValueFactory*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ModuleScope::ModuleScope(v8::internal::Isolate*, v8::internal::Handle<v8::internal::ScopeInfo>, v8::internal::AstValueFactory*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::ClassScope(v8::internal::Zone*, v8::internal::Scope*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::Scope(v8::internal::Zone*, v8::internal::ScopeType, v8::internal::Handle<v8::internal::ScopeInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclarationScope(v8::internal::Zone*, v8::internal::ScopeType, v8::internal::Handle<v8::internal::ScopeInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::SetDefaults()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::SetDefaults()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::HasSimpleParameters()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::set_should_eager_compile()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::set_is_asm_module()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::IsAsmModule() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ContainsAsmModule() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AsDeclarationScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AsDeclarationScope() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AsModuleScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AsModuleScope() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AsClassScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AsClassScope() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareSloppyBlockFunction(v8::internal::SloppyBlockFunctionStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareThis(v8::internal::AstValueFactory*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareGeneratorObjectVar(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::FinalizeBlockScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::AddLocal(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::Snapshot::Reparent(v8::internal::DeclarationScope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ReplaceOuterScope(v8::internal::Scope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareParameter(v8::internal::AstRawString const*, v8::internal::VariableMode, bool, bool, v8::internal::AstValueFactory*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::RecordParameter(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AddUnresolved(v8::internal::VariableProxy*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::RemoveUnresolved(v8::internal::VariableProxy*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::DeleteUnresolved(v8::internal::VariableProxy*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::NewTemporary(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::NewTemporary(v8::internal::AstRawString const*, v8::internal::MaybeAssignedFlag)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::FindVariableDeclaredIn(v8::internal::Scope*, v8::internal::VariableMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeserializeReceiver(v8::internal::AstValueFactory*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::HasThisReference() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AllowsLazyParsingWithoutUnresolvedVariables(v8::internal::Scope const*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::AllowsLazyCompilation() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ContextChainLength(v8::internal::Scope*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ContextChainLengthUntilOutermostSloppyEval() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::GetDeclarationScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::GetNonEvalDeclarationScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::GetClosureScope() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::GetClosureScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::NeedsScopeInfo() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ShouldBanArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::GetReceiverScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::GetScriptScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::GetOuterScopeWithContext()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::IsOuterScopeOf(v8::internal::Scope*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::IsSkippableFunctionScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::SavePreparseData(v8::internal::Parser*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::SavePreparseDataForDeclarationScope(v8::internal::Parser*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::RewriteReplGlobalVariables()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ResolveTo(v8::internal::VariableProxy*, v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ResolvePreparsedVariable(v8::internal::VariableProxy*, v8::internal::Scope*, v8::internal::Scope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::MustAllocate(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::MustAllocateInContext(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AllocateStackSlot(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AllocateNonParameterLocal(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ModuleScope::AllocateModuleVariables()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AllocateVariablesRecursively()",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::Scope::AllocateScopeInfosRecursively<v8::internal::Isolate>(v8::internal::Isolate*, v8::internal::MaybeHandle<v8::internal::ScopeInfo>)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::Scope::AllocateScopeInfosRecursively<v8::internal::OffThreadIsolate>(v8::internal::OffThreadIsolate*, v8::internal::MaybeHandle<v8::internal::ScopeInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::RecalcPrivateNameContextChain()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::RecordNeedsPrivateNameContextChainRecalc()",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::DeclarationScope::AllocateScopeInfos<v8::internal::Isolate>(v8::internal::ParseInfo*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void v8::internal::DeclarationScope::AllocateScopeInfos<v8::internal::OffThreadIsolate>(v8::internal::ParseInfo*, v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ContextLocalCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IsComplementaryAccessorPair(v8::internal::VariableMode, v8::internal::VariableMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::LookupLocalPrivateName(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::GetUnresolvedPrivateNameTail()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::ResetUnresolvedPrivateNameTail(v8::base::ThreadedListBase<v8::internal::VariableProxy, v8::base::EmptyBase, v8::internal::VariableProxy::UnresolvedNext>::Iterator)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::MigrateUnresolvedPrivateNameTail(v8::internal::AstNodeFactory*, v8::base::ThreadedListBase<v8::internal::VariableProxy, v8::base::EmptyBase, v8::internal::VariableProxy::UnresolvedNext>::Iterator)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PrivateNameScopeIterator::PrivateNameScopeIterator(v8::internal::Scope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PrivateNameScopeIterator::Next()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PrivateNameScopeIterator::AddUnresolvedPrivateName(v8::internal::VariableProxy*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::ResolvePrivateNamesPartially()",
    "type": "CPP"
  },
  {
    "name": "v8::base::TemplateHashMapImpl<void*, void*, v8::base::KeyEqualityMatcher<void*>, v8::internal::ZoneAllocationPolicy>::Remove(void* const&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::base::TemplateHashMapImpl<void*, void*, v8::base::KeyEqualityMatcher<void*>, v8::internal::ZoneAllocationPolicy>::Resize(v8::internal::ZoneAllocationPolicy)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableMap::Add(v8::internal::Zone*, v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareDynamicGlobal(v8::internal::AstRawString const*, v8::internal::VariableKind, v8::internal::Scope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::VariableMap::Declare(v8::internal::Zone*, v8::internal::Scope*, v8::internal::AstRawString const*, v8::internal::VariableMode, v8::internal::VariableKind, v8::internal::InitializationFlag, v8::internal::MaybeAssignedFlag, v8::internal::IsStaticFlag, bool*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclarationScope(v8::internal::Zone*, v8::internal::AstValueFactory*, v8::internal::REPLMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::DeclareVariableName(v8::internal::AstRawString const*, v8::internal::VariableMode, bool*, v8::internal::VariableKind)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::DeclareLocal(v8::internal::AstRawString const*, v8::internal::VariableMode, v8::internal::VariableKind, bool*, v8::internal::InitializationFlag)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::DeclareCatchVariableName(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::DeclareClassVariable(v8::internal::AstValueFactory*, v8::internal::AstRawString const*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareArguments(v8::internal::AstValueFactory*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::NonLocal(v8::internal::AstRawString const*, v8::internal::VariableMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::DeclareVariable(v8::internal::Declaration*, v8::internal::AstRawString const*, int, v8::internal::VariableMode, v8::internal::VariableKind, v8::internal::InitializationFlag, bool*, bool*, bool*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::DeclareBrandVariable(v8::internal::AstValueFactory*, v8::internal::IsStaticFlag, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::Scope(v8::internal::Zone*, v8::internal::AstRawString const*, v8::internal::MaybeAssignedFlag, v8::internal::Handle<v8::internal::ScopeInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareDefaultFunctionVariables(v8::internal::AstValueFactory*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::ResetAfterPreparsing(v8::internal::AstValueFactory*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::DeclarePrivateName(v8::internal::AstRawString const*, v8::internal::VariableMode, v8::internal::IsStaticFlag, bool*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::LookupPrivateNameInScopeInfo(v8::internal::AstRawString const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::LookupPrivateName(v8::internal::VariableProxy*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::ResolvePrivateNames(v8::internal::ParseInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareFunctionVar(v8::internal::AstRawString const*, v8::internal::Scope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::LookupInScopeInfo(v8::internal::AstRawString const*, v8::internal::Scope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::ClassScope(v8::internal::Isolate*, v8::internal::Zone*, v8::internal::AstValueFactory*, v8::internal::Handle<v8::internal::ScopeInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::DeserializeScopeChain(v8::internal::Isolate*, v8::internal::Zone*, v8::internal::ScopeInfo, v8::internal::DeclarationScope*, v8::internal::AstValueFactory*, v8::internal::Scope::DeserializationMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::CheckConflictingVarDeclarations(bool*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Variable* v8::internal::Scope::Lookup<(v8::internal::Scope::ScopeLookupMode)1>(v8::internal::VariableProxy*, v8::internal::Scope*, v8::internal::Scope*, v8::internal::Scope*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::LookupSloppyEval(v8::internal::VariableProxy*, v8::internal::Scope*, v8::internal::Scope*, v8::internal::Scope*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Variable* v8::internal::Scope::Lookup<(v8::internal::Scope::ScopeLookupMode)0>(v8::internal::VariableProxy*, v8::internal::Scope*, v8::internal::Scope*, v8::internal::Scope*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::LookupWith(v8::internal::VariableProxy*, v8::internal::Scope*, v8::internal::Scope*, v8::internal::Scope*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::AnalyzePartially(v8::internal::DeclarationScope*, v8::internal::AstNodeFactory*, v8::base::ThreadedListBase<v8::internal::VariableProxy, v8::base::EmptyBase, v8::internal::VariableProxy::UnresolvedNext>*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::AnalyzePartially(v8::internal::Parser*, v8::internal::AstNodeFactory*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ResolveVariable(v8::internal::VariableProxy*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::CollectNonLocals(v8::internal::DeclarationScope*, v8::internal::Isolate*, v8::internal::Handle<v8::internal::StringSet>*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::CollectNonLocals(v8::internal::Isolate*, v8::internal::Handle<v8::internal::StringSet>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Scope::ResolveVariablesRecursively(v8::internal::Scope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::AllocateVariables(v8::internal::ParseInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::HoistSloppyBlockFunctions(v8::internal::AstNodeFactory*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::Analyze(v8::internal::ParseInfo*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::SourceRangeAstVisitor(unsigned long, v8::internal::Expression*, v8::internal::SourceRangeMap*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::VisitNode(v8::internal::AstNode*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::MaybeRemoveContinuationRange(v8::internal::Statement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::MaybeRemoveLastContinuationRange(v8::internal::ZoneList<v8::internal::Statement*>*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::MaybeRemoveContinuationRangeOfAsyncReturn(v8::internal::TryCatchStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::SourceRangeAstVisitor>::VisitCallNew(v8::internal::CallNew*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::SourceRangeAstVisitor>::Visit(v8::internal::AstNode*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::SourceRangeAstVisitor>::VisitNoStackOverflowCheck(v8::internal::AstNode*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::SourceRangeAstVisitor>::VisitObjectLiteral(v8::internal::ObjectLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::VisitFunctionLiteral(v8::internal::FunctionLiteral*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::SourceRangeAstVisitor>::VisitInitializeClassMembersStatement(v8::internal::InitializeClassMembersStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::VisitBlock(v8::internal::Block*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::SourceRangeAstVisitor>::VisitCall(v8::internal::Call*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AstTraversalVisitor<v8::internal::SourceRangeAstVisitor>::VisitNaryOperation(v8::internal::NaryOperation*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::VisitSwitchStatement(v8::internal::SwitchStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::VisitTryFinallyStatement(v8::internal::TryFinallyStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SourceRangeAstVisitor::VisitTryCatchStatement(v8::internal::TryCatchStatement*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Variable::Variable(v8::internal::Variable*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Variable::IsGlobalObjectProperty() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Variable::IsReplGlobalLet() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Variable::RewriteLocationForRepl()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::FunctionNameGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::RegExpResultIndicesGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::FunctionPrototypeSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ModuleNamespaceEntryGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::FunctionPrototypeGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ArgumentsIteratorGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ArrayLengthGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::FunctionArgumentsGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::FunctionLengthGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ModuleNamespaceEntrySetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::StringLengthGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ErrorStackGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ErrorStackSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::BoundFunctionNameGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::BoundFunctionLengthGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ArrayLengthSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeAccessor(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Boolean> const&))",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::IsJSObjectFieldAccessor(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::Name>, v8::internal::FieldIndex*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ReplaceAccessorWithDataProperty(v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::JSObject>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::ReconfigureToDataProperty(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeArgumentsIteratorInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeArrayLengthInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeModuleNamespaceEntryInfo(v8::internal::Isolate*, v8::internal::Handle<v8::internal::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeStringLengthInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeFunctionPrototypeInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeFunctionLengthInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeFunctionNameInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::FunctionGetArguments(v8::internal::JavaScriptFrame*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeFunctionArgumentsInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FindCaller(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSFunction>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::FunctionCallerGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeFunctionCallerInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeBoundFunctionLengthInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeBoundFunctionNameInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeErrorStackInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Accessors::MakeRegExpResultIndicesInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::InvokeApiFunction(v8::internal::Isolate*, bool, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*, v8::internal::Handle<v8::internal::HeapObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_HandleApiCallAsFunction(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_HandleApiCallAsConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayPrototypeFill(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayPush(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayPop(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayShift(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayUnshift(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayConcat(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Factory::NewStringFromAsciiChecked(char const*, v8::internal::AllocationType)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayBufferPrototypeGetByteLength(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SharedArrayBufferPrototypeGetByteLength(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayBufferIsView(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SharedArrayBufferPrototypeSlice(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayBufferPrototypeSlice(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayBufferConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ArrayBufferConstructor_DoNotInitialize(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallAsyncModuleFulfilled(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallAsyncModuleRejected(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_BigIntConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_BigIntAsUintN(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_BigIntAsIntN(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_BigIntPrototypeToLocaleString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_BigIntPrototypeToString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_BigIntPrototypeValueOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::CallFunction(v8::internal::ConvertReceiverMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::Call(v8::internal::ConvertReceiverMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetColumnNumber(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetEnclosingColumnNumber(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetEnclosingLineNumber(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetEvalOrigin(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetFileName(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetFunction(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetFunctionName(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetLineNumber(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetMethodName(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetPosition(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetPromiseIndex(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetScriptNameOrSourceURL(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetThis(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeGetTypeName(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeIsAsync(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeIsConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeIsEval(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeIsNative(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeIsPromiseAll(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeIsToplevel(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CallSitePrototypeToString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_MapPrototypeClear(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SetPrototypeClear(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleDebug(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleError(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleInfo(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleLog(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleWarn(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleDir(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleDirXml(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleTable(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleTrace(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleGroup(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleGroupCollapsed(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleGroupEnd(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleClear(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleCount(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleCountReset(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleAssert(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleProfile(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleProfileEnd(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleTimeLog(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleTime(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleTimeEnd(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleTimeStamp(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ConsoleContext(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DataViewConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SmallStringOptimizedAllocator<128ul>::~SmallStringOptimizedAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SmallStringOptimizedAllocator<128ul>::~SmallStringOptimizedAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Object::ToNumber(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateNow(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateUTC(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetDate(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetFullYear(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetHours(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetMilliseconds(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetMinutes(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetMonth(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetSeconds(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetTime(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetUTCDate(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetUTCFullYear(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetUTCHours(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetUTCMilliseconds(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetUTCMinutes(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetUTCMonth(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetUTCSeconds(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToISOString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToLocaleDateString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToLocaleString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToLocaleTimeString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToUTCString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeGetYear(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeSetYear(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToJson(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DateParser::DateStringTokenizer<unsigned char const>::Scan()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DateParser::DateToken v8::internal::DateParser::ParseES5DateTime<unsigned char const>(v8::internal::DateParser::DateStringTokenizer<unsigned char const>*, v8::internal::DateParser::DayComposer*, v8::internal::DateParser::TimeComposer*, v8::internal::DateParser::TimeZoneComposer*)",
    "type": "CPP"
  },
  {
    "name": "bool v8::internal::DateParser::Parse<unsigned char const>(v8::internal::Isolate*, v8::internal::Vector<unsigned char const>, double*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DateParser::DateStringTokenizer<unsigned short const>::Scan()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DateParser::DateToken v8::internal::DateParser::ParseES5DateTime<unsigned short const>(v8::internal::DateParser::DateStringTokenizer<unsigned short const>*, v8::internal::DateParser::DayComposer*, v8::internal::DateParser::TimeComposer*, v8::internal::DateParser::TimeZoneComposer*)",
    "type": "CPP"
  },
  {
    "name": "bool v8::internal::DateParser::Parse<unsigned short const>(v8::internal::Isolate*, v8::internal::Vector<unsigned short const>, double*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateParse(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::base::SmallVector<char, 128ul>::Grow(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SmallStringOptimizedAllocator<128ul>::grow(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SmallStringOptimizedAllocator<128ul>::allocate(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToDateString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DatePrototypeToTimeString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ErrorConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ErrorCaptureStackTrace(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ErrorPrototypeToString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_FunctionConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GeneratorFunctionConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_AsyncFunctionConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_AsyncGeneratorFunctionConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_FunctionPrototypeToString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::Object>* v8::internal::NewArray<v8::internal::Handle<v8::internal::Object> >(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_FunctionPrototypeBind(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GlobalDecodeURI(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GlobalDecodeURIComponent(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GlobalEncodeURI(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GlobalEncodeURIComponent(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GlobalEscape(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GlobalUnescape(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_GlobalEval(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_Illegal(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_EmptyFunction(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_UnsupportedThrower(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StrictPoisonPillThrower(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Object::ToNumeric(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Object::ToString(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringPrototypeToUpperCaseIntl(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringPrototypeNormalizeIntl(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberFormatSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberFormatPrototypeFormatToParts(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatPrototypeFormatToParts(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DisplayNamesConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DisplayNamesPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DisplayNamesSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DisplayNamesPrototypeOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberFormatConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberFormatPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberFormatPrototypeFormatNumber(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberFormatInternalFormatNumber(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatPrototypeFormat(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatInternalFormat(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_IntlGetCanonicalLocales(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ListFormatConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ListFormatPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ListFormatSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocaleConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeMaximize(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeMinimize(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RelativeTimeFormatSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RelativeTimeFormatPrototypeFormat(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RelativeTimeFormatPrototypeFormatToParts(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeLanguage(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeScript(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeRegion(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeBaseName(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeCalendar(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeCaseFirst(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeCollation(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeHourCycle(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeNumeric(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeNumberingSystem(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_LocalePrototypeToString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RelativeTimeFormatConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RelativeTimeFormatPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringPrototypeToLocaleLowerCase(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringPrototypeToLocaleUpperCase(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_PluralRulesConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_PluralRulesPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_PluralRulesPrototypeSelect(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_PluralRulesSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CollatorConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CollatorPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CollatorSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CollatorPrototypeCompare(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_CollatorInternalCompare(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmentIteratorPrototypeBreakType(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmentIteratorPrototypeFollowing(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmentIteratorPrototypeNext(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmentIteratorPrototypePreceding(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmentIteratorPrototypeIndex(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmenterConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmenterSupportedLocalesOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmenterPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SegmenterPrototypeSegment(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorPrototypeResolvedOptions(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorPrototypeAdoptText(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorInternalAdoptText(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorPrototypeFirst(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorInternalFirst(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorPrototypeNext(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorInternalNext(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorPrototypeCurrent(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorInternalCurrent(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorPrototypeBreakType(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_V8BreakIteratorInternalBreakType(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Object v8::internal::DateTimeFormatRange<v8::internal::String>(v8::internal::BuiltinArguments, v8::internal::Isolate*, char const*, v8::internal::MaybeHandle<v8::internal::String> (*)(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSDateTimeFormat>, double, double))",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatPrototypeFormatRange(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Object v8::internal::DateTimeFormatRange<v8::internal::JSArray>(v8::internal::BuiltinArguments, v8::internal::Isolate*, char const*, v8::internal::MaybeHandle<v8::internal::JSArray> (*)(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSDateTimeFormat>, double, double))",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_DateTimeFormatPrototypeFormatRangeToParts(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_JsonParse(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_JsonStringify(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberPrototypeToExponential(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberPrototypeToFixed(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberPrototypeToLocaleString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_NumberPrototypeToPrecision(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectPrototypePropertyIsEnumerable(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectDefineProperties(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectDefineProperty(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectDefineGetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectDefineSetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectLookupGetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectLookupSetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectFreeze(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectPrototypeGetProto(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectPrototypeSetProto(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectGetOwnPropertySymbols(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectIsFrozen(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectIsSealed(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectGetOwnPropertyDescriptors(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ObjectSeal(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ReflectDefineProperty(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ReflectGetOwnPropertyDescriptor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ReflectOwnKeys(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_ReflectSet(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpPrototypeToString(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture1Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture2Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture3Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture4Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture5Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture6Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture7Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture8Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpCapture9Getter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpInputGetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpInputSetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpLastMatchGetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpLastParenGetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpLeftContextGetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_RegExpRightContextGetter(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_AtomicsIsLockFree(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ValidateSharedIntegerTypedArray(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ValidateAtomicAccess(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSTypedArray>, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_AtomicsWake(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_AtomicsNotify(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_AtomicsWait(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringPrototypeLastIndexOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringPrototypeLocaleCompare(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringRaw(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_StringFromCodePoint(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SymbolConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SymbolFor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_SymbolKeyFor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_IsTraceCategoryEnabled(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_Trace(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_TypedArrayPrototypeBuffer(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_TypedArrayPrototypeCopyWithin(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_TypedArrayPrototypeFill(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_TypedArrayPrototypeIncludes(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_TypedArrayPrototypeIndexOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_TypedArrayPrototypeLastIndexOf(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_TypedArrayPrototypeReverse(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::JSFinalizationRegistry::Register(v8::internal::Handle<v8::internal::JSFinalizationRegistry>, v8::internal::Handle<v8::internal::JSReceiver>, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_FinalizationRegistryConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_FinalizationRegistryRegister(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_FinalizationRegistryUnregister(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_WeakRefConstructor(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtin_WeakRefDeref(int, unsigned long*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallInterfaceDescriptor::~CallInterfaceDescriptor()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (v8::internal::CodeEventListener*), v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, char const*)::{lambda(v8::internal::CodeEventListener*)#1}>::_M_invoke(std::_Any_data const&, v8::internal::CodeEventListener*&&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallInterfaceDescriptor::InitializePlatformSpecific(v8::internal::CallInterfaceDescriptorData*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallInterfaceDescriptor::InitializePlatformIndependent(v8::internal::CallInterfaceDescriptorData*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallInterfaceDescriptor::~CallInterfaceDescriptor()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OFStream::~OFStream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to v8::internal::OFStream::~OFStream()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Logger::is_listening_to_code_events()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::MacroAssembler::~MacroAssembler()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::MacroAssembler::~MacroAssembler()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, char const*)::{lambda(v8::internal::CodeEventListener*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, char const*)::{lambda(v8::internal::CodeEventListener*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to v8::internal::OFStream::~OFStream()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OFStream::~OFStream()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::GetContinuationBailoutId(v8::internal::Builtins::Name)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::GetBuiltinFromBailoutId(v8::internal::BailoutId)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::TearDown()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::Lookup(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::NonPrimitiveToPrimitive(v8::internal::ToPrimitiveHint)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::OrdinaryToPrimitive(v8::internal::OrdinaryToPrimitiveHint)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::set_builtin(int, v8::internal::Code)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::builtin(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::builtin_handle(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::GetStackParameterCount(v8::internal::Builtins::Name)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::CallInterfaceDescriptorFor(v8::internal::Builtins::Name)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::CallableFor(v8::internal::Isolate*, v8::internal::Builtins::Name)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::HasJSLinkage(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::name(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::PrintBuiltinCode()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::PrintBuiltinSize()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::CppEntryOf(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::IsBuiltin(v8::internal::Code)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::IsBuiltinHandle(v8::internal::Handle<v8::internal::HeapObject>, int*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::IsIsolateIndependentBuiltin(v8::internal::Code)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::InitializeBuiltinEntryTable(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::EmitCodeCreateEvents(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::GenerateOffHeapTrampolineFor(v8::internal::Isolate*, unsigned long, int, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::GenerateOffHeapTrampolineRelocInfo(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::KindOf(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::KindNameOf(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::IsCpp(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::AllowDynamicFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSFunction>, v8::internal::Handle<v8::internal::JSObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Builtins::CodeObjectIsExecutable(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExampleBuiltinForTorqueFunctionPointerType(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IdentityMap<unsigned int, v8::internal::FreeStoreAllocationPolicy>::DeleteArray(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IdentityMap<unsigned int, v8::internal::FreeStoreAllocationPolicy>::NewPointerArray(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IdentityMap<unsigned int, v8::internal::FreeStoreAllocationPolicy>::~IdentityMap()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IdentityMap<unsigned int, v8::internal::FreeStoreAllocationPolicy>::~IdentityMap()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BuiltinsConstantsTableBuilder::BuiltinsConstantsTableBuilder(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BuiltinsConstantsTableBuilder::AddObject(v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BuiltinsConstantsTableBuilder::PatchSelfReference(v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Code>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BuiltinsConstantsTableBuilder::Finalize()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::AbortedCodeGeneration()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StdoutStream::~StdoutStream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to v8::internal::StdoutStream::~StdoutStream()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::~AssemblerBase()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::~AssemblerBase()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to v8::internal::StdoutStream::~StdoutStream()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StdoutStream::~StdoutStream()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerOptions::Default(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalAssemblerBuffer(void*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::NewAssemblerBuffer(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::AssemblerBase(v8::internal::AssemblerOptions const&, std::unique_ptr<v8::internal::AssemblerBuffer, std::default_delete<v8::internal::AssemblerBuffer> >)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::Print(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HeapObjectRequest::HeapObjectRequest(double, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HeapObjectRequest::HeapObjectRequest(v8::internal::StringConstantBase const*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Assembler::RecordDeoptReason(v8::internal::DeoptimizeReason, v8::internal::SourcePosition, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Assembler::DataAlign(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::RequestHeapObject(v8::internal::HeapObjectRequest)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::GetCodeTarget(long) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::GetEmbeddedObject(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Assembler::WriteCodeComments()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::Handle<v8::internal::Code>, std::allocator<v8::internal::Handle<v8::internal::Code> > >::_M_realloc_insert<v8::internal::Handle<v8::internal::Code> const&>(__gnu_cxx::__normal_iterator<v8::internal::Handle<v8::internal::Code>*, std::vector<v8::internal::Handle<v8::internal::Code>, std::allocator<v8::internal::Handle<v8::internal::Code> > > >, v8::internal::Handle<v8::internal::Code> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::AddCodeTarget(v8::internal::Handle<v8::internal::Code>)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::internal::Handle<v8::internal::HeapObject>, std::pair<v8::internal::Handle<v8::internal::HeapObject> const, unsigned long>, std::allocator<std::pair<v8::internal::Handle<v8::internal::HeapObject> const, unsigned long> >, std::__detail::_Select1st, v8::internal::Handle<v8::internal::HeapObject>::equal_to, v8::internal::Handle<v8::internal::HeapObject>::hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](v8::internal::Handle<v8::internal::HeapObject> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::Handle<v8::internal::HeapObject>, std::allocator<v8::internal::Handle<v8::internal::HeapObject> > >::_M_realloc_insert<v8::internal::Handle<v8::internal::HeapObject> const&>(__gnu_cxx::__normal_iterator<v8::internal::Handle<v8::internal::HeapObject>*, std::vector<v8::internal::Handle<v8::internal::HeapObject>, std::allocator<v8::internal::Handle<v8::internal::HeapObject> > > >, v8::internal::Handle<v8::internal::HeapObject> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::AssemblerBase::AddEmbeddedObject(v8::internal::Handle<v8::internal::HeapObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::GetBailoutReason(v8::internal::BailoutReason)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::GetAbortReason(v8::internal::AbortReason)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IsValidAbortReason(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentEntry::comment_length() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentEntry::size() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsIterator::CodeCommentsIterator(unsigned long, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsIterator::size() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsIterator::GetComment() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsIterator::GetCommentSize() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsIterator::GetPCOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsIterator::Next()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsIterator::HasCurrent() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsWriter::Emit(v8::internal::Assembler*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsWriter::entry_count() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsWriter::section_size() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PrintCodeCommentsSection(std::ostream&, unsigned long, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::internal::CodeCommentEntry, std::allocator<v8::internal::CodeCommentEntry> >::_M_realloc_insert<v8::internal::CodeCommentEntry>(__gnu_cxx::__normal_iterator<v8::internal::CodeCommentEntry*, std::vector<v8::internal::CodeCommentEntry, std::allocator<v8::internal::CodeCommentEntry> > >, v8::internal::CodeCommentEntry&&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeCommentsWriter::Add(unsigned int, std::string)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeDesc::Initialize(v8::internal::CodeDesc*, v8::internal::Assembler*, int, int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::RuntimeCEntry(v8::internal::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CEntry(v8::internal::Isolate*, int, v8::internal::SaveFPRegsMode, v8::internal::ArgvMode, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ApiGetter(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CallApiCallback(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::LoadGlobalIC(v8::internal::Isolate*, v8::internal::TypeofMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::LoadGlobalICInOptimizedCode(v8::internal::Isolate*, v8::internal::TypeofMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::StoreOwnIC(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::StoreOwnICInOptimizedCode(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::KeyedStoreIC_SloppyArguments(v8::internal::Isolate*, v8::internal::KeyedAccessStoreMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ElementsTransitionAndStore(v8::internal::Isolate*, v8::internal::KeyedAccessStoreMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::StoreFastElementIC(v8::internal::Isolate*, v8::internal::KeyedAccessStoreMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::BinaryOperation(v8::internal::Isolate*, v8::internal::Operation)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::NonPrimitiveToPrimitive(v8::internal::Isolate*, v8::internal::ToPrimitiveHint)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::OrdinaryToPrimitive(v8::internal::Isolate*, v8::internal::OrdinaryToPrimitiveHint)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::StringAdd(v8::internal::Isolate*, v8::internal::StringAddFlags)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ResumeGenerator(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::FrameDropperTrampoline(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::HandleDebuggerStatement(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::FastNewFunctionContext(v8::internal::Isolate*, v8::internal::ScopeType)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ArgumentAdaptor(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::Call(v8::internal::Isolate*, v8::internal::ConvertReceiverMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CallWithArrayLike(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CallWithSpread(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CallFunction(v8::internal::Isolate*, v8::internal::ConvertReceiverMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CallVarargs(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CallForwardVarargs(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::CallFunctionForwardVarargs(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::Construct(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ConstructWithSpread(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ConstructFunction(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ConstructVarargs(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ConstructForwardVarargs(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ConstructFunctionForwardVarargs(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::InterpreterPushArgsThenCall(v8::internal::Isolate*, v8::internal::ConvertReceiverMode, v8::internal::InterpreterPushArgsMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::InterpreterPushArgsThenConstruct(v8::internal::Isolate*, v8::internal::InterpreterPushArgsMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::InterpreterCEntry(v8::internal::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::InterpreterOnStackReplacement(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ArrayNoArgumentConstructor(v8::internal::Isolate*, v8::internal::ElementsKind, v8::internal::AllocationSiteOverrideMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeFactory::ArraySingleArgumentConstructor(v8::internal::Isolate*, v8::internal::ElementsKind, v8::internal::AllocationSiteOverrideMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::constant_pool() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::instruction_start() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::instruction_end() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::instruction_size() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::relocation_start() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::relocation_end() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::relocation_size() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::code_comments() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeReference::code_comments_size() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::CompilationCache(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationSubCache::GetTable(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationSubCache::Age()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationSubCache::Iterate(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationSubCache::Clear()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationSubCache::Remove(v8::internal::Handle<v8::internal::SharedFunctionInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheScript::CompilationCacheScript(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheScript::HasOrigin(v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::MaybeHandle<v8::internal::Object>, int, int, v8::ScriptOriginOptions)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheScript::Lookup(v8::internal::Handle<v8::internal::String>, v8::internal::MaybeHandle<v8::internal::Object>, int, int, v8::ScriptOriginOptions, v8::internal::Handle<v8::internal::Context>, v8::internal::LanguageMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheScript::Put(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::Context>, v8::internal::LanguageMode, v8::internal::Handle<v8::internal::SharedFunctionInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheEval::Lookup(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Context>, v8::internal::LanguageMode, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheEval::Put(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Context>, v8::internal::Handle<v8::internal::FeedbackCell>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheRegExp::Put(v8::internal::Handle<v8::internal::String>, v8::base::Flags<v8::internal::JSRegExp::Flag, int>, v8::internal::Handle<v8::internal::FixedArray>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCacheRegExp::Lookup(v8::internal::Handle<v8::internal::String>, v8::base::Flags<v8::internal::JSRegExp::Flag, int>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::Remove(v8::internal::Handle<v8::internal::SharedFunctionInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::LookupScript(v8::internal::Handle<v8::internal::String>, v8::internal::MaybeHandle<v8::internal::Object>, int, int, v8::ScriptOriginOptions, v8::internal::Handle<v8::internal::Context>, v8::internal::LanguageMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::LookupEval(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Context>, v8::internal::LanguageMode, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::LookupRegExp(v8::internal::Handle<v8::internal::String>, v8::base::Flags<v8::internal::JSRegExp::Flag, int>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::PutScript(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::Context>, v8::internal::LanguageMode, v8::internal::Handle<v8::internal::SharedFunctionInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::PutEval(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Context>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::FeedbackCell>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::PutRegExp(v8::internal::Handle<v8::internal::String>, v8::base::Flags<v8::internal::JSRegExp::Flag, int>, v8::internal::Handle<v8::internal::FixedArray>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::Clear()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::Iterate(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::MarkCompactPrologue()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::EnableScriptAndEval()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CompilationCache::DisableScriptAndEval()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Logger::DefaultEventLoggerSentinel(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (v8::internal::CodeEventListener*), v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Name>, int, int)::{lambda(v8::internal::CodeEventListener*)#1}>::_M_invoke(std::_Any_data const&, v8::internal::CodeEventListener*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Name>, int, int)::{lambda(v8::internal::CodeEventListener*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Name>, int, int)::{lambda(v8::internal::CodeEventListener*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeEventDispatcher::CodeCreateEvent(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Handle<v8::internal::AbstractCode>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Name>, int, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Isolate::native_context()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeTracer::Scope::~Scope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::JSFunction::IsOptimized()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::JSFunction::set_code(v8::internal::Code)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::JSFunction::has_feedback_vector() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::set_function_data(v8::internal::Object, v8::internal::WriteBarrierMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::is_compiled() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::HasBytecodeArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::GetBytecodeArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::is_compiled_scope() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::inferred_name()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedFunctionInfo::set_scope_info(v8::internal::ScopeInfo, v8::internal::WriteBarrierMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::UnoptimizedCompilationJob::ExecuteJob()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::UnoptimizedCompilationJob::FinalizeJob(v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::UnoptimizedCompilationJob::FinalizeJob(v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OptimizedCompilationJob::PrepareJob(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OptimizedCompilationJob::ExecuteJob(v8::internal::RuntimeCallStats*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OptimizedCompilationJob::FinalizeJob(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OptimizedCompilationJob::RetryOptimization(v8::internal::BailoutReason)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OptimizedCompilationJob::AbortOptimization(v8::internal::BailoutReason)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OptimizedCompilationJob::RecordCompilationStats(v8::internal::OptimizedCompilationJob::CompilationMode, v8::internal::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::OptimizedCompilationJob::RecordFunctionCompilation(v8::internal::CodeEventListener::LogEventsAndTags, v8::internal::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::UnoptimizedCompileState::~UnoptimizedCompileState()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BackgroundCompileTask::BackgroundCompileTask(v8::internal::ScriptStreamingData*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BackgroundCompileTask::BackgroundCompileTask(v8::internal::ParseInfo const*, v8::internal::AstRawString const*, v8::internal::FunctionLiteral const*, v8::internal::WorkerThreadRuntimeCallStats*, v8::internal::TimedHistogram*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BackgroundCompileTask::~BackgroundCompileTask()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::CollectSourcePositions(v8::internal::Isolate*, v8::internal::Handle<v8::internal::SharedFunctionInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::CompileOptimized(v8::internal::Handle<v8::internal::JSFunction>, v8::internal::ConcurrencyMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CodeGenerationFromStringsAllowed(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Context>, v8::internal::Handle<v8::internal::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ModifyCodeGenerationFromStrings(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Context>, v8::internal::Handle<v8::internal::Object>*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::ValidateDynamicCompilationSource(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Context>, v8::internal::Handle<v8::internal::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::SharedFunctionInfo> v8::internal::Compiler::GetSharedFunctionInfo<v8::internal::Isolate>(v8::internal::FunctionLiteral*, v8::internal::Handle<v8::internal::Script>, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::FinalizeBackgroundCompileTask(v8::internal::BackgroundCompileTask*, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Isolate*, v8::internal::Compiler::ClearExceptionFlag)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::GetSharedFunctionInfoForStreamedScript(v8::internal::Isolate*, v8::internal::Handle<v8::internal::String>, v8::internal::Compiler::ScriptDetails const&, v8::ScriptOriginOptions, v8::internal::ScriptStreamingData*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::CompileForLiveEdit(v8::internal::ParseInfo*, v8::internal::Handle<v8::internal::Script>, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::GetSharedFunctionInfoForScript(v8::internal::Isolate*, v8::internal::Handle<v8::internal::String>, v8::internal::Compiler::ScriptDetails const&, v8::ScriptOriginOptions, v8::Extension*, v8::internal::ScriptData*, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason, v8::internal::NativesFlag)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::GetFunctionFromEval(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Handle<v8::internal::Context>, v8::internal::LanguageMode, v8::internal::ParseRestriction, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::GetFunctionFromValidatedString(v8::internal::Handle<v8::internal::Context>, v8::internal::MaybeHandle<v8::internal::String>, v8::internal::ParseRestriction, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::GetFunctionFromString(v8::internal::Handle<v8::internal::Context>, v8::internal::Handle<v8::internal::Object>, v8::internal::ParseRestriction, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::GetWrappedFunction(v8::internal::Handle<v8::internal::String>, v8::internal::Handle<v8::internal::FixedArray>, v8::internal::Handle<v8::internal::Context>, v8::internal::Compiler::ScriptDetails const&, v8::ScriptOriginOptions, v8::internal::ScriptData*, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::Compile(v8::internal::Handle<v8::internal::SharedFunctionInfo>, v8::internal::Compiler::ClearExceptionFlag, v8::internal::IsCompiledScope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Handle<v8::internal::SharedFunctionInfo> v8::internal::Compiler::GetSharedFunctionInfo<v8::internal::OffThreadIsolate>(v8::internal::FunctionLiteral*, v8::internal::Handle<v8::internal::Script>, v8::internal::OffThreadIsolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BackgroundCompileTask::Run()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::GetOptimizedCodeForOSR(v8::internal::Handle<v8::internal::JSFunction>, v8::internal::BailoutId, v8::internal::JavaScriptFrame*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::FinalizeOptimizedCompilationJob(v8::internal::OptimizedCompilationJob*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::PostInstantiation(v8::internal::Handle<v8::internal::JSFunction>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ScriptStreamingData::ScriptStreamingData(std::unique_ptr<v8::ScriptCompiler::ExternalSourceStream, std::default_delete<v8::ScriptCompiler::ExternalSourceStream> >, v8::ScriptCompiler::StreamedSource::Encoding)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ScriptStreamingData::~ScriptStreamingData()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ScriptStreamingData::Release()",
    "type": "CPP"
  },
  {
    "name": "v8::base::internal::OptionalStorage<std::function<void (v8::internal::HeapObject, v8::internal::FullObjectSlot, v8::internal::HeapObject)>, false, false>::OptionalStorage(v8::base::internal::OptionalStorage<std::function<void (v8::internal::HeapObject, v8::internal::FullObjectSlot, v8::internal::HeapObject)>, false, false> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::base::internal::OptionalStorageBase<std::function<void (v8::internal::HeapObject, v8::internal::FullObjectSlot, v8::internal::HeapObject)>, false>::~OptionalStorageBase()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Compiler::Compile(v8::internal::Handle<v8::internal::JSFunction>, v8::internal::Compiler::ClearExceptionFlag, v8::internal::IsCompiledScope*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::ConstantPool(v8::internal::Assembler*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::GetRelocInfoStatusFor(v8::internal::ConstantPoolKey const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::StartBlock()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::EndBlock()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::IsBlocked() const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::SetNextCheckIn(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::Emit(v8::internal::ConstantPoolKey const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::ShouldEmitNow(v8::internal::Jump, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::ComputeSize(v8::internal::Jump, v8::internal::Alignment) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::IsAlignmentRequiredIfEmittedAt(v8::internal::Jump, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::IsInImmRangeIfEmittedAt(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::BlockScope::BlockScope(v8::internal::Assembler*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::BlockScope::BlockScope(v8::internal::Assembler*, v8::internal::PoolEmissionCheck)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::BlockScope::~BlockScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::MaybeCheck()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<v8::internal::ConstantPoolKey, std::pair<v8::internal::ConstantPoolKey const, int>, std::_Select1st<std::pair<v8::internal::ConstantPoolKey const, int> >, std::less<v8::internal::ConstantPoolKey>, std::allocator<std::pair<v8::internal::ConstantPoolKey const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<v8::internal::ConstantPoolKey const, int> >*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::~ConstantPool()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::Clear()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_iterator<std::pair<v8::internal::ConstantPoolKey const, int> > std::_Rb_tree<v8::internal::ConstantPoolKey, std::pair<v8::internal::ConstantPoolKey const, int>, std::_Select1st<std::pair<v8::internal::ConstantPoolKey const, int> >, std::less<v8::internal::ConstantPoolKey>, std::allocator<std::pair<v8::internal::ConstantPoolKey const, int> > >::_M_emplace_equal<std::pair<v8::internal::ConstantPoolKey, int> >(std::pair<v8::internal::ConstantPoolKey, int>&&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::RecordKey(v8::internal::ConstantPoolKey, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::RecordEntry(unsigned int, v8::internal::RelocInfo::Mode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::RecordEntry(unsigned long, v8::internal::RelocInfo::Mode)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<v8::internal::ConstantPoolKey, std::pair<v8::internal::ConstantPoolKey const, int>, std::_Select1st<std::pair<v8::internal::ConstantPoolKey const, int> >, std::less<v8::internal::ConstantPoolKey>, std::allocator<std::pair<v8::internal::ConstantPoolKey const, int> > >::equal_range(v8::internal::ConstantPoolKey const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::EmitEntries()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ConstantPool::EmitAndClear(v8::internal::Jump)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceEncoder::ExternalReferenceEncoder(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceEncoder::TryEncode(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceEncoder::Encode(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceEncoder::NameOfAddress(v8::internal::Isolate*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::ResolveSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::Add(unsigned long, int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::AddReferences(v8::internal::Isolate*, int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::AddBuiltins(int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::AddRuntimeFunctions(int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::AddIsolateAddresses(v8::internal::Isolate*, int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::AddAccessors(int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::AddStubCache(v8::internal::Isolate*, int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::GetStatsCounterAddress(v8::internal::StatsCounter*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::AddNativeCodeStatsCounters(v8::internal::Isolate*, int*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReferenceTable::Init(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "long v8::internal::SearchStringRaw<unsigned char const, unsigned char const>(v8::internal::Isolate*, unsigned char const*, int, unsigned char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "long v8::internal::SearchStringRaw<unsigned short const, unsigned char const>(v8::internal::Isolate*, unsigned short const*, int, unsigned char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "long v8::internal::SearchStringRaw<unsigned short const, unsigned short const>(v8::internal::Isolate*, unsigned short const*, int, unsigned short const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "long v8::internal::SearchStringRaw<unsigned char const, unsigned short const>(v8::internal::Isolate*, unsigned char const*, int, unsigned short const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned short, unsigned char>::FailSearch(v8::internal::StringSearch<unsigned short, unsigned char>*, v8::internal::Vector<unsigned char const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned char, unsigned char>::BoyerMooreSearch(v8::internal::StringSearch<unsigned char, unsigned char>*, v8::internal::Vector<unsigned char const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned short, unsigned char>::BoyerMooreSearch(v8::internal::StringSearch<unsigned short, unsigned char>*, v8::internal::Vector<unsigned char const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned char, unsigned short>::BoyerMooreSearch(v8::internal::StringSearch<unsigned char, unsigned short>*, v8::internal::Vector<unsigned short const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned short, unsigned short>::BoyerMooreSearch(v8::internal::StringSearch<unsigned short, unsigned short>*, v8::internal::Vector<unsigned short const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::modulo_double_double(double, double)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::libc_memchr(void*, int, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned char, unsigned char>::SingleCharSearch(v8::internal::StringSearch<unsigned char, unsigned char>*, v8::internal::Vector<unsigned char const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned short, unsigned char>::SingleCharSearch(v8::internal::StringSearch<unsigned short, unsigned char>*, v8::internal::Vector<unsigned char const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned char, unsigned short>::SingleCharSearch(v8::internal::StringSearch<unsigned char, unsigned short>*, v8::internal::Vector<unsigned short const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned short, unsigned short>::SingleCharSearch(v8::internal::StringSearch<unsigned short, unsigned short>*, v8::internal::Vector<unsigned short const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::libc_memcpy(void*, void const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::libc_memmove(void*, void const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::libc_memset(void*, int, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::GetOrCreateHash(v8::internal::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::abort_with_reason(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned char, unsigned char>::LinearSearch(v8::internal::StringSearch<unsigned char, unsigned char>*, v8::internal::Vector<unsigned char const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned short, unsigned char>::LinearSearch(v8::internal::StringSearch<unsigned short, unsigned char>*, v8::internal::Vector<unsigned char const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned char, unsigned short>::LinearSearch(v8::internal::StringSearch<unsigned char, unsigned short>*, v8::internal::Vector<unsigned short const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::StringSearch<unsigned short, unsigned short>::LinearSearch(v8::internal::StringSearch<unsigned short, unsigned short>*, v8::internal::Vector<unsigned short const>, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Create(v8::ApiFunction*, v8::internal::ExternalReference::Type)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Create(v8::internal::Runtime::FunctionId)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Create(v8::internal::Runtime::Function const*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Create(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::isolate_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::builtins_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::handle_scope_implementer_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::interpreter_dispatch_table_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::interpreter_dispatch_counters(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_interpreter_entry_trampoline_instruction_start(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::bytecode_size_table_address()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Create(v8::internal::StatsCounter*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Create(v8::internal::IsolateAddressId, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Create(v8::internal::SCTableReference const&)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::incremental_marking_record_write_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::insert_remembered_set_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::delete_handle_scope_extensions()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ephemeron_key_write_barrier_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::get_date_field_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::date_cache_stamp(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::runtime_function_table_address_for_unittests(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::Redirect(unsigned long, v8::internal::ExternalReference::Type)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::stress_deopt_count(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::force_slow_path(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::new_deoptimizer_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::compute_output_frames_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f32_trunc()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f32_floor()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f32_ceil()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f32_nearest_int()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f64_trunc()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f64_floor()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f64_ceil()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_f64_nearest_int()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_int64_to_float32()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_uint64_to_float32()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_int64_to_float64()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_uint64_to_float64()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_float32_to_int64()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_float32_to_uint64()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_float64_to_int64()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_float64_to_uint64()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_int64_div()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_int64_mod()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_uint64_div()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_uint64_mod()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word32_ctz()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word64_ctz()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word32_popcnt()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word64_popcnt()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word32_rol()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word32_ror()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word64_rol()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_word64_ror()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_memory_init()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_memory_copy()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_memory_fill()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::f64_acos_wrapper_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::f64_asin_wrapper_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_float64_pow()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::f64_mod_wrapper_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::wasm_call_trap_callback_for_testing()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::isolate_root(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::allocation_sites_list_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_jslimit(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_real_jslimit(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::heap_is_marking_flag_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::new_space_allocation_top_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::new_space_allocation_limit_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::old_space_allocation_top_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::old_space_allocation_limit_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::handle_scope_level_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::handle_scope_next_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::handle_scope_limit_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::scheduled_exception_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_pending_message_obj(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::abort_with_reason()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_min_int()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_mock_arraybuffer_allocator_flag()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_runtime_stats_flag()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_one_half()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_the_hole_nan()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_uint32_bias()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_float_abs_constant()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_float_neg_constant()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_double_abs_constant()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_double_neg_constant()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::is_profiling_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::invoke_function_callback()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::invoke_accessor_getter_callback()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::re_check_stack_guard_state(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::re_grow_stack(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::re_match_for_call_from_js(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::re_case_insensitive_compare_uc16(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::re_word_character_map(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_static_offsets_vector(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_regexp_stack_limit_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::address_of_regexp_stack_memory_top_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_acos_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_acosh_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_asin_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_asinh_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_atan_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_atanh_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_atan2_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_cbrt_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_cos_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_cosh_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_exp_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_expm1_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_log_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_log1p_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_log10_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_log2_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_sin_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_sinh_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_tan_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_tanh_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::ieee754_pow_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::libc_memchr_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::libc_memcpy_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::libc_memmove_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::libc_memset_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::printf_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::refill_math_random()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::jsarray_array_join_concat_to_sequential_string()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::orderedhashmap_gethash_raw()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::get_or_create_hash_raw()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::jsreceiver_create_identity_hash()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::compute_integer_hash()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::copy_fast_number_jsarray_elements_to_typed_array()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::copy_typed_array_elements_to_typed_array()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::copy_typed_array_elements_slice()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::try_internalize_string_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::string_to_array_index_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::smi_lexicographic_compare_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::mutable_big_int_absolute_add_and_canonicalize_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::mutable_big_int_absolute_compare_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::mutable_big_int_absolute_sub_and_canonicalize_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::check_object_type()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::intl_convert_one_byte_to_lower()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::intl_to_latin1_lower_table()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference v8::internal::ExternalReference::search_string_raw<unsigned char const, unsigned char const>()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::search_string_raw_one_one()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference v8::internal::ExternalReference::search_string_raw<unsigned char const, unsigned short const>()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::search_string_raw_one_two()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference v8::internal::ExternalReference::search_string_raw<unsigned short const, unsigned char const>()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::search_string_raw_two_one()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference v8::internal::ExternalReference::search_string_raw<unsigned short const, unsigned short const>()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::search_string_raw_two_two()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::FromRawAddress(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::cpu_features()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::promise_hook_flags_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::promise_hook_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::async_event_delegate_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::debug_execution_mode_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::debug_is_active_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::debug_hook_on_function_call_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::runtime_function_table_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::invalidate_prototype_chains_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::mod_two_doubles_operation()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::debug_suspended_generator_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::debug_restart_fp_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::fast_c_call_caller_fp_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::fast_c_call_caller_pc_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::stack_is_iterable_address(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::call_enqueue_microtask_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::atomic_pair_load_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::atomic_pair_store_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::atomic_pair_add_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::atomic_pair_sub_function()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ExternalReference::atomic_pair_and_function()",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/aarch64-linux-gnu/libc-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "abort",
    "type": "CPP"
  },
  {
    "name": "__libc_init_first",
    "type": "CPP"
  },
  {
    "name": "__libc_start_main",
    "type": "CPP"
  },
  {
    "name": "gnu_get_libc_release",
    "type": "CPP"
  },
  {
    "name": "gnu_get_libc_version",
    "type": "CPP"
  },
  {
    "name": "__errno_location",
    "type": "CPP"
  },
  {
    "name": "iconv_open",
    "type": "CPP"
  },
  {
    "name": "iconv",
    "type": "CPP"
  },
  {
    "name": "iconv_close",
    "type": "CPP"
  },
  {
    "name": "__gconv_get_modules_db",
    "type": "CPP"
  },
  {
    "name": "__gconv_get_alias_db",
    "type": "CPP"
  },
  {
    "name": "__gconv_transliterate",
    "type": "CPP"
  },
  {
    "name": "__gconv_get_cache",
    "type": "CPP"
  },
  {
    "name": "setlocale",
    "type": "CPP"
  },
  {
    "name": "localeconv",
    "type": "CPP"
  },
  {
    "name": "nl_langinfo",
    "type": "CPP"
  },
  {
    "name": "__nl_langinfo_l",
    "type": "CPP"
  },
  {
    "name": "__ctype_get_mb_cur_max",
    "type": "CPP"
  },
  {
    "name": "__newlocale",
    "type": "CPP"
  },
  {
    "name": "__duplocale",
    "type": "CPP"
  },
  {
    "name": "__freelocale",
    "type": "CPP"
  },
  {
    "name": "__uselocale",
    "type": "CPP"
  },
  {
    "name": "__assert_fail",
    "type": "CPP"
  },
  {
    "name": "__assert_perror_fail",
    "type": "CPP"
  },
  {
    "name": "__assert",
    "type": "CPP"
  },
  {
    "name": "isalnum",
    "type": "CPP"
  },
  {
    "name": "isalpha",
    "type": "CPP"
  },
  {
    "name": "iscntrl",
    "type": "CPP"
  },
  {
    "name": "isdigit",
    "type": "CPP"
  },
  {
    "name": "islower",
    "type": "CPP"
  },
  {
    "name": "isgraph",
    "type": "CPP"
  },
  {
    "name": "isprint",
    "type": "CPP"
  },
  {
    "name": "ispunct",
    "type": "CPP"
  },
  {
    "name": "isspace",
    "type": "CPP"
  },
  {
    "name": "isupper",
    "type": "CPP"
  },
  {
    "name": "isxdigit",
    "type": "CPP"
  },
  {
    "name": "tolower",
    "type": "CPP"
  },
  {
    "name": "toupper",
    "type": "CPP"
  },
  {
    "name": "isblank",
    "type": "CPP"
  },
  {
    "name": "_tolower",
    "type": "CPP"
  },
  {
    "name": "_toupper",
    "type": "CPP"
  },
  {
    "name": "toascii",
    "type": "CPP"
  },
  {
    "name": "isascii",
    "type": "CPP"
  },
  {
    "name": "__isblank_l",
    "type": "CPP"
  },
  {
    "name": "__isalnum_l",
    "type": "CPP"
  },
  {
    "name": "__isalpha_l",
    "type": "CPP"
  },
  {
    "name": "__iscntrl_l",
    "type": "CPP"
  },
  {
    "name": "__isdigit_l",
    "type": "CPP"
  },
  {
    "name": "__islower_l",
    "type": "CPP"
  },
  {
    "name": "__isgraph_l",
    "type": "CPP"
  },
  {
    "name": "__isprint_l",
    "type": "CPP"
  },
  {
    "name": "__ispunct_l",
    "type": "CPP"
  },
  {
    "name": "__isspace_l",
    "type": "CPP"
  },
  {
    "name": "__isupper_l",
    "type": "CPP"
  },
  {
    "name": "__isxdigit_l",
    "type": "CPP"
  },
  {
    "name": "__tolower_l",
    "type": "CPP"
  },
  {
    "name": "__toupper_l",
    "type": "CPP"
  },
  {
    "name": "__isctype",
    "type": "CPP"
  },
  {
    "name": "__ctype_b_loc",
    "type": "CPP"
  },
  {
    "name": "__ctype_toupper_loc",
    "type": "CPP"
  },
  {
    "name": "__ctype_tolower_loc",
    "type": "CPP"
  },
  {
    "name": "__ctype_init",
    "type": "CPP"
  },
  {
    "name": "bindtextdomain",
    "type": "CPP"
  },
  {
    "name": "bind_textdomain_codeset",
    "type": "CPP"
  },
  {
    "name": "__dcgettext",
    "type": "CPP"
  },
  {
    "name": "__dgettext",
    "type": "CPP"
  },
  {
    "name": "gettext",
    "type": "CPP"
  },
  {
    "name": "dcngettext",
    "type": "CPP"
  },
  {
    "name": "dngettext",
    "type": "CPP"
  },
  {
    "name": "ngettext",
    "type": "CPP"
  },
  {
    "name": "textdomain",
    "type": "CPP"
  },
  {
    "name": "catopen",
    "type": "CPP"
  },
  {
    "name": "catgets",
    "type": "CPP"
  },
  {
    "name": "catclose",
    "type": "CPP"
  },
  {
    "name": "__open_catalog",
    "type": "CPP"
  },
  {
    "name": "__isinfl",
    "type": "CPP"
  },
  {
    "name": "__isnanl",
    "type": "CPP"
  },
  {
    "name": "__finitel",
    "type": "CPP"
  },
  {
    "name": "copysignl",
    "type": "CPP"
  },
  {
    "name": "modfl",
    "type": "CPP"
  },
  {
    "name": "frexpl",
    "type": "CPP"
  },
  {
    "name": "__signbitl",
    "type": "CPP"
  },
  {
    "name": "ldexpl",
    "type": "CPP"
  },
  {
    "name": "__isinf",
    "type": "CPP"
  },
  {
    "name": "__isnan",
    "type": "CPP"
  },
  {
    "name": "__finite",
    "type": "CPP"
  },
  {
    "name": "copysign",
    "type": "CPP"
  },
  {
    "name": "modf",
    "type": "CPP"
  },
  {
    "name": "frexp",
    "type": "CPP"
  },
  {
    "name": "__signbit",
    "type": "CPP"
  },
  {
    "name": "ldexp",
    "type": "CPP"
  },
  {
    "name": "__isinff",
    "type": "CPP"
  },
  {
    "name": "__isnanf",
    "type": "CPP"
  },
  {
    "name": "__finitef",
    "type": "CPP"
  },
  {
    "name": "copysignf",
    "type": "CPP"
  },
  {
    "name": "modff",
    "type": "CPP"
  },
  {
    "name": "frexpf",
    "type": "CPP"
  },
  {
    "name": "__signbitf",
    "type": "CPP"
  },
  {
    "name": "ldexpf",
    "type": "CPP"
  },
  {
    "name": "setjmp",
    "type": "CPP"
  },
  {
    "name": "_setjmp",
    "type": "CPP"
  },
  {
    "name": "__sigsetjmp",
    "type": "CPP"
  },
  {
    "name": "__libc_longjmp",
    "type": "CPP"
  },
  {
    "name": "bsd_signal",
    "type": "CPP"
  },
  {
    "name": "gsignal",
    "type": "CPP"
  },
  {
    "name": "killpg",
    "type": "CPP"
  },
  {
    "name": "__sigaction",
    "type": "CPP"
  },
  {
    "name": "sigprocmask",
    "type": "CPP"
  },
  {
    "name": "kill",
    "type": "CPP"
  },
  {
    "name": "sigpending",
    "type": "CPP"
  },
  {
    "name": "__sigsuspend",
    "type": "CPP"
  },
  {
    "name": "sigwait",
    "type": "CPP"
  },
  {
    "name": "sigblock",
    "type": "CPP"
  },
  {
    "name": "sigsetmask",
    "type": "CPP"
  },
  {
    "name": "__sigpause",
    "type": "CPP"
  },
  {
    "name": "sigpause",
    "type": "CPP"
  },
  {
    "name": "__xpg_sigpause",
    "type": "CPP"
  },
  {
    "name": "sigvec",
    "type": "CPP"
  },
  {
    "name": "sigstack",
    "type": "CPP"
  },
  {
    "name": "sigaltstack",
    "type": "CPP"
  },
  {
    "name": "siginterrupt",
    "type": "CPP"
  },
  {
    "name": "sigemptyset",
    "type": "CPP"
  },
  {
    "name": "sigfillset",
    "type": "CPP"
  },
  {
    "name": "sigaddset",
    "type": "CPP"
  },
  {
    "name": "sigdelset",
    "type": "CPP"
  },
  {
    "name": "sigismember",
    "type": "CPP"
  },
  {
    "name": "sigreturn",
    "type": "CPP"
  },
  {
    "name": "siggetmask",
    "type": "CPP"
  },
  {
    "name": "__sysv_signal",
    "type": "CPP"
  },
  {
    "name": "sigisemptyset",
    "type": "CPP"
  },
  {
    "name": "sigandset",
    "type": "CPP"
  },
  {
    "name": "sigorset",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmin",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmax",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_rtsig",
    "type": "CPP"
  },
  {
    "name": "__sigtimedwait",
    "type": "CPP"
  },
  {
    "name": "sigwaitinfo",
    "type": "CPP"
  },
  {
    "name": "sigqueue",
    "type": "CPP"
  },
  {
    "name": "sighold",
    "type": "CPP"
  },
  {
    "name": "sigrelse",
    "type": "CPP"
  },
  {
    "name": "sigignore",
    "type": "CPP"
  },
  {
    "name": "sigset",
    "type": "CPP"
  },
  {
    "name": "atof",
    "type": "CPP"
  },
  {
    "name": "atoi",
    "type": "CPP"
  },
  {
    "name": "atol",
    "type": "CPP"
  },
  {
    "name": "atoll",
    "type": "CPP"
  },
  {
    "name": "bsearch",
    "type": "CPP"
  },
  {
    "name": "qsort_r",
    "type": "CPP"
  },
  {
    "name": "qsort",
    "type": "CPP"
  },
  {
    "name": "getenv",
    "type": "CPP"
  },
  {
    "name": "putenv",
    "type": "CPP"
  },
  {
    "name": "setenv",
    "type": "CPP"
  },
  {
    "name": "unsetenv",
    "type": "CPP"
  },
  {
    "name": "clearenv",
    "type": "CPP"
  },
  {
    "name": "__libc_secure_getenv",
    "type": "CPP"
  },
  {
    "name": "exit",
    "type": "CPP"
  },
  {
    "name": "on_exit",
    "type": "CPP"
  },
  {
    "name": "__cxa_atexit",
    "type": "CPP"
  },
  {
    "name": "__cxa_finalize",
    "type": "CPP"
  },
  {
    "name": "quick_exit",
    "type": "CPP"
  },
  {
    "name": "__cxa_at_quick_exit",
    "type": "CPP"
  },
  {
    "name": "__cxa_thread_atexit_impl",
    "type": "CPP"
  },
  {
    "name": "__call_tls_dtors",
    "type": "CPP"
  },
  {
    "name": "abs",
    "type": "CPP"
  },
  {
    "name": "imaxabs",
    "type": "CPP"
  },
  {
    "name": "llabs",
    "type": "CPP"
  },
  {
    "name": "div",
    "type": "CPP"
  },
  {
    "name": "imaxdiv",
    "type": "CPP"
  },
  {
    "name": "lldiv",
    "type": "CPP"
  },
  {
    "name": "mblen",
    "type": "CPP"
  },
  {
    "name": "mbstowcs",
    "type": "CPP"
  },
  {
    "name": "mbtowc",
    "type": "CPP"
  },
  {
    "name": "wcstombs",
    "type": "CPP"
  },
  {
    "name": "wctomb",
    "type": "CPP"
  },
  {
    "name": "srand",
    "type": "CPP"
  },
  {
    "name": "initstate",
    "type": "CPP"
  },
  {
    "name": "setstate",
    "type": "CPP"
  },
  {
    "name": "random",
    "type": "CPP"
  },
  {
    "name": "setstate_r",
    "type": "CPP"
  },
  {
    "name": "random_r",
    "type": "CPP"
  },
  {
    "name": "srandom_r",
    "type": "CPP"
  },
  {
    "name": "initstate_r",
    "type": "CPP"
  },
  {
    "name": "rand",
    "type": "CPP"
  },
  {
    "name": "rand_r",
    "type": "CPP"
  },
  {
    "name": "drand48",
    "type": "CPP"
  },
  {
    "name": "erand48",
    "type": "CPP"
  },
  {
    "name": "lrand48",
    "type": "CPP"
  },
  {
    "name": "nrand48",
    "type": "CPP"
  },
  {
    "name": "mrand48",
    "type": "CPP"
  },
  {
    "name": "jrand48",
    "type": "CPP"
  },
  {
    "name": "srand48",
    "type": "CPP"
  },
  {
    "name": "seed48",
    "type": "CPP"
  },
  {
    "name": "lcong48",
    "type": "CPP"
  },
  {
    "name": "drand48_r",
    "type": "CPP"
  },
  {
    "name": "erand48_r",
    "type": "CPP"
  },
  {
    "name": "lrand48_r",
    "type": "CPP"
  },
  {
    "name": "nrand48_r",
    "type": "CPP"
  },
  {
    "name": "mrand48_r",
    "type": "CPP"
  },
  {
    "name": "jrand48_r",
    "type": "CPP"
  },
  {
    "name": "srand48_r",
    "type": "CPP"
  },
  {
    "name": "seed48_r",
    "type": "CPP"
  },
  {
    "name": "lcong48_r",
    "type": "CPP"
  },
  {
    "name": "getrandom",
    "type": "CPP"
  },
  {
    "name": "getentropy",
    "type": "CPP"
  },
  {
    "name": "strfromf",
    "type": "CPP"
  },
  {
    "name": "strfromd",
    "type": "CPP"
  },
  {
    "name": "strfromf128",
    "type": "CPP"
  },
  {
    "name": "__strtol_internal",
    "type": "CPP"
  },
  {
    "name": "strtol",
    "type": "CPP"
  },
  {
    "name": "__strtoul_internal",
    "type": "CPP"
  },
  {
    "name": "strtoul",
    "type": "CPP"
  },
  {
    "name": "__strtol_l",
    "type": "CPP"
  },
  {
    "name": "__strtoul_l",
    "type": "CPP"
  },
  {
    "name": "__strtof_internal",
    "type": "CPP"
  },
  {
    "name": "strtof",
    "type": "CPP"
  },
  {
    "name": "__strtod_internal",
    "type": "CPP"
  },
  {
    "name": "strtod",
    "type": "CPP"
  },
  {
    "name": "__strtold_internal",
    "type": "CPP"
  },
  {
    "name": "strtof128",
    "type": "CPP"
  },
  {
    "name": "strtof32_l",
    "type": "CPP"
  },
  {
    "name": "__strtod_l",
    "type": "CPP"
  },
  {
    "name": "strtof128_l",
    "type": "CPP"
  },
  {
    "name": "__strtof_nan",
    "type": "CPP"
  },
  {
    "name": "__strtod_nan",
    "type": "CPP"
  },
  {
    "name": "__strtold_nan",
    "type": "CPP"
  },
  {
    "name": "__libc_system",
    "type": "CPP"
  },
  {
    "name": "realpath",
    "type": "CPP"
  },
  {
    "name": "canonicalize_file_name",
    "type": "CPP"
  },
  {
    "name": "a64l",
    "type": "CPP"
  },
  {
    "name": "l64a",
    "type": "CPP"
  },
  {
    "name": "rpmatch",
    "type": "CPP"
  },
  {
    "name": "strfmon",
    "type": "CPP"
  },
  {
    "name": "__strfmon_l",
    "type": "CPP"
  },
  {
    "name": "getsubopt",
    "type": "CPP"
  },
  {
    "name": "__xpg_basename",
    "type": "CPP"
  },
  {
    "name": "fmtmsg",
    "type": "CPP"
  },
  {
    "name": "addseverity",
    "type": "CPP"
  },
  {
    "name": "strtoimax",
    "type": "CPP"
  },
  {
    "name": "strtoumax",
    "type": "CPP"
  },
  {
    "name": "wcstoimax",
    "type": "CPP"
  },
  {
    "name": "wcstoumax",
    "type": "CPP"
  },
  {
    "name": "getcontext",
    "type": "CPP"
  },
  {
    "name": "setcontext",
    "type": "CPP"
  },
  {
    "name": "makecontext",
    "type": "CPP"
  },
  {
    "name": "swapcontext",
    "type": "CPP"
  },
  {
    "name": "ctermid",
    "type": "CPP"
  },
  {
    "name": "cuserid",
    "type": "CPP"
  },
  {
    "name": "_IO_vfprintf",
    "type": "CPP"
  },
  {
    "name": "vprintf",
    "type": "CPP"
  },
  {
    "name": "__printf_fp",
    "type": "CPP"
  },
  {
    "name": "register_printf_specifier",
    "type": "CPP"
  },
  {
    "name": "register_printf_function",
    "type": "CPP"
  },
  {
    "name": "parse_printf_format",
    "type": "CPP"
  },
  {
    "name": "register_printf_modifier",
    "type": "CPP"
  },
  {
    "name": "register_printf_type",
    "type": "CPP"
  },
  {
    "name": "printf_size",
    "type": "CPP"
  },
  {
    "name": "printf_size_info",
    "type": "CPP"
  },
  {
    "name": "fprintf",
    "type": "CPP"
  },
  {
    "name": "_IO_printf",
    "type": "CPP"
  },
  {
    "name": "__snprintf",
    "type": "CPP"
  },
  {
    "name": "_IO_sprintf",
    "type": "CPP"
  },
  {
    "name": "__asprintf",
    "type": "CPP"
  },
  {
    "name": "dprintf",
    "type": "CPP"
  },
  {
    "name": "vfwprintf",
    "type": "CPP"
  },
  {
    "name": "__vfscanf",
    "type": "CPP"
  },
  {
    "name": "vfwscanf",
    "type": "CPP"
  },
  {
    "name": "fscanf",
    "type": "CPP"
  },
  {
    "name": "scanf",
    "type": "CPP"
  },
  {
    "name": "_IO_sscanf",
    "type": "CPP"
  },
  {
    "name": "perror",
    "type": "CPP"
  },
  {
    "name": "psignal",
    "type": "CPP"
  },
  {
    "name": "tmpfile",
    "type": "CPP"
  },
  {
    "name": "tmpnam",
    "type": "CPP"
  },
  {
    "name": "tmpnam_r",
    "type": "CPP"
  },
  {
    "name": "tempnam",
    "type": "CPP"
  },
  {
    "name": "getline",
    "type": "CPP"
  },
  {
    "name": "getw",
    "type": "CPP"
  },
  {
    "name": "putw",
    "type": "CPP"
  },
  {
    "name": "remove",
    "type": "CPP"
  },
  {
    "name": "rename",
    "type": "CPP"
  },
  {
    "name": "renameat",
    "type": "CPP"
  },
  {
    "name": "renameat2",
    "type": "CPP"
  },
  {
    "name": "flockfile",
    "type": "CPP"
  },
  {
    "name": "ftrylockfile",
    "type": "CPP"
  },
  {
    "name": "funlockfile",
    "type": "CPP"
  },
  {
    "name": "__isoc99_scanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_fscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vfscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_sscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vsscanf",
    "type": "CPP"
  },
  {
    "name": "psiginfo",
    "type": "CPP"
  },
  {
    "name": "_IO_file_doallocate",
    "type": "CPP"
  },
  {
    "name": "fclose",
    "type": "CPP"
  },
  {
    "name": "fdopen",
    "type": "CPP"
  },
  {
    "name": "fflush",
    "type": "CPP"
  },
  {
    "name": "fgetpos",
    "type": "CPP"
  },
  {
    "name": "fgets",
    "type": "CPP"
  },
  {
    "name": "fopen",
    "type": "CPP"
  },
  {
    "name": "fopencookie",
    "type": "CPP"
  },
  {
    "name": "fputs",
    "type": "CPP"
  },
  {
    "name": "fread",
    "type": "CPP"
  },
  {
    "name": "fsetpos",
    "type": "CPP"
  },
  {
    "name": "ftell",
    "type": "CPP"
  },
  {
    "name": "fwrite",
    "type": "CPP"
  },
  {
    "name": "__getdelim",
    "type": "CPP"
  },
  {
    "name": "_IO_getline_info",
    "type": "CPP"
  },
  {
    "name": "_IO_getline",
    "type": "CPP"
  },
  {
    "name": "gets",
    "type": "CPP"
  },
  {
    "name": "_IO_padn",
    "type": "CPP"
  },
  {
    "name": "_IO_proc_close",
    "type": "CPP"
  },
  {
    "name": "_IO_proc_open",
    "type": "CPP"
  },
  {
    "name": "_IO_popen",
    "type": "CPP"
  },
  {
    "name": "_IO_puts",
    "type": "CPP"
  },
  {
    "name": "_IO_seekoff",
    "type": "CPP"
  },
  {
    "name": "_IO_seekpos",
    "type": "CPP"
  },
  {
    "name": "_IO_setbuffer",
    "type": "CPP"
  },
  {
    "name": "_IO_setvbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_ungetc",
    "type": "CPP"
  },
  {
    "name": "_IO_vsprintf",
    "type": "CPP"
  },
  {
    "name": "__vsscanf",
    "type": "CPP"
  },
  {
    "name": "fputwc",
    "type": "CPP"
  },
  {
    "name": "fputwc_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgetwc",
    "type": "CPP"
  },
  {
    "name": "fgetwc_unlocked",
    "type": "CPP"
  },
  {
    "name": "getwchar",
    "type": "CPP"
  },
  {
    "name": "getwchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgetws",
    "type": "CPP"
  },
  {
    "name": "fgetws_unlocked",
    "type": "CPP"
  },
  {
    "name": "fputws",
    "type": "CPP"
  },
  {
    "name": "fputws_unlocked",
    "type": "CPP"
  },
  {
    "name": "ungetwc",
    "type": "CPP"
  },
  {
    "name": "putwc",
    "type": "CPP"
  },
  {
    "name": "putwc_unlocked",
    "type": "CPP"
  },
  {
    "name": "putwchar",
    "type": "CPP"
  },
  {
    "name": "putwchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "putchar",
    "type": "CPP"
  },
  {
    "name": "putchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "fwprintf",
    "type": "CPP"
  },
  {
    "name": "swprintf",
    "type": "CPP"
  },
  {
    "name": "vwprintf",
    "type": "CPP"
  },
  {
    "name": "wprintf",
    "type": "CPP"
  },
  {
    "name": "wscanf",
    "type": "CPP"
  },
  {
    "name": "fwscanf",
    "type": "CPP"
  },
  {
    "name": "vwscanf",
    "type": "CPP"
  },
  {
    "name": "vswprintf",
    "type": "CPP"
  },
  {
    "name": "vswscanf",
    "type": "CPP"
  },
  {
    "name": "swscanf",
    "type": "CPP"
  },
  {
    "name": "_IO_least_wmarker",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_main_wget_area",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_wbackup_area",
    "type": "CPP"
  },
  {
    "name": "_IO_wsetb",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_pbackfail",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_finish",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_uflow",
    "type": "CPP"
  },
  {
    "name": "__woverflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_xsputn",
    "type": "CPP"
  },
  {
    "name": "_IO_wdoallocbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_doallocate",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_wget_mode",
    "type": "CPP"
  },
  {
    "name": "_IO_free_wbackup_area",
    "type": "CPP"
  },
  {
    "name": "__wuflow",
    "type": "CPP"
  },
  {
    "name": "__wunderflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_xsgetn",
    "type": "CPP"
  },
  {
    "name": "_IO_sputbackwc",
    "type": "CPP"
  },
  {
    "name": "_IO_sungetwc",
    "type": "CPP"
  },
  {
    "name": "_IO_adjust_wcolumn",
    "type": "CPP"
  },
  {
    "name": "_IO_init_wmarker",
    "type": "CPP"
  },
  {
    "name": "_IO_wmarker_delta",
    "type": "CPP"
  },
  {
    "name": "_IO_seekwmark",
    "type": "CPP"
  },
  {
    "name": "_IO_unsave_wmarkers",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_underflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_seekoff",
    "type": "CPP"
  },
  {
    "name": "_IO_wdo_write",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_overflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_sync",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_xsputn",
    "type": "CPP"
  },
  {
    "name": "fwide",
    "type": "CPP"
  },
  {
    "name": "open_wmemstream",
    "type": "CPP"
  },
  {
    "name": "clearerr",
    "type": "CPP"
  },
  {
    "name": "feof",
    "type": "CPP"
  },
  {
    "name": "ferror",
    "type": "CPP"
  },
  {
    "name": "fileno",
    "type": "CPP"
  },
  {
    "name": "fputc",
    "type": "CPP"
  },
  {
    "name": "freopen",
    "type": "CPP"
  },
  {
    "name": "fseek",
    "type": "CPP"
  },
  {
    "name": "fgetc",
    "type": "CPP"
  },
  {
    "name": "getchar",
    "type": "CPP"
  },
  {
    "name": "open_memstream",
    "type": "CPP"
  },
  {
    "name": "pclose",
    "type": "CPP"
  },
  {
    "name": "_IO_putc",
    "type": "CPP"
  },
  {
    "name": "rewind",
    "type": "CPP"
  },
  {
    "name": "setbuf",
    "type": "CPP"
  },
  {
    "name": "setlinebuf",
    "type": "CPP"
  },
  {
    "name": "vasprintf",
    "type": "CPP"
  },
  {
    "name": "vdprintf",
    "type": "CPP"
  },
  {
    "name": "vscanf",
    "type": "CPP"
  },
  {
    "name": "__vsnprintf",
    "type": "CPP"
  },
  {
    "name": "obstack_vprintf",
    "type": "CPP"
  },
  {
    "name": "obstack_printf",
    "type": "CPP"
  },
  {
    "name": "fcloseall",
    "type": "CPP"
  },
  {
    "name": "fseeko",
    "type": "CPP"
  },
  {
    "name": "ftello",
    "type": "CPP"
  },
  {
    "name": "freopen64",
    "type": "CPP"
  },
  {
    "name": "__fbufsize",
    "type": "CPP"
  },
  {
    "name": "__freading",
    "type": "CPP"
  },
  {
    "name": "__fwriting",
    "type": "CPP"
  },
  {
    "name": "__freadable",
    "type": "CPP"
  },
  {
    "name": "__fwritable",
    "type": "CPP"
  },
  {
    "name": "__flbf",
    "type": "CPP"
  },
  {
    "name": "__fpurge",
    "type": "CPP"
  },
  {
    "name": "__fpending",
    "type": "CPP"
  },
  {
    "name": "__fsetlocking",
    "type": "CPP"
  },
  {
    "name": "__libc_fatal",
    "type": "CPP"
  },
  {
    "name": "fmemopen",
    "type": "CPP"
  },
  {
    "name": "fmemopen",
    "type": "CPP"
  },
  {
    "name": "__libc_readline_unlocked",
    "type": "CPP"
  },
  {
    "name": "clearerr_unlocked",
    "type": "CPP"
  },
  {
    "name": "feof_unlocked",
    "type": "CPP"
  },
  {
    "name": "ferror_unlocked",
    "type": "CPP"
  },
  {
    "name": "fputc_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgetc_unlocked",
    "type": "CPP"
  },
  {
    "name": "getchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "fflush_unlocked",
    "type": "CPP"
  },
  {
    "name": "putc_unlocked",
    "type": "CPP"
  },
  {
    "name": "_IO_peekc_locked",
    "type": "CPP"
  },
  {
    "name": "fread_unlocked",
    "type": "CPP"
  },
  {
    "name": "fwrite_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgets_unlocked",
    "type": "CPP"
  },
  {
    "name": "fputs_unlocked",
    "type": "CPP"
  },
  {
    "name": "_IO_file_sync",
    "type": "CPP"
  },
  {
    "name": "_IO_file_close",
    "type": "CPP"
  },
  {
    "name": "_IO_file_setbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_file_seek",
    "type": "CPP"
  },
  {
    "name": "_IO_file_seekoff",
    "type": "CPP"
  },
  {
    "name": "_IO_file_stat",
    "type": "CPP"
  },
  {
    "name": "_IO_file_write",
    "type": "CPP"
  },
  {
    "name": "_IO_file_read",
    "type": "CPP"
  },
  {
    "name": "_IO_file_xsputn",
    "type": "CPP"
  },
  {
    "name": "_IO_file_init",
    "type": "CPP"
  },
  {
    "name": "_IO_file_close_it",
    "type": "CPP"
  },
  {
    "name": "_IO_file_finish",
    "type": "CPP"
  },
  {
    "name": "_IO_file_open",
    "type": "CPP"
  },
  {
    "name": "_IO_file_fopen",
    "type": "CPP"
  },
  {
    "name": "_IO_file_attach",
    "type": "CPP"
  },
  {
    "name": "_IO_do_write",
    "type": "CPP"
  },
  {
    "name": "_IO_file_underflow",
    "type": "CPP"
  },
  {
    "name": "_IO_file_overflow",
    "type": "CPP"
  },
  {
    "name": "_IO_un_link",
    "type": "CPP"
  },
  {
    "name": "_IO_link_in",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_get_mode",
    "type": "CPP"
  },
  {
    "name": "_IO_free_backup_area",
    "type": "CPP"
  },
  {
    "name": "__overflow",
    "type": "CPP"
  },
  {
    "name": "__underflow",
    "type": "CPP"
  },
  {
    "name": "__uflow",
    "type": "CPP"
  },
  {
    "name": "_IO_setb",
    "type": "CPP"
  },
  {
    "name": "_IO_doallocbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_default_uflow",
    "type": "CPP"
  },
  {
    "name": "_IO_default_xsputn",
    "type": "CPP"
  },
  {
    "name": "_IO_sgetn",
    "type": "CPP"
  },
  {
    "name": "_IO_default_xsgetn",
    "type": "CPP"
  },
  {
    "name": "_IO_default_doallocate",
    "type": "CPP"
  },
  {
    "name": "_IO_enable_locks",
    "type": "CPP"
  },
  {
    "name": "_IO_init",
    "type": "CPP"
  },
  {
    "name": "_IO_default_finish",
    "type": "CPP"
  },
  {
    "name": "_IO_sputbackc",
    "type": "CPP"
  },
  {
    "name": "_IO_sungetc",
    "type": "CPP"
  },
  {
    "name": "_IO_adjust_column",
    "type": "CPP"
  },
  {
    "name": "_IO_flush_all",
    "type": "CPP"
  },
  {
    "name": "_flushlbf",
    "type": "CPP"
  },
  {
    "name": "_IO_init_marker",
    "type": "CPP"
  },
  {
    "name": "_IO_remove_marker",
    "type": "CPP"
  },
  {
    "name": "_IO_marker_difference",
    "type": "CPP"
  },
  {
    "name": "_IO_marker_delta",
    "type": "CPP"
  },
  {
    "name": "_IO_seekmark",
    "type": "CPP"
  },
  {
    "name": "_IO_unsave_markers",
    "type": "CPP"
  },
  {
    "name": "_IO_default_pbackfail",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_begin",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_end",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_next",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_file",
    "type": "CPP"
  },
  {
    "name": "_IO_list_lock",
    "type": "CPP"
  },
  {
    "name": "_IO_list_unlock",
    "type": "CPP"
  },
  {
    "name": "_IO_list_resetlock",
    "type": "CPP"
  },
  {
    "name": "_IO_str_underflow",
    "type": "CPP"
  },
  {
    "name": "_IO_str_overflow",
    "type": "CPP"
  },
  {
    "name": "_IO_str_pbackfail",
    "type": "CPP"
  },
  {
    "name": "_IO_str_init_static",
    "type": "CPP"
  },
  {
    "name": "_IO_str_init_readonly",
    "type": "CPP"
  },
  {
    "name": "_IO_str_seekoff",
    "type": "CPP"
  },
  {
    "name": "__libc_alloca_cutoff",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getscope",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setscope",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "pthread_exit",
    "type": "CPP"
  },
  {
    "name": "pthread_getschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_init",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_lock",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_unlock",
    "type": "CPP"
  },
  {
    "name": "pthread_setcancelstate",
    "type": "CPP"
  },
  {
    "name": "pthread_setcanceltype",
    "type": "CPP"
  },
  {
    "name": "__libc_pthread_init",
    "type": "CPP"
  },
  {
    "name": "__register_atfork",
    "type": "CPP"
  },
  {
    "name": "pthread_self",
    "type": "CPP"
  },
  {
    "name": "thrd_current",
    "type": "CPP"
  },
  {
    "name": "thrd_equal",
    "type": "CPP"
  },
  {
    "name": "thrd_sleep",
    "type": "CPP"
  },
  {
    "name": "thrd_yield",
    "type": "CPP"
  },
  {
    "name": "pthread_equal",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getdetachstate",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setdetachstate",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getinheritsched",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setinheritsched",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setschedparam",
    "type": "CPP"
  },
  {
    "name": "__libc_malloc",
    "type": "CPP"
  },
  {
    "name": "cfree",
    "type": "CPP"
  },
  {
    "name": "__libc_realloc",
    "type": "CPP"
  },
  {
    "name": "aligned_alloc",
    "type": "CPP"
  },
  {
    "name": "__libc_valloc",
    "type": "CPP"
  },
  {
    "name": "__libc_pvalloc",
    "type": "CPP"
  },
  {
    "name": "calloc",
    "type": "CPP"
  },
  {
    "name": "malloc_trim",
    "type": "CPP"
  },
  {
    "name": "malloc_usable_size",
    "type": "CPP"
  },
  {
    "name": "__libc_mallinfo",
    "type": "CPP"
  },
  {
    "name": "malloc_stats",
    "type": "CPP"
  },
  {
    "name": "__libc_mallopt",
    "type": "CPP"
  },
  {
    "name": "posix_memalign",
    "type": "CPP"
  },
  {
    "name": "malloc_info",
    "type": "CPP"
  },
  {
    "name": "__default_morecore",
    "type": "CPP"
  },
  {
    "name": "mcheck_check_all",
    "type": "CPP"
  },
  {
    "name": "mcheck",
    "type": "CPP"
  },
  {
    "name": "mcheck_pedantic",
    "type": "CPP"
  },
  {
    "name": "mprobe",
    "type": "CPP"
  },
  {
    "name": "tr_break",
    "type": "CPP"
  },
  {
    "name": "mtrace",
    "type": "CPP"
  },
  {
    "name": "muntrace",
    "type": "CPP"
  },
  {
    "name": "_obstack_begin",
    "type": "CPP"
  },
  {
    "name": "_obstack_begin_1",
    "type": "CPP"
  },
  {
    "name": "_obstack_newchunk",
    "type": "CPP"
  },
  {
    "name": "_obstack_allocated_p",
    "type": "CPP"
  },
  {
    "name": "_obstack_free",
    "type": "CPP"
  },
  {
    "name": "_obstack_memory_used",
    "type": "CPP"
  },
  {
    "name": "__libc_reallocarray",
    "type": "CPP"
  },
  {
    "name": "__libc_scratch_buffer_grow",
    "type": "CPP"
  },
  {
    "name": "__libc_scratch_buffer_grow_preserve",
    "type": "CPP"
  },
  {
    "name": "__libc_scratch_buffer_set_array_size",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_at_failure",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_emplace_enlarge",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_finalize",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_resize",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_resize_clear",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_alloc_array",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_allocate",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_copy_bytes",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_copy_string",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_create_failure",
    "type": "CPP"
  },
  {
    "name": "__libc_thread_freeres",
    "type": "CPP"
  },
  {
    "name": "strcat",
    "type": "CPP"
  },
  {
    "name": "index",
    "type": "CPP"
  },
  {
    "name": "strcmp",
    "type": "CPP"
  },
  {
    "name": "strcoll",
    "type": "CPP"
  },
  {
    "name": "strcpy",
    "type": "CPP"
  },
  {
    "name": "strcspn",
    "type": "CPP"
  },
  {
    "name": "__strverscmp",
    "type": "CPP"
  },
  {
    "name": "__strdup",
    "type": "CPP"
  },
  {
    "name": "__strndup",
    "type": "CPP"
  },
  {
    "name": "strerror",
    "type": "CPP"
  },
  {
    "name": "__strerror_r",
    "type": "CPP"
  },
  {
    "name": "strnlen",
    "type": "CPP"
  },
  {
    "name": "strncat",
    "type": "CPP"
  },
  {
    "name": "strncmp",
    "type": "CPP"
  },
  {
    "name": "strncpy",
    "type": "CPP"
  },
  {
    "name": "rindex",
    "type": "CPP"
  },
  {
    "name": "strpbrk",
    "type": "CPP"
  },
  {
    "name": "strsignal",
    "type": "CPP"
  },
  {
    "name": "strspn",
    "type": "CPP"
  },
  {
    "name": "strstr",
    "type": "CPP"
  },
  {
    "name": "strtok",
    "type": "CPP"
  },
  {
    "name": "__strtok_r",
    "type": "CPP"
  },
  {
    "name": "strxfrm",
    "type": "CPP"
  },
  {
    "name": "bcmp",
    "type": "CPP"
  },
  {
    "name": "__mempcpy",
    "type": "CPP"
  },
  {
    "name": "bcopy",
    "type": "CPP"
  },
  {
    "name": "__bzero",
    "type": "CPP"
  },
  {
    "name": "__ffs",
    "type": "CPP"
  },
  {
    "name": "ffsl",
    "type": "CPP"
  },
  {
    "name": "__stpcpy",
    "type": "CPP"
  },
  {
    "name": "__stpncpy",
    "type": "CPP"
  },
  {
    "name": "__strcasecmp",
    "type": "CPP"
  },
  {
    "name": "strncasecmp",
    "type": "CPP"
  },
  {
    "name": "__strcasecmp_l",
    "type": "CPP"
  },
  {
    "name": "__strncasecmp_l",
    "type": "CPP"
  },
  {
    "name": "memccpy",
    "type": "CPP"
  },
  {
    "name": "strsep",
    "type": "CPP"
  },
  {
    "name": "__strcasestr",
    "type": "CPP"
  },
  {
    "name": "swab",
    "type": "CPP"
  },
  {
    "name": "strfry",
    "type": "CPP"
  },
  {
    "name": "memfrob",
    "type": "CPP"
  },
  {
    "name": "memmem",
    "type": "CPP"
  },
  {
    "name": "__rawmemchr",
    "type": "CPP"
  },
  {
    "name": "strchrnul",
    "type": "CPP"
  },
  {
    "name": "argz_append",
    "type": "CPP"
  },
  {
    "name": "argz_add",
    "type": "CPP"
  },
  {
    "name": "__argz_count",
    "type": "CPP"
  },
  {
    "name": "argz_create",
    "type": "CPP"
  },
  {
    "name": "argz_create_sep",
    "type": "CPP"
  },
  {
    "name": "__argz_next",
    "type": "CPP"
  },
  {
    "name": "argz_delete",
    "type": "CPP"
  },
  {
    "name": "argz_extract",
    "type": "CPP"
  },
  {
    "name": "argz_insert",
    "type": "CPP"
  },
  {
    "name": "__argz_stringify",
    "type": "CPP"
  },
  {
    "name": "argz_add_sep",
    "type": "CPP"
  },
  {
    "name": "argz_replace",
    "type": "CPP"
  },
  {
    "name": "envz_entry",
    "type": "CPP"
  },
  {
    "name": "envz_get",
    "type": "CPP"
  },
  {
    "name": "envz_remove",
    "type": "CPP"
  },
  {
    "name": "envz_add",
    "type": "CPP"
  },
  {
    "name": "envz_merge",
    "type": "CPP"
  },
  {
    "name": "envz_strip",
    "type": "CPP"
  },
  {
    "name": "basename",
    "type": "CPP"
  },
  {
    "name": "__strcoll_l",
    "type": "CPP"
  },
  {
    "name": "__strxfrm_l",
    "type": "CPP"
  },
  {
    "name": "__strtok_r_1c",
    "type": "CPP"
  },
  {
    "name": "__strsep_1c",
    "type": "CPP"
  },
  {
    "name": "__strsep_2c",
    "type": "CPP"
  },
  {
    "name": "__strsep_3c",
    "type": "CPP"
  },
  {
    "name": "__strcspn_c1",
    "type": "CPP"
  },
  {
    "name": "__strcspn_c2",
    "type": "CPP"
  },
  {
    "name": "__strcspn_c3",
    "type": "CPP"
  },
  {
    "name": "__strspn_c1",
    "type": "CPP"
  },
  {
    "name": "__strspn_c2",
    "type": "CPP"
  },
  {
    "name": "__strspn_c3",
    "type": "CPP"
  },
  {
    "name": "__strpbrk_c2",
    "type": "CPP"
  },
  {
    "name": "__strpbrk_c3",
    "type": "CPP"
  },
  {
    "name": "__mempcpy_small",
    "type": "CPP"
  },
  {
    "name": "__strcpy_small",
    "type": "CPP"
  },
  {
    "name": "__stpcpy_small",
    "type": "CPP"
  },
  {
    "name": "memrchr",
    "type": "CPP"
  },
  {
    "name": "__xpg_strerror_r",
    "type": "CPP"
  },
  {
    "name": "strerror_l",
    "type": "CPP"
  },
  {
    "name": "explicit_bzero",
    "type": "CPP"
  },
  {
    "name": "wcscat",
    "type": "CPP"
  },
  {
    "name": "wcschr",
    "type": "CPP"
  },
  {
    "name": "wcscmp",
    "type": "CPP"
  },
  {
    "name": "wcscpy",
    "type": "CPP"
  },
  {
    "name": "wcscspn",
    "type": "CPP"
  },
  {
    "name": "wcsdup",
    "type": "CPP"
  },
  {
    "name": "wcslen",
    "type": "CPP"
  },
  {
    "name": "wcsncat",
    "type": "CPP"
  },
  {
    "name": "wcsncmp",
    "type": "CPP"
  },
  {
    "name": "wcsncpy",
    "type": "CPP"
  },
  {
    "name": "wcspbrk",
    "type": "CPP"
  },
  {
    "name": "wcsrchr",
    "type": "CPP"
  },
  {
    "name": "wcsspn",
    "type": "CPP"
  },
  {
    "name": "wcstok",
    "type": "CPP"
  },
  {
    "name": "wcsstr",
    "type": "CPP"
  },
  {
    "name": "wmemchr",
    "type": "CPP"
  },
  {
    "name": "wmemcmp",
    "type": "CPP"
  },
  {
    "name": "wmemcpy",
    "type": "CPP"
  },
  {
    "name": "wmemmove",
    "type": "CPP"
  },
  {
    "name": "wmemset",
    "type": "CPP"
  },
  {
    "name": "wcpcpy",
    "type": "CPP"
  },
  {
    "name": "wcpncpy",
    "type": "CPP"
  },
  {
    "name": "wmempcpy",
    "type": "CPP"
  },
  {
    "name": "btowc",
    "type": "CPP"
  },
  {
    "name": "wctob",
    "type": "CPP"
  },
  {
    "name": "mbsinit",
    "type": "CPP"
  },
  {
    "name": "__mbrlen",
    "type": "CPP"
  },
  {
    "name": "__mbrtowc",
    "type": "CPP"
  },
  {
    "name": "wcrtomb",
    "type": "CPP"
  },
  {
    "name": "mbsrtowcs",
    "type": "CPP"
  },
  {
    "name": "wcsrtombs",
    "type": "CPP"
  },
  {
    "name": "mbsnrtowcs",
    "type": "CPP"
  },
  {
    "name": "wcsnrtombs",
    "type": "CPP"
  },
  {
    "name": "wcsnlen",
    "type": "CPP"
  },
  {
    "name": "wcschrnul",
    "type": "CPP"
  },
  {
    "name": "__wcstol_internal",
    "type": "CPP"
  },
  {
    "name": "wcstol",
    "type": "CPP"
  },
  {
    "name": "__wcstoul_internal",
    "type": "CPP"
  },
  {
    "name": "wcstoul",
    "type": "CPP"
  },
  {
    "name": "__wcstod_internal",
    "type": "CPP"
  },
  {
    "name": "wcstod",
    "type": "CPP"
  },
  {
    "name": "__wcstold_internal",
    "type": "CPP"
  },
  {
    "name": "wcstof128",
    "type": "CPP"
  },
  {
    "name": "__wcstof_internal",
    "type": "CPP"
  },
  {
    "name": "wcstof",
    "type": "CPP"
  },
  {
    "name": "__wcstol_l",
    "type": "CPP"
  },
  {
    "name": "__wcstoul_l",
    "type": "CPP"
  },
  {
    "name": "__wcstod_l",
    "type": "CPP"
  },
  {
    "name": "wcstof128_l",
    "type": "CPP"
  },
  {
    "name": "wcstof32_l",
    "type": "CPP"
  },
  {
    "name": "wcscoll",
    "type": "CPP"
  },
  {
    "name": "wcsxfrm",
    "type": "CPP"
  },
  {
    "name": "wcwidth",
    "type": "CPP"
  },
  {
    "name": "wcswidth",
    "type": "CPP"
  },
  {
    "name": "__wcscoll_l",
    "type": "CPP"
  },
  {
    "name": "__wcsxfrm_l",
    "type": "CPP"
  },
  {
    "name": "wcscasecmp",
    "type": "CPP"
  },
  {
    "name": "wcsncasecmp",
    "type": "CPP"
  },
  {
    "name": "__wcscasecmp_l",
    "type": "CPP"
  },
  {
    "name": "__wcsncasecmp_l",
    "type": "CPP"
  },
  {
    "name": "__isoc99_wscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vwscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_fwscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vfwscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_swscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vswscanf",
    "type": "CPP"
  },
  {
    "name": "mbrtoc16",
    "type": "CPP"
  },
  {
    "name": "c16rtomb",
    "type": "CPP"
  },
  {
    "name": "mbrtoc32",
    "type": "CPP"
  },
  {
    "name": "c32rtomb",
    "type": "CPP"
  },
  {
    "name": "asctime_r",
    "type": "CPP"
  },
  {
    "name": "asctime",
    "type": "CPP"
  },
  {
    "name": "clock",
    "type": "CPP"
  },
  {
    "name": "ctime",
    "type": "CPP"
  },
  {
    "name": "ctime_r",
    "type": "CPP"
  },
  {
    "name": "difftime",
    "type": "CPP"
  },
  {
    "name": "__gmtime_r",
    "type": "CPP"
  },
  {
    "name": "gmtime",
    "type": "CPP"
  },
  {
    "name": "localtime_r",
    "type": "CPP"
  },
  {
    "name": "localtime",
    "type": "CPP"
  },
  {
    "name": "mktime",
    "type": "CPP"
  },
  {
    "name": "time",
    "type": "CPP"
  },
  {
    "name": "settimeofday",
    "type": "CPP"
  },
  {
    "name": "adjtime",
    "type": "CPP"
  },
  {
    "name": "tzset",
    "type": "CPP"
  },
  {
    "name": "getitimer",
    "type": "CPP"
  },
  {
    "name": "setitimer",
    "type": "CPP"
  },
  {
    "name": "dysize",
    "type": "CPP"
  },
  {
    "name": "timegm",
    "type": "CPP"
  },
  {
    "name": "ftime",
    "type": "CPP"
  },
  {
    "name": "getdate_r",
    "type": "CPP"
  },
  {
    "name": "getdate",
    "type": "CPP"
  },
  {
    "name": "strptime",
    "type": "CPP"
  },
  {
    "name": "strptime_l",
    "type": "CPP"
  },
  {
    "name": "strftime",
    "type": "CPP"
  },
  {
    "name": "wcsftime",
    "type": "CPP"
  },
  {
    "name": "__strftime_l",
    "type": "CPP"
  },
  {
    "name": "__wcsftime_l",
    "type": "CPP"
  },
  {
    "name": "timespec_get",
    "type": "CPP"
  },
  {
    "name": "clock_getcpuclockid",
    "type": "CPP"
  },
  {
    "name": "clock_getres",
    "type": "CPP"
  },
  {
    "name": "__clock_gettime",
    "type": "CPP"
  },
  {
    "name": "clock_settime",
    "type": "CPP"
  },
  {
    "name": "clock_nanosleep",
    "type": "CPP"
  },
  {
    "name": "ntp_gettime",
    "type": "CPP"
  },
  {
    "name": "ntp_gettimex",
    "type": "CPP"
  },
  {
    "name": "opendir",
    "type": "CPP"
  },
  {
    "name": "closedir",
    "type": "CPP"
  },
  {
    "name": "rewinddir",
    "type": "CPP"
  },
  {
    "name": "seekdir",
    "type": "CPP"
  },
  {
    "name": "telldir",
    "type": "CPP"
  },
  {
    "name": "getdents64",
    "type": "CPP"
  },
  {
    "name": "dirfd",
    "type": "CPP"
  },
  {
    "name": "readdir",
    "type": "CPP"
  },
  {
    "name": "readdir64_r",
    "type": "CPP"
  },
  {
    "name": "scandir",
    "type": "CPP"
  },
  {
    "name": "alphasort",
    "type": "CPP"
  },
  {
    "name": "versionsort",
    "type": "CPP"
  },
  {
    "name": "fdopendir",
    "type": "CPP"
  },
  {
    "name": "scandirat",
    "type": "CPP"
  },
  {
    "name": "getdirentries",
    "type": "CPP"
  },
  {
    "name": "fgetgrent",
    "type": "CPP"
  },
  {
    "name": "getgrouplist",
    "type": "CPP"
  },
  {
    "name": "initgroups",
    "type": "CPP"
  },
  {
    "name": "setgroups",
    "type": "CPP"
  },
  {
    "name": "getgrent",
    "type": "CPP"
  },
  {
    "name": "getgrgid",
    "type": "CPP"
  },
  {
    "name": "getgrnam",
    "type": "CPP"
  },
  {
    "name": "putgrent",
    "type": "CPP"
  },
  {
    "name": "setgrent",
    "type": "CPP"
  },
  {
    "name": "endgrent",
    "type": "CPP"
  },
  {
    "name": "getgrent_r",
    "type": "CPP"
  },
  {
    "name": "getgrgid_r",
    "type": "CPP"
  },
  {
    "name": "getgrnam_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_grent",
    "type": "CPP"
  },
  {
    "name": "fgetgrent_r",
    "type": "CPP"
  },
  {
    "name": "__copy_grp",
    "type": "CPP"
  },
  {
    "name": "__merge_grp",
    "type": "CPP"
  },
  {
    "name": "fgetpwent",
    "type": "CPP"
  },
  {
    "name": "getpw",
    "type": "CPP"
  },
  {
    "name": "putpwent",
    "type": "CPP"
  },
  {
    "name": "getpwent",
    "type": "CPP"
  },
  {
    "name": "getpwnam",
    "type": "CPP"
  },
  {
    "name": "getpwuid",
    "type": "CPP"
  },
  {
    "name": "setpwent",
    "type": "CPP"
  },
  {
    "name": "endpwent",
    "type": "CPP"
  },
  {
    "name": "getpwent_r",
    "type": "CPP"
  },
  {
    "name": "getpwnam_r",
    "type": "CPP"
  },
  {
    "name": "getpwuid_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_pwent",
    "type": "CPP"
  },
  {
    "name": "fgetpwent_r",
    "type": "CPP"
  },
  {
    "name": "uname",
    "type": "CPP"
  },
  {
    "name": "times",
    "type": "CPP"
  },
  {
    "name": "__wait",
    "type": "CPP"
  },
  {
    "name": "__waitpid",
    "type": "CPP"
  },
  {
    "name": "wait3",
    "type": "CPP"
  },
  {
    "name": "wait4",
    "type": "CPP"
  },
  {
    "name": "waitid",
    "type": "CPP"
  },
  {
    "name": "alarm",
    "type": "CPP"
  },
  {
    "name": "sleep",
    "type": "CPP"
  },
  {
    "name": "pause",
    "type": "CPP"
  },
  {
    "name": "__nanosleep",
    "type": "CPP"
  },
  {
    "name": "__fork",
    "type": "CPP"
  },
  {
    "name": "__vfork",
    "type": "CPP"
  },
  {
    "name": "_exit",
    "type": "CPP"
  },
  {
    "name": "execve",
    "type": "CPP"
  },
  {
    "name": "fexecve",
    "type": "CPP"
  },
  {
    "name": "execv",
    "type": "CPP"
  },
  {
    "name": "execle",
    "type": "CPP"
  },
  {
    "name": "execl",
    "type": "CPP"
  },
  {
    "name": "execvp",
    "type": "CPP"
  },
  {
    "name": "execlp",
    "type": "CPP"
  },
  {
    "name": "execvpe",
    "type": "CPP"
  },
  {
    "name": "__getpid",
    "type": "CPP"
  },
  {
    "name": "getppid",
    "type": "CPP"
  },
  {
    "name": "getuid",
    "type": "CPP"
  },
  {
    "name": "geteuid",
    "type": "CPP"
  },
  {
    "name": "getgid",
    "type": "CPP"
  },
  {
    "name": "getegid",
    "type": "CPP"
  },
  {
    "name": "getgroups",
    "type": "CPP"
  },
  {
    "name": "setuid",
    "type": "CPP"
  },
  {
    "name": "setgid",
    "type": "CPP"
  },
  {
    "name": "group_member",
    "type": "CPP"
  },
  {
    "name": "__getpgid",
    "type": "CPP"
  },
  {
    "name": "__setpgid",
    "type": "CPP"
  },
  {
    "name": "getpgrp",
    "type": "CPP"
  },
  {
    "name": "__bsd_getpgrp",
    "type": "CPP"
  },
  {
    "name": "setpgrp",
    "type": "CPP"
  },
  {
    "name": "getsid",
    "type": "CPP"
  },
  {
    "name": "setsid",
    "type": "CPP"
  },
  {
    "name": "getresuid",
    "type": "CPP"
  },
  {
    "name": "getresgid",
    "type": "CPP"
  },
  {
    "name": "setresuid",
    "type": "CPP"
  },
  {
    "name": "setresgid",
    "type": "CPP"
  },
  {
    "name": "pathconf",
    "type": "CPP"
  },
  {
    "name": "__sysconf",
    "type": "CPP"
  },
  {
    "name": "fpathconf",
    "type": "CPP"
  },
  {
    "name": "glob",
    "type": "CPP"
  },
  {
    "name": "globfree",
    "type": "CPP"
  },
  {
    "name": "glob_pattern_p",
    "type": "CPP"
  },
  {
    "name": "fnmatch",
    "type": "CPP"
  },
  {
    "name": "re_compile_pattern",
    "type": "CPP"
  },
  {
    "name": "re_set_syntax",
    "type": "CPP"
  },
  {
    "name": "re_compile_fastmap",
    "type": "CPP"
  },
  {
    "name": "regcomp",
    "type": "CPP"
  },
  {
    "name": "regerror",
    "type": "CPP"
  },
  {
    "name": "regfree",
    "type": "CPP"
  },
  {
    "name": "re_comp",
    "type": "CPP"
  },
  {
    "name": "regexec",
    "type": "CPP"
  },
  {
    "name": "re_match",
    "type": "CPP"
  },
  {
    "name": "re_search",
    "type": "CPP"
  },
  {
    "name": "re_match_2",
    "type": "CPP"
  },
  {
    "name": "re_search_2",
    "type": "CPP"
  },
  {
    "name": "re_set_registers",
    "type": "CPP"
  },
  {
    "name": "re_exec",
    "type": "CPP"
  },
  {
    "name": "confstr",
    "type": "CPP"
  },
  {
    "name": "getopt",
    "type": "CPP"
  },
  {
    "name": "__posix_getopt",
    "type": "CPP"
  },
  {
    "name": "getopt_long",
    "type": "CPP"
  },
  {
    "name": "getopt_long_only",
    "type": "CPP"
  },
  {
    "name": "sched_setparam",
    "type": "CPP"
  },
  {
    "name": "__sched_getparam",
    "type": "CPP"
  },
  {
    "name": "__sched_setscheduler",
    "type": "CPP"
  },
  {
    "name": "__sched_getscheduler",
    "type": "CPP"
  },
  {
    "name": "__sched_yield",
    "type": "CPP"
  },
  {
    "name": "__sched_get_priority_max",
    "type": "CPP"
  },
  {
    "name": "__sched_get_priority_min",
    "type": "CPP"
  },
  {
    "name": "sched_rr_get_interval",
    "type": "CPP"
  },
  {
    "name": "sched_getaffinity",
    "type": "CPP"
  },
  {
    "name": "sched_setaffinity",
    "type": "CPP"
  },
  {
    "name": "freeaddrinfo",
    "type": "CPP"
  },
  {
    "name": "getaddrinfo",
    "type": "CPP"
  },
  {
    "name": "gai_strerror",
    "type": "CPP"
  },
  {
    "name": "wordfree",
    "type": "CPP"
  },
  {
    "name": "wordexp",
    "type": "CPP"
  },
  {
    "name": "__libc_pread",
    "type": "CPP"
  },
  {
    "name": "__libc_pwrite",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_init",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_destroy",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addclose",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addopen",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_adddup2",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addchdir_np",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addfchdir_np",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_init",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_destroy",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getsigdefault",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setsigdefault",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getflags",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setflags",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getpgroup",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setpgroup",
    "type": "CPP"
  },
  {
    "name": "posix_spawn",
    "type": "CPP"
  },
  {
    "name": "posix_spawnp",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getsigmask",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getschedparam",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setsigmask",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setschedparam",
    "type": "CPP"
  },
  {
    "name": "posix_madvise",
    "type": "CPP"
  },
  {
    "name": "__sched_cpucount",
    "type": "CPP"
  },
  {
    "name": "__sched_cpualloc",
    "type": "CPP"
  },
  {
    "name": "__sched_cpufree",
    "type": "CPP"
  },
  {
    "name": "sched_getcpu",
    "type": "CPP"
  },
  {
    "name": "getcpu",
    "type": "CPP"
  },
  {
    "name": "utime",
    "type": "CPP"
  },
  {
    "name": "mkfifo",
    "type": "CPP"
  },
  {
    "name": "mkfifoat",
    "type": "CPP"
  },
  {
    "name": "__xstat",
    "type": "CPP"
  },
  {
    "name": "__fxstat",
    "type": "CPP"
  },
  {
    "name": "__lxstat",
    "type": "CPP"
  },
  {
    "name": "statx",
    "type": "CPP"
  },
  {
    "name": "__xmknod",
    "type": "CPP"
  },
  {
    "name": "__xmknodat",
    "type": "CPP"
  },
  {
    "name": "__fxstatat",
    "type": "CPP"
  },
  {
    "name": "__statfs",
    "type": "CPP"
  },
  {
    "name": "fstatfs",
    "type": "CPP"
  },
  {
    "name": "statvfs",
    "type": "CPP"
  },
  {
    "name": "fstatvfs",
    "type": "CPP"
  },
  {
    "name": "umask",
    "type": "CPP"
  },
  {
    "name": "chmod",
    "type": "CPP"
  },
  {
    "name": "fchmod",
    "type": "CPP"
  },
  {
    "name": "lchmod",
    "type": "CPP"
  },
  {
    "name": "fchmodat",
    "type": "CPP"
  },
  {
    "name": "mkdir",
    "type": "CPP"
  },
  {
    "name": "mkdirat",
    "type": "CPP"
  },
  {
    "name": "__open_2",
    "type": "CPP"
  },
  {
    "name": "__open",
    "type": "CPP"
  },
  {
    "name": "__open64_2",
    "type": "CPP"
  },
  {
    "name": "__openat_2",
    "type": "CPP"
  },
  {
    "name": "openat",
    "type": "CPP"
  },
  {
    "name": "__openat64_2",
    "type": "CPP"
  },
  {
    "name": "__read",
    "type": "CPP"
  },
  {
    "name": "__write",
    "type": "CPP"
  },
  {
    "name": "llseek",
    "type": "CPP"
  },
  {
    "name": "access",
    "type": "CPP"
  },
  {
    "name": "eaccess",
    "type": "CPP"
  },
  {
    "name": "faccessat",
    "type": "CPP"
  },
  {
    "name": "__fcntl",
    "type": "CPP"
  },
  {
    "name": "flock",
    "type": "CPP"
  },
  {
    "name": "lockf",
    "type": "CPP"
  },
  {
    "name": "lockf64",
    "type": "CPP"
  },
  {
    "name": "__close",
    "type": "CPP"
  },
  {
    "name": "dup",
    "type": "CPP"
  },
  {
    "name": "__dup2",
    "type": "CPP"
  },
  {
    "name": "dup3",
    "type": "CPP"
  },
  {
    "name": "__pipe",
    "type": "CPP"
  },
  {
    "name": "pipe2",
    "type": "CPP"
  },
  {
    "name": "creat",
    "type": "CPP"
  },
  {
    "name": "chdir",
    "type": "CPP"
  },
  {
    "name": "fchdir",
    "type": "CPP"
  },
  {
    "name": "getcwd",
    "type": "CPP"
  },
  {
    "name": "getwd",
    "type": "CPP"
  },
  {
    "name": "get_current_dir_name",
    "type": "CPP"
  },
  {
    "name": "chown",
    "type": "CPP"
  },
  {
    "name": "fchown",
    "type": "CPP"
  },
  {
    "name": "lchown",
    "type": "CPP"
  },
  {
    "name": "fchownat",
    "type": "CPP"
  },
  {
    "name": "ttyname",
    "type": "CPP"
  },
  {
    "name": "ttyname_r",
    "type": "CPP"
  },
  {
    "name": "isatty",
    "type": "CPP"
  },
  {
    "name": "link",
    "type": "CPP"
  },
  {
    "name": "linkat",
    "type": "CPP"
  },
  {
    "name": "symlink",
    "type": "CPP"
  },
  {
    "name": "symlinkat",
    "type": "CPP"
  },
  {
    "name": "readlink",
    "type": "CPP"
  },
  {
    "name": "readlinkat",
    "type": "CPP"
  },
  {
    "name": "unlink",
    "type": "CPP"
  },
  {
    "name": "unlinkat",
    "type": "CPP"
  },
  {
    "name": "rmdir",
    "type": "CPP"
  },
  {
    "name": "ftw",
    "type": "CPP"
  },
  {
    "name": "nftw",
    "type": "CPP"
  },
  {
    "name": "fts64_open",
    "type": "CPP"
  },
  {
    "name": "fts64_close",
    "type": "CPP"
  },
  {
    "name": "fts64_read",
    "type": "CPP"
  },
  {
    "name": "fts64_set",
    "type": "CPP"
  },
  {
    "name": "fts64_children",
    "type": "CPP"
  },
  {
    "name": "__poll",
    "type": "CPP"
  },
  {
    "name": "ppoll",
    "type": "CPP"
  },
  {
    "name": "posix_fadvise",
    "type": "CPP"
  },
  {
    "name": "posix_fallocate",
    "type": "CPP"
  },
  {
    "name": "posix_fallocate64",
    "type": "CPP"
  },
  {
    "name": "sendfile",
    "type": "CPP"
  },
  {
    "name": "copy_file_range",
    "type": "CPP"
  },
  {
    "name": "utimensat",
    "type": "CPP"
  },
  {
    "name": "futimens",
    "type": "CPP"
  },
  {
    "name": "sync_file_range",
    "type": "CPP"
  },
  {
    "name": "fallocate",
    "type": "CPP"
  },
  {
    "name": "__close_nocancel",
    "type": "CPP"
  },
  {
    "name": "__open64_nocancel",
    "type": "CPP"
  },
  {
    "name": "__read_nocancel",
    "type": "CPP"
  },
  {
    "name": "__pread64_nocancel",
    "type": "CPP"
  },
  {
    "name": "__write_nocancel",
    "type": "CPP"
  },
  {
    "name": "cfgetospeed",
    "type": "CPP"
  },
  {
    "name": "cfgetispeed",
    "type": "CPP"
  },
  {
    "name": "cfsetospeed",
    "type": "CPP"
  },
  {
    "name": "cfsetispeed",
    "type": "CPP"
  },
  {
    "name": "cfsetspeed",
    "type": "CPP"
  },
  {
    "name": "tcsetattr",
    "type": "CPP"
  },
  {
    "name": "tcgetattr",
    "type": "CPP"
  },
  {
    "name": "tcgetpgrp",
    "type": "CPP"
  },
  {
    "name": "tcsetpgrp",
    "type": "CPP"
  },
  {
    "name": "tcdrain",
    "type": "CPP"
  },
  {
    "name": "tcflow",
    "type": "CPP"
  },
  {
    "name": "tcflush",
    "type": "CPP"
  },
  {
    "name": "tcsendbreak",
    "type": "CPP"
  },
  {
    "name": "cfmakeraw",
    "type": "CPP"
  },
  {
    "name": "tcgetsid",
    "type": "CPP"
  },
  {
    "name": "__getrlimit",
    "type": "CPP"
  },
  {
    "name": "setrlimit",
    "type": "CPP"
  },
  {
    "name": "getrusage",
    "type": "CPP"
  },
  {
    "name": "ulimit",
    "type": "CPP"
  },
  {
    "name": "vlimit",
    "type": "CPP"
  },
  {
    "name": "vtimes",
    "type": "CPP"
  },
  {
    "name": "getpriority",
    "type": "CPP"
  },
  {
    "name": "setpriority",
    "type": "CPP"
  },
  {
    "name": "nice",
    "type": "CPP"
  },
  {
    "name": "brk",
    "type": "CPP"
  },
  {
    "name": "__sbrk",
    "type": "CPP"
  },
  {
    "name": "sstk",
    "type": "CPP"
  },
  {
    "name": "ioctl",
    "type": "CPP"
  },
  {
    "name": "readv",
    "type": "CPP"
  },
  {
    "name": "writev",
    "type": "CPP"
  },
  {
    "name": "preadv",
    "type": "CPP"
  },
  {
    "name": "pwritev",
    "type": "CPP"
  },
  {
    "name": "preadv2",
    "type": "CPP"
  },
  {
    "name": "pwritev2",
    "type": "CPP"
  },
  {
    "name": "setreuid",
    "type": "CPP"
  },
  {
    "name": "setregid",
    "type": "CPP"
  },
  {
    "name": "seteuid",
    "type": "CPP"
  },
  {
    "name": "setegid",
    "type": "CPP"
  },
  {
    "name": "__getpagesize",
    "type": "CPP"
  },
  {
    "name": "getdtablesize",
    "type": "CPP"
  },
  {
    "name": "gethostname",
    "type": "CPP"
  },
  {
    "name": "sethostname",
    "type": "CPP"
  },
  {
    "name": "getdomainname",
    "type": "CPP"
  },
  {
    "name": "setdomainname",
    "type": "CPP"
  },
  {
    "name": "__select",
    "type": "CPP"
  },
  {
    "name": "pselect",
    "type": "CPP"
  },
  {
    "name": "acct",
    "type": "CPP"
  },
  {
    "name": "chroot",
    "type": "CPP"
  },
  {
    "name": "fsync",
    "type": "CPP"
  },
  {
    "name": "sync",
    "type": "CPP"
  },
  {
    "name": "fdatasync",
    "type": "CPP"
  },
  {
    "name": "syncfs",
    "type": "CPP"
  },
  {
    "name": "reboot",
    "type": "CPP"
  },
  {
    "name": "gethostid",
    "type": "CPP"
  },
  {
    "name": "sethostid",
    "type": "CPP"
  },
  {
    "name": "revoke",
    "type": "CPP"
  },
  {
    "name": "vhangup",
    "type": "CPP"
  },
  {
    "name": "swapon",
    "type": "CPP"
  },
  {
    "name": "swapoff",
    "type": "CPP"
  },
  {
    "name": "__mktemp",
    "type": "CPP"
  },
  {
    "name": "mkstemp",
    "type": "CPP"
  },
  {
    "name": "mkdtemp",
    "type": "CPP"
  },
  {
    "name": "mkostemp",
    "type": "CPP"
  },
  {
    "name": "mkstemps",
    "type": "CPP"
  },
  {
    "name": "mkostemps",
    "type": "CPP"
  },
  {
    "name": "ualarm",
    "type": "CPP"
  },
  {
    "name": "usleep",
    "type": "CPP"
  },
  {
    "name": "gtty",
    "type": "CPP"
  },
  {
    "name": "stty",
    "type": "CPP"
  },
  {
    "name": "ptrace",
    "type": "CPP"
  },
  {
    "name": "setfsent",
    "type": "CPP"
  },
  {
    "name": "getfsent",
    "type": "CPP"
  },
  {
    "name": "getfsspec",
    "type": "CPP"
  },
  {
    "name": "getfsfile",
    "type": "CPP"
  },
  {
    "name": "endfsent",
    "type": "CPP"
  },
  {
    "name": "getmntent",
    "type": "CPP"
  },
  {
    "name": "__setmntent",
    "type": "CPP"
  },
  {
    "name": "__endmntent",
    "type": "CPP"
  },
  {
    "name": "addmntent",
    "type": "CPP"
  },
  {
    "name": "hasmntopt",
    "type": "CPP"
  },
  {
    "name": "__getmntent_r",
    "type": "CPP"
  },
  {
    "name": "utimes",
    "type": "CPP"
  },
  {
    "name": "lutimes",
    "type": "CPP"
  },
  {
    "name": "futimes",
    "type": "CPP"
  },
  {
    "name": "futimesat",
    "type": "CPP"
  },
  {
    "name": "truncate",
    "type": "CPP"
  },
  {
    "name": "ftruncate",
    "type": "CPP"
  },
  {
    "name": "chflags",
    "type": "CPP"
  },
  {
    "name": "fchflags",
    "type": "CPP"
  },
  {
    "name": "insque",
    "type": "CPP"
  },
  {
    "name": "remque",
    "type": "CPP"
  },
  {
    "name": "setttyent",
    "type": "CPP"
  },
  {
    "name": "getttyent",
    "type": "CPP"
  },
  {
    "name": "getttynam",
    "type": "CPP"
  },
  {
    "name": "endttyent",
    "type": "CPP"
  },
  {
    "name": "getusershell",
    "type": "CPP"
  },
  {
    "name": "endusershell",
    "type": "CPP"
  },
  {
    "name": "setusershell",
    "type": "CPP"
  },
  {
    "name": "getpass",
    "type": "CPP"
  },
  {
    "name": "ttyslot",
    "type": "CPP"
  },
  {
    "name": "syslog",
    "type": "CPP"
  },
  {
    "name": "vsyslog",
    "type": "CPP"
  },
  {
    "name": "__syslog_chk",
    "type": "CPP"
  },
  {
    "name": "__vsyslog_chk",
    "type": "CPP"
  },
  {
    "name": "openlog",
    "type": "CPP"
  },
  {
    "name": "closelog",
    "type": "CPP"
  },
  {
    "name": "setlogmask",
    "type": "CPP"
  },
  {
    "name": "syscall",
    "type": "CPP"
  },
  {
    "name": "daemon",
    "type": "CPP"
  },
  {
    "name": "__mmap",
    "type": "CPP"
  },
  {
    "name": "__munmap",
    "type": "CPP"
  },
  {
    "name": "__mprotect",
    "type": "CPP"
  },
  {
    "name": "msync",
    "type": "CPP"
  },
  {
    "name": "__madvise",
    "type": "CPP"
  },
  {
    "name": "mincore",
    "type": "CPP"
  },
  {
    "name": "remap_file_pages",
    "type": "CPP"
  },
  {
    "name": "mlock",
    "type": "CPP"
  },
  {
    "name": "munlock",
    "type": "CPP"
  },
  {
    "name": "mlockall",
    "type": "CPP"
  },
  {
    "name": "munlockall",
    "type": "CPP"
  },
  {
    "name": "fcvt",
    "type": "CPP"
  },
  {
    "name": "ecvt",
    "type": "CPP"
  },
  {
    "name": "gcvt",
    "type": "CPP"
  },
  {
    "name": "fcvt_r",
    "type": "CPP"
  },
  {
    "name": "ecvt_r",
    "type": "CPP"
  },
  {
    "name": "qfcvt",
    "type": "CPP"
  },
  {
    "name": "qecvt",
    "type": "CPP"
  },
  {
    "name": "qgcvt",
    "type": "CPP"
  },
  {
    "name": "qfcvt_r",
    "type": "CPP"
  },
  {
    "name": "qecvt_r",
    "type": "CPP"
  },
  {
    "name": "hdestroy",
    "type": "CPP"
  },
  {
    "name": "hsearch",
    "type": "CPP"
  },
  {
    "name": "hcreate",
    "type": "CPP"
  },
  {
    "name": "hcreate_r",
    "type": "CPP"
  },
  {
    "name": "hdestroy_r",
    "type": "CPP"
  },
  {
    "name": "hsearch_r",
    "type": "CPP"
  },
  {
    "name": "__tsearch",
    "type": "CPP"
  },
  {
    "name": "__tfind",
    "type": "CPP"
  },
  {
    "name": "__tdelete",
    "type": "CPP"
  },
  {
    "name": "__twalk",
    "type": "CPP"
  },
  {
    "name": "__twalk_r",
    "type": "CPP"
  },
  {
    "name": "tdestroy",
    "type": "CPP"
  },
  {
    "name": "lsearch",
    "type": "CPP"
  },
  {
    "name": "lfind",
    "type": "CPP"
  },
  {
    "name": "vwarn",
    "type": "CPP"
  },
  {
    "name": "vwarnx",
    "type": "CPP"
  },
  {
    "name": "warn",
    "type": "CPP"
  },
  {
    "name": "warnx",
    "type": "CPP"
  },
  {
    "name": "verr",
    "type": "CPP"
  },
  {
    "name": "verrx",
    "type": "CPP"
  },
  {
    "name": "err",
    "type": "CPP"
  },
  {
    "name": "errx",
    "type": "CPP"
  },
  {
    "name": "error",
    "type": "CPP"
  },
  {
    "name": "error_at_line",
    "type": "CPP"
  },
  {
    "name": "ustat",
    "type": "CPP"
  },
  {
    "name": "get_nprocs",
    "type": "CPP"
  },
  {
    "name": "get_nprocs_conf",
    "type": "CPP"
  },
  {
    "name": "get_phys_pages",
    "type": "CPP"
  },
  {
    "name": "get_avphys_pages",
    "type": "CPP"
  },
  {
    "name": "dirname",
    "type": "CPP"
  },
  {
    "name": "getloadavg",
    "type": "CPP"
  },
  {
    "name": "fgetxattr",
    "type": "CPP"
  },
  {
    "name": "flistxattr",
    "type": "CPP"
  },
  {
    "name": "fremovexattr",
    "type": "CPP"
  },
  {
    "name": "fsetxattr",
    "type": "CPP"
  },
  {
    "name": "getxattr",
    "type": "CPP"
  },
  {
    "name": "listxattr",
    "type": "CPP"
  },
  {
    "name": "lgetxattr",
    "type": "CPP"
  },
  {
    "name": "llistxattr",
    "type": "CPP"
  },
  {
    "name": "lremovexattr",
    "type": "CPP"
  },
  {
    "name": "lsetxattr",
    "type": "CPP"
  },
  {
    "name": "removexattr",
    "type": "CPP"
  },
  {
    "name": "setxattr",
    "type": "CPP"
  },
  {
    "name": "__getauxval",
    "type": "CPP"
  },
  {
    "name": "__libc_ifunc_impl_list",
    "type": "CPP"
  },
  {
    "name": "gnu_dev_major",
    "type": "CPP"
  },
  {
    "name": "gnu_dev_minor",
    "type": "CPP"
  },
  {
    "name": "gnu_dev_makedev",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_once_slow",
    "type": "CPP"
  },
  {
    "name": "epoll_create",
    "type": "CPP"
  },
  {
    "name": "inotify_init",
    "type": "CPP"
  },
  {
    "name": "sysctl",
    "type": "CPP"
  },
  {
    "name": "__adjtimex",
    "type": "CPP"
  },
  {
    "name": "__clone",
    "type": "CPP"
  },
  {
    "name": "umount",
    "type": "CPP"
  },
  {
    "name": "umount2",
    "type": "CPP"
  },
  {
    "name": "readahead",
    "type": "CPP"
  },
  {
    "name": "setfsuid",
    "type": "CPP"
  },
  {
    "name": "setfsgid",
    "type": "CPP"
  },
  {
    "name": "epoll_pwait",
    "type": "CPP"
  },
  {
    "name": "signalfd",
    "type": "CPP"
  },
  {
    "name": "eventfd",
    "type": "CPP"
  },
  {
    "name": "eventfd_read",
    "type": "CPP"
  },
  {
    "name": "eventfd_write",
    "type": "CPP"
  },
  {
    "name": "prlimit",
    "type": "CPP"
  },
  {
    "name": "personality",
    "type": "CPP"
  },
  {
    "name": "epoll_wait",
    "type": "CPP"
  },
  {
    "name": "tee",
    "type": "CPP"
  },
  {
    "name": "vmsplice",
    "type": "CPP"
  },
  {
    "name": "splice",
    "type": "CPP"
  },
  {
    "name": "open_by_handle_at",
    "type": "CPP"
  },
  {
    "name": "mlock2",
    "type": "CPP"
  },
  {
    "name": "pkey_mprotect",
    "type": "CPP"
  },
  {
    "name": "pkey_set",
    "type": "CPP"
  },
  {
    "name": "pkey_get",
    "type": "CPP"
  },
  {
    "name": "fanotify_mark",
    "type": "CPP"
  },
  {
    "name": "capget",
    "type": "CPP"
  },
  {
    "name": "capset",
    "type": "CPP"
  },
  {
    "name": "clock_adjtime",
    "type": "CPP"
  },
  {
    "name": "delete_module",
    "type": "CPP"
  },
  {
    "name": "epoll_create1",
    "type": "CPP"
  },
  {
    "name": "epoll_ctl",
    "type": "CPP"
  },
  {
    "name": "init_module",
    "type": "CPP"
  },
  {
    "name": "inotify_add_watch",
    "type": "CPP"
  },
  {
    "name": "inotify_init1",
    "type": "CPP"
  },
  {
    "name": "inotify_rm_watch",
    "type": "CPP"
  },
  {
    "name": "klogctl",
    "type": "CPP"
  },
  {
    "name": "mount",
    "type": "CPP"
  },
  {
    "name": "mremap",
    "type": "CPP"
  },
  {
    "name": "nfsservctl",
    "type": "CPP"
  },
  {
    "name": "pivot_root",
    "type": "CPP"
  },
  {
    "name": "prctl",
    "type": "CPP"
  },
  {
    "name": "quotactl",
    "type": "CPP"
  },
  {
    "name": "sysinfo",
    "type": "CPP"
  },
  {
    "name": "unshare",
    "type": "CPP"
  },
  {
    "name": "timerfd_create",
    "type": "CPP"
  },
  {
    "name": "timerfd_settime",
    "type": "CPP"
  },
  {
    "name": "timerfd_gettime",
    "type": "CPP"
  },
  {
    "name": "fanotify_init",
    "type": "CPP"
  },
  {
    "name": "name_to_handle_at",
    "type": "CPP"
  },
  {
    "name": "setns",
    "type": "CPP"
  },
  {
    "name": "process_vm_readv",
    "type": "CPP"
  },
  {
    "name": "process_vm_writev",
    "type": "CPP"
  },
  {
    "name": "memfd_create",
    "type": "CPP"
  },
  {
    "name": "pkey_alloc",
    "type": "CPP"
  },
  {
    "name": "pkey_free",
    "type": "CPP"
  },
  {
    "name": "gettid",
    "type": "CPP"
  },
  {
    "name": "tgkill",
    "type": "CPP"
  },
  {
    "name": "bdflush",
    "type": "CPP"
  },
  {
    "name": "accept",
    "type": "CPP"
  },
  {
    "name": "bind",
    "type": "CPP"
  },
  {
    "name": "__connect",
    "type": "CPP"
  },
  {
    "name": "getpeername",
    "type": "CPP"
  },
  {
    "name": "getsockname",
    "type": "CPP"
  },
  {
    "name": "getsockopt",
    "type": "CPP"
  },
  {
    "name": "listen",
    "type": "CPP"
  },
  {
    "name": "__recv",
    "type": "CPP"
  },
  {
    "name": "recvfrom",
    "type": "CPP"
  },
  {
    "name": "recvmsg",
    "type": "CPP"
  },
  {
    "name": "send",
    "type": "CPP"
  },
  {
    "name": "sendmsg",
    "type": "CPP"
  },
  {
    "name": "sendto",
    "type": "CPP"
  },
  {
    "name": "setsockopt",
    "type": "CPP"
  },
  {
    "name": "shutdown",
    "type": "CPP"
  },
  {
    "name": "__socket",
    "type": "CPP"
  },
  {
    "name": "socketpair",
    "type": "CPP"
  },
  {
    "name": "isfdtype",
    "type": "CPP"
  },
  {
    "name": "sockatmark",
    "type": "CPP"
  },
  {
    "name": "accept4",
    "type": "CPP"
  },
  {
    "name": "recvmmsg",
    "type": "CPP"
  },
  {
    "name": "__sendmmsg",
    "type": "CPP"
  },
  {
    "name": "__libc_sa_len",
    "type": "CPP"
  },
  {
    "name": "__cmsg_nxthdr",
    "type": "CPP"
  },
  {
    "name": "ftok",
    "type": "CPP"
  },
  {
    "name": "__libc_msgsnd",
    "type": "CPP"
  },
  {
    "name": "__libc_msgrcv",
    "type": "CPP"
  },
  {
    "name": "msgget",
    "type": "CPP"
  },
  {
    "name": "msgctl",
    "type": "CPP"
  },
  {
    "name": "semop",
    "type": "CPP"
  },
  {
    "name": "semget",
    "type": "CPP"
  },
  {
    "name": "semctl",
    "type": "CPP"
  },
  {
    "name": "semtimedop",
    "type": "CPP"
  },
  {
    "name": "shmat",
    "type": "CPP"
  },
  {
    "name": "shmdt",
    "type": "CPP"
  },
  {
    "name": "shmget",
    "type": "CPP"
  },
  {
    "name": "shmctl",
    "type": "CPP"
  },
  {
    "name": "moncontrol",
    "type": "CPP"
  },
  {
    "name": "__monstartup",
    "type": "CPP"
  },
  {
    "name": "_mcleanup",
    "type": "CPP"
  },
  {
    "name": "_mcount",
    "type": "CPP"
  },
  {
    "name": "profil",
    "type": "CPP"
  },
  {
    "name": "sprofil",
    "type": "CPP"
  },
  {
    "name": "__profile_frequency",
    "type": "CPP"
  },
  {
    "name": "iswalnum",
    "type": "CPP"
  },
  {
    "name": "iswalpha",
    "type": "CPP"
  },
  {
    "name": "iswblank",
    "type": "CPP"
  },
  {
    "name": "iswcntrl",
    "type": "CPP"
  },
  {
    "name": "iswdigit",
    "type": "CPP"
  },
  {
    "name": "iswlower",
    "type": "CPP"
  },
  {
    "name": "iswgraph",
    "type": "CPP"
  },
  {
    "name": "iswprint",
    "type": "CPP"
  },
  {
    "name": "iswpunct",
    "type": "CPP"
  },
  {
    "name": "iswspace",
    "type": "CPP"
  },
  {
    "name": "iswupper",
    "type": "CPP"
  },
  {
    "name": "iswxdigit",
    "type": "CPP"
  },
  {
    "name": "towlower",
    "type": "CPP"
  },
  {
    "name": "towupper",
    "type": "CPP"
  },
  {
    "name": "wctype",
    "type": "CPP"
  },
  {
    "name": "__iswctype",
    "type": "CPP"
  },
  {
    "name": "wctrans",
    "type": "CPP"
  },
  {
    "name": "__towctrans",
    "type": "CPP"
  },
  {
    "name": "__iswalnum_l",
    "type": "CPP"
  },
  {
    "name": "__iswalpha_l",
    "type": "CPP"
  },
  {
    "name": "__iswblank_l",
    "type": "CPP"
  },
  {
    "name": "__iswcntrl_l",
    "type": "CPP"
  },
  {
    "name": "__iswdigit_l",
    "type": "CPP"
  },
  {
    "name": "__iswlower_l",
    "type": "CPP"
  },
  {
    "name": "__iswgraph_l",
    "type": "CPP"
  },
  {
    "name": "__iswprint_l",
    "type": "CPP"
  },
  {
    "name": "__iswpunct_l",
    "type": "CPP"
  },
  {
    "name": "__iswspace_l",
    "type": "CPP"
  },
  {
    "name": "__iswupper_l",
    "type": "CPP"
  },
  {
    "name": "__iswxdigit_l",
    "type": "CPP"
  },
  {
    "name": "__towlower_l",
    "type": "CPP"
  },
  {
    "name": "__towupper_l",
    "type": "CPP"
  },
  {
    "name": "__wctype_l",
    "type": "CPP"
  },
  {
    "name": "__iswctype_l",
    "type": "CPP"
  },
  {
    "name": "__wctrans_l",
    "type": "CPP"
  },
  {
    "name": "__towctrans_l",
    "type": "CPP"
  },
  {
    "name": "getspent",
    "type": "CPP"
  },
  {
    "name": "getspnam",
    "type": "CPP"
  },
  {
    "name": "sgetspent",
    "type": "CPP"
  },
  {
    "name": "fgetspent",
    "type": "CPP"
  },
  {
    "name": "putspent",
    "type": "CPP"
  },
  {
    "name": "setspent",
    "type": "CPP"
  },
  {
    "name": "endspent",
    "type": "CPP"
  },
  {
    "name": "getspent_r",
    "type": "CPP"
  },
  {
    "name": "getspnam_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_spent",
    "type": "CPP"
  },
  {
    "name": "sgetspent_r",
    "type": "CPP"
  },
  {
    "name": "fgetspent_r",
    "type": "CPP"
  },
  {
    "name": "lckpwdf",
    "type": "CPP"
  },
  {
    "name": "ulckpwdf",
    "type": "CPP"
  },
  {
    "name": "getsgent",
    "type": "CPP"
  },
  {
    "name": "getsgnam",
    "type": "CPP"
  },
  {
    "name": "sgetsgent",
    "type": "CPP"
  },
  {
    "name": "fgetsgent",
    "type": "CPP"
  },
  {
    "name": "putsgent",
    "type": "CPP"
  },
  {
    "name": "setsgent",
    "type": "CPP"
  },
  {
    "name": "endsgent",
    "type": "CPP"
  },
  {
    "name": "getsgent_r",
    "type": "CPP"
  },
  {
    "name": "getsgnam_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_sgent",
    "type": "CPP"
  },
  {
    "name": "sgetsgent_r",
    "type": "CPP"
  },
  {
    "name": "fgetsgent_r",
    "type": "CPP"
  },
  {
    "name": "argp_failure",
    "type": "CPP"
  },
  {
    "name": "argp_help",
    "type": "CPP"
  },
  {
    "name": "argp_state_help",
    "type": "CPP"
  },
  {
    "name": "argp_error",
    "type": "CPP"
  },
  {
    "name": "argp_parse",
    "type": "CPP"
  },
  {
    "name": "argp_usage",
    "type": "CPP"
  },
  {
    "name": "__backtrace",
    "type": "CPP"
  },
  {
    "name": "__backtrace_symbols",
    "type": "CPP"
  },
  {
    "name": "__backtrace_symbols_fd",
    "type": "CPP"
  },
  {
    "name": "__cyg_profile_func_enter",
    "type": "CPP"
  },
  {
    "name": "__memcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__memmove_chk",
    "type": "CPP"
  },
  {
    "name": "__mempcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__memset_chk",
    "type": "CPP"
  },
  {
    "name": "__stpcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__strcat_chk",
    "type": "CPP"
  },
  {
    "name": "__strcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__strncat_chk",
    "type": "CPP"
  },
  {
    "name": "__strncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__stpncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__sprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vsprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__snprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vsnprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__printf_chk",
    "type": "CPP"
  },
  {
    "name": "__fprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vfprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__gets_chk",
    "type": "CPP"
  },
  {
    "name": "__chk_fail",
    "type": "CPP"
  },
  {
    "name": "__fgets_chk",
    "type": "CPP"
  },
  {
    "name": "__fgets_unlocked_chk",
    "type": "CPP"
  },
  {
    "name": "__read_chk",
    "type": "CPP"
  },
  {
    "name": "__pread_chk",
    "type": "CPP"
  },
  {
    "name": "__pread64_chk",
    "type": "CPP"
  },
  {
    "name": "__recv_chk",
    "type": "CPP"
  },
  {
    "name": "__recvfrom_chk",
    "type": "CPP"
  },
  {
    "name": "__readlink_chk",
    "type": "CPP"
  },
  {
    "name": "__readlinkat_chk",
    "type": "CPP"
  },
  {
    "name": "__getwd_chk",
    "type": "CPP"
  },
  {
    "name": "__getcwd_chk",
    "type": "CPP"
  },
  {
    "name": "__realpath_chk",
    "type": "CPP"
  },
  {
    "name": "__fread_chk",
    "type": "CPP"
  },
  {
    "name": "__fread_unlocked_chk",
    "type": "CPP"
  },
  {
    "name": "__wctomb_chk",
    "type": "CPP"
  },
  {
    "name": "__wcscpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wmemcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wmemmove_chk",
    "type": "CPP"
  },
  {
    "name": "__wmempcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wcpcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wcscat_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsncat_chk",
    "type": "CPP"
  },
  {
    "name": "__wmemset_chk",
    "type": "CPP"
  },
  {
    "name": "__wcpncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__swprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vswprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__wprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__fwprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vwprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vfwprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__fgetws_chk",
    "type": "CPP"
  },
  {
    "name": "__fgetws_unlocked_chk",
    "type": "CPP"
  },
  {
    "name": "__confstr_chk",
    "type": "CPP"
  },
  {
    "name": "__getgroups_chk",
    "type": "CPP"
  },
  {
    "name": "__ttyname_r_chk",
    "type": "CPP"
  },
  {
    "name": "__gethostname_chk",
    "type": "CPP"
  },
  {
    "name": "__getdomainname_chk",
    "type": "CPP"
  },
  {
    "name": "__wcrtomb_chk",
    "type": "CPP"
  },
  {
    "name": "__mbsnrtowcs_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsnrtombs_chk",
    "type": "CPP"
  },
  {
    "name": "__mbsrtowcs_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsrtombs_chk",
    "type": "CPP"
  },
  {
    "name": "__mbstowcs_chk",
    "type": "CPP"
  },
  {
    "name": "__wcstombs_chk",
    "type": "CPP"
  },
  {
    "name": "__asprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vasprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__dprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vdprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__obstack_printf_chk",
    "type": "CPP"
  },
  {
    "name": "__obstack_vprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__longjmp_chk",
    "type": "CPP"
  },
  {
    "name": "__fdelt_chk",
    "type": "CPP"
  },
  {
    "name": "__poll_chk",
    "type": "CPP"
  },
  {
    "name": "__ppoll_chk",
    "type": "CPP"
  },
  {
    "name": "__explicit_bzero_chk",
    "type": "CPP"
  },
  {
    "name": "__stack_chk_fail",
    "type": "CPP"
  },
  {
    "name": "__fortify_fail",
    "type": "CPP"
  },
  {
    "name": "htonl",
    "type": "CPP"
  },
  {
    "name": "htons",
    "type": "CPP"
  },
  {
    "name": "inet_lnaof",
    "type": "CPP"
  },
  {
    "name": "inet_makeaddr",
    "type": "CPP"
  },
  {
    "name": "inet_netof",
    "type": "CPP"
  },
  {
    "name": "inet_ntoa",
    "type": "CPP"
  },
  {
    "name": "inet_network",
    "type": "CPP"
  },
  {
    "name": "__h_errno_location",
    "type": "CPP"
  },
  {
    "name": "gethostbyaddr",
    "type": "CPP"
  },
  {
    "name": "gethostbyaddr_r",
    "type": "CPP"
  },
  {
    "name": "gethostbyname",
    "type": "CPP"
  },
  {
    "name": "gethostbyname2",
    "type": "CPP"
  },
  {
    "name": "gethostbyname2_r",
    "type": "CPP"
  },
  {
    "name": "gethostbyname_r",
    "type": "CPP"
  },
  {
    "name": "gethostent",
    "type": "CPP"
  },
  {
    "name": "sethostent",
    "type": "CPP"
  },
  {
    "name": "endhostent",
    "type": "CPP"
  },
  {
    "name": "gethostent_r",
    "type": "CPP"
  },
  {
    "name": "getnetbyaddr",
    "type": "CPP"
  },
  {
    "name": "getnetbyaddr_r",
    "type": "CPP"
  },
  {
    "name": "getnetbyname",
    "type": "CPP"
  },
  {
    "name": "getnetent",
    "type": "CPP"
  },
  {
    "name": "setnetent",
    "type": "CPP"
  },
  {
    "name": "endnetent",
    "type": "CPP"
  },
  {
    "name": "getnetent_r",
    "type": "CPP"
  },
  {
    "name": "getnetbyname_r",
    "type": "CPP"
  },
  {
    "name": "getprotobynumber",
    "type": "CPP"
  },
  {
    "name": "getprotobynumber_r",
    "type": "CPP"
  },
  {
    "name": "getprotoent",
    "type": "CPP"
  },
  {
    "name": "setprotoent",
    "type": "CPP"
  },
  {
    "name": "endprotoent",
    "type": "CPP"
  },
  {
    "name": "getprotoent_r",
    "type": "CPP"
  },
  {
    "name": "getprotobyname",
    "type": "CPP"
  },
  {
    "name": "getprotobyname_r",
    "type": "CPP"
  },
  {
    "name": "getservbyname",
    "type": "CPP"
  },
  {
    "name": "getservbyname_r",
    "type": "CPP"
  },
  {
    "name": "getservbyport",
    "type": "CPP"
  },
  {
    "name": "getservbyport_r",
    "type": "CPP"
  },
  {
    "name": "getservent",
    "type": "CPP"
  },
  {
    "name": "setservent",
    "type": "CPP"
  },
  {
    "name": "endservent",
    "type": "CPP"
  },
  {
    "name": "getservent_r",
    "type": "CPP"
  },
  {
    "name": "ether_aton",
    "type": "CPP"
  },
  {
    "name": "ether_aton_r",
    "type": "CPP"
  },
  {
    "name": "ether_hostton",
    "type": "CPP"
  },
  {
    "name": "ether_line",
    "type": "CPP"
  },
  {
    "name": "ether_ntoa",
    "type": "CPP"
  },
  {
    "name": "ether_ntoa_r",
    "type": "CPP"
  },
  {
    "name": "ether_ntohost",
    "type": "CPP"
  },
  {
    "name": "rresvport_af",
    "type": "CPP"
  },
  {
    "name": "rcmd_af",
    "type": "CPP"
  },
  {
    "name": "rcmd",
    "type": "CPP"
  },
  {
    "name": "rresvport",
    "type": "CPP"
  },
  {
    "name": "ruserok_af",
    "type": "CPP"
  },
  {
    "name": "ruserok",
    "type": "CPP"
  },
  {
    "name": "iruserok_af",
    "type": "CPP"
  },
  {
    "name": "iruserok",
    "type": "CPP"
  },
  {
    "name": "__ivaliduser",
    "type": "CPP"
  },
  {
    "name": "rexec_af",
    "type": "CPP"
  },
  {
    "name": "rexec",
    "type": "CPP"
  },
  {
    "name": "ruserpass",
    "type": "CPP"
  },
  {
    "name": "__internal_setnetgrent",
    "type": "CPP"
  },
  {
    "name": "setnetgrent",
    "type": "CPP"
  },
  {
    "name": "__internal_endnetgrent",
    "type": "CPP"
  },
  {
    "name": "endnetgrent",
    "type": "CPP"
  },
  {
    "name": "__internal_getnetgrent_r",
    "type": "CPP"
  },
  {
    "name": "getnetgrent_r",
    "type": "CPP"
  },
  {
    "name": "innetgr",
    "type": "CPP"
  },
  {
    "name": "getnetgrent",
    "type": "CPP"
  },
  {
    "name": "setaliasent",
    "type": "CPP"
  },
  {
    "name": "endaliasent",
    "type": "CPP"
  },
  {
    "name": "getaliasent_r",
    "type": "CPP"
  },
  {
    "name": "getaliasent",
    "type": "CPP"
  },
  {
    "name": "getaliasbyname",
    "type": "CPP"
  },
  {
    "name": "getaliasbyname_r",
    "type": "CPP"
  },
  {
    "name": "getnameinfo",
    "type": "CPP"
  },
  {
    "name": "if_nametoindex",
    "type": "CPP"
  },
  {
    "name": "if_freenameindex",
    "type": "CPP"
  },
  {
    "name": "if_nameindex",
    "type": "CPP"
  },
  {
    "name": "if_indextoname",
    "type": "CPP"
  },
  {
    "name": "getifaddrs",
    "type": "CPP"
  },
  {
    "name": "freeifaddrs",
    "type": "CPP"
  },
  {
    "name": "inet6_option_space",
    "type": "CPP"
  },
  {
    "name": "inet6_option_init",
    "type": "CPP"
  },
  {
    "name": "inet6_option_append",
    "type": "CPP"
  },
  {
    "name": "inet6_option_alloc",
    "type": "CPP"
  },
  {
    "name": "inet6_option_next",
    "type": "CPP"
  },
  {
    "name": "inet6_option_find",
    "type": "CPP"
  },
  {
    "name": "getipv4sourcefilter",
    "type": "CPP"
  },
  {
    "name": "setipv4sourcefilter",
    "type": "CPP"
  },
  {
    "name": "getsourcefilter",
    "type": "CPP"
  },
  {
    "name": "setsourcefilter",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_init",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_append",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_finish",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_set_val",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_next",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_find",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_get_val",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_space",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_init",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_add",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_reverse",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_segments",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_getaddr",
    "type": "CPP"
  },
  {
    "name": "__inet6_scopeid_pton",
    "type": "CPP"
  },
  {
    "name": "__idna_to_dns_encoding",
    "type": "CPP"
  },
  {
    "name": "__idna_from_dns_encoding",
    "type": "CPP"
  },
  {
    "name": "__netlink_assert_response",
    "type": "CPP"
  },
  {
    "name": "hstrerror",
    "type": "CPP"
  },
  {
    "name": "herror",
    "type": "CPP"
  },
  {
    "name": "__inet_aton_exact",
    "type": "CPP"
  },
  {
    "name": "inet_aton",
    "type": "CPP"
  },
  {
    "name": "inet_addr",
    "type": "CPP"
  },
  {
    "name": "inet_ntop",
    "type": "CPP"
  },
  {
    "name": "__inet_pton_length",
    "type": "CPP"
  },
  {
    "name": "inet_pton",
    "type": "CPP"
  },
  {
    "name": "inet_nsap_addr",
    "type": "CPP"
  },
  {
    "name": "inet_nsap_ntoa",
    "type": "CPP"
  },
  {
    "name": "__res_ninit",
    "type": "CPP"
  },
  {
    "name": "__res_init",
    "type": "CPP"
  },
  {
    "name": "__res_state",
    "type": "CPP"
  },
  {
    "name": "__res_randomid",
    "type": "CPP"
  },
  {
    "name": "__res_iclose",
    "type": "CPP"
  },
  {
    "name": "__res_nclose",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_get",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_get_preinit",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_get_override",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_put",
    "type": "CPP"
  },
  {
    "name": "__gai_sigqueue",
    "type": "CPP"
  },
  {
    "name": "__nss_database_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_configure_lookup",
    "type": "CPP"
  },
  {
    "name": "__nss_lookup_function",
    "type": "CPP"
  },
  {
    "name": "__nss_lookup",
    "type": "CPP"
  },
  {
    "name": "__nss_next2",
    "type": "CPP"
  },
  {
    "name": "__nss_disable_nscd",
    "type": "CPP"
  },
  {
    "name": "__nss_hostname_digits_dots",
    "type": "CPP"
  },
  {
    "name": "__nss_services_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_hosts_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_group_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_passwd_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_hash",
    "type": "CPP"
  },
  {
    "name": "authnone_create",
    "type": "CPP"
  },
  {
    "name": "xdr_authunix_parms",
    "type": "CPP"
  },
  {
    "name": "bindresvport",
    "type": "CPP"
  },
  {
    "name": "clntraw_create",
    "type": "CPP"
  },
  {
    "name": "callrpc",
    "type": "CPP"
  },
  {
    "name": "_rpc_dtablesize",
    "type": "CPP"
  },
  {
    "name": "getrpcport",
    "type": "CPP"
  },
  {
    "name": "pmap_set",
    "type": "CPP"
  },
  {
    "name": "pmap_unset",
    "type": "CPP"
  },
  {
    "name": "pmap_getmaps",
    "type": "CPP"
  },
  {
    "name": "xdr_pmap",
    "type": "CPP"
  },
  {
    "name": "xdr_pmaplist",
    "type": "CPP"
  },
  {
    "name": "xdr_rmtcallres",
    "type": "CPP"
  },
  {
    "name": "xdr_rmtcall_args",
    "type": "CPP"
  },
  {
    "name": "pmap_rmtcall",
    "type": "CPP"
  },
  {
    "name": "clnt_broadcast",
    "type": "CPP"
  },
  {
    "name": "xdr_rejected_reply",
    "type": "CPP"
  },
  {
    "name": "xdr_opaque_auth",
    "type": "CPP"
  },
  {
    "name": "xdr_accepted_reply",
    "type": "CPP"
  },
  {
    "name": "xdr_des_block",
    "type": "CPP"
  },
  {
    "name": "xdr_replymsg",
    "type": "CPP"
  },
  {
    "name": "xdr_callhdr",
    "type": "CPP"
  },
  {
    "name": "_seterr_reply",
    "type": "CPP"
  },
  {
    "name": "xdr_callmsg",
    "type": "CPP"
  },
  {
    "name": "_authenticate",
    "type": "CPP"
  },
  {
    "name": "svcraw_create",
    "type": "CPP"
  },
  {
    "name": "registerrpc",
    "type": "CPP"
  },
  {
    "name": "xdr_float",
    "type": "CPP"
  },
  {
    "name": "xdr_double",
    "type": "CPP"
  },
  {
    "name": "xdrrec_create",
    "type": "CPP"
  },
  {
    "name": "xdrrec_skiprecord",
    "type": "CPP"
  },
  {
    "name": "xdrrec_eof",
    "type": "CPP"
  },
  {
    "name": "xdrrec_endofrecord",
    "type": "CPP"
  },
  {
    "name": "getpublickey",
    "type": "CPP"
  },
  {
    "name": "getsecretkey",
    "type": "CPP"
  },
  {
    "name": "xdr_authdes_cred",
    "type": "CPP"
  },
  {
    "name": "xdr_authdes_verf",
    "type": "CPP"
  },
  {
    "name": "cbc_crypt",
    "type": "CPP"
  },
  {
    "name": "ecb_crypt",
    "type": "CPP"
  },
  {
    "name": "des_setparity",
    "type": "CPP"
  },
  {
    "name": "xdr_keystatus",
    "type": "CPP"
  },
  {
    "name": "xdr_keybuf",
    "type": "CPP"
  },
  {
    "name": "xdr_netnamestr",
    "type": "CPP"
  },
  {
    "name": "xdr_cryptkeyarg",
    "type": "CPP"
  },
  {
    "name": "xdr_cryptkeyarg2",
    "type": "CPP"
  },
  {
    "name": "xdr_cryptkeyres",
    "type": "CPP"
  },
  {
    "name": "xdr_unixcred",
    "type": "CPP"
  },
  {
    "name": "xdr_getcredres",
    "type": "CPP"
  },
  {
    "name": "xdr_key_netstarg",
    "type": "CPP"
  },
  {
    "name": "xdr_key_netstres",
    "type": "CPP"
  },
  {
    "name": "rtime",
    "type": "CPP"
  },
  {
    "name": "authdes_getucred",
    "type": "CPP"
  },
  {
    "name": "getrpcent",
    "type": "CPP"
  },
  {
    "name": "getrpcbyname",
    "type": "CPP"
  },
  {
    "name": "getrpcbynumber",
    "type": "CPP"
  },
  {
    "name": "setrpcent",
    "type": "CPP"
  },
  {
    "name": "endrpcent",
    "type": "CPP"
  },
  {
    "name": "getrpcent_r",
    "type": "CPP"
  },
  {
    "name": "getrpcbyname_r",
    "type": "CPP"
  },
  {
    "name": "getrpcbynumber_r",
    "type": "CPP"
  },
  {
    "name": "clntunix_create",
    "type": "CPP"
  },
  {
    "name": "svcunix_create",
    "type": "CPP"
  },
  {
    "name": "svcunixfd_create",
    "type": "CPP"
  },
  {
    "name": "authdes_pk_create",
    "type": "CPP"
  },
  {
    "name": "authdes_create",
    "type": "CPP"
  },
  {
    "name": "authunix_create",
    "type": "CPP"
  },
  {
    "name": "authunix_create_default",
    "type": "CPP"
  },
  {
    "name": "clnt_create",
    "type": "CPP"
  },
  {
    "name": "clnt_sperrno",
    "type": "CPP"
  },
  {
    "name": "clnt_sperror",
    "type": "CPP"
  },
  {
    "name": "clnt_perror",
    "type": "CPP"
  },
  {
    "name": "clnt_perrno",
    "type": "CPP"
  },
  {
    "name": "clnt_spcreateerror",
    "type": "CPP"
  },
  {
    "name": "clnt_pcreateerror",
    "type": "CPP"
  },
  {
    "name": "clnttcp_create",
    "type": "CPP"
  },
  {
    "name": "__libc_clntudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "clntudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "clntudp_create",
    "type": "CPP"
  },
  {
    "name": "get_myaddress",
    "type": "CPP"
  },
  {
    "name": "key_setsecret",
    "type": "CPP"
  },
  {
    "name": "key_secretkey_is_set",
    "type": "CPP"
  },
  {
    "name": "key_encryptsession",
    "type": "CPP"
  },
  {
    "name": "key_decryptsession",
    "type": "CPP"
  },
  {
    "name": "key_encryptsession_pk",
    "type": "CPP"
  },
  {
    "name": "key_decryptsession_pk",
    "type": "CPP"
  },
  {
    "name": "key_gendes",
    "type": "CPP"
  },
  {
    "name": "key_setnet",
    "type": "CPP"
  },
  {
    "name": "key_get_conv",
    "type": "CPP"
  },
  {
    "name": "user2netname",
    "type": "CPP"
  },
  {
    "name": "host2netname",
    "type": "CPP"
  },
  {
    "name": "getnetname",
    "type": "CPP"
  },
  {
    "name": "netname2user",
    "type": "CPP"
  },
  {
    "name": "netname2host",
    "type": "CPP"
  },
  {
    "name": "__libc_rpc_getport",
    "type": "CPP"
  },
  {
    "name": "pmap_getport",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_svc_fdset",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_createerr",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_svc_pollfd",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_svc_max_pollfd",
    "type": "CPP"
  },
  {
    "name": "xprt_register",
    "type": "CPP"
  },
  {
    "name": "xprt_unregister",
    "type": "CPP"
  },
  {
    "name": "svc_register",
    "type": "CPP"
  },
  {
    "name": "svc_unregister",
    "type": "CPP"
  },
  {
    "name": "svc_sendreply",
    "type": "CPP"
  },
  {
    "name": "svcerr_noproc",
    "type": "CPP"
  },
  {
    "name": "svcerr_decode",
    "type": "CPP"
  },
  {
    "name": "svcerr_systemerr",
    "type": "CPP"
  },
  {
    "name": "svcerr_auth",
    "type": "CPP"
  },
  {
    "name": "svcerr_weakauth",
    "type": "CPP"
  },
  {
    "name": "svcerr_noprog",
    "type": "CPP"
  },
  {
    "name": "svcerr_progvers",
    "type": "CPP"
  },
  {
    "name": "svc_getreq_common",
    "type": "CPP"
  },
  {
    "name": "svc_getreqset",
    "type": "CPP"
  },
  {
    "name": "svc_getreq",
    "type": "CPP"
  },
  {
    "name": "svc_getreq_poll",
    "type": "CPP"
  },
  {
    "name": "svctcp_create",
    "type": "CPP"
  },
  {
    "name": "svcfd_create",
    "type": "CPP"
  },
  {
    "name": "svcudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "svcudp_create",
    "type": "CPP"
  },
  {
    "name": "svcudp_enablecache",
    "type": "CPP"
  },
  {
    "name": "passwd2des",
    "type": "CPP"
  },
  {
    "name": "xencrypt",
    "type": "CPP"
  },
  {
    "name": "xdecrypt",
    "type": "CPP"
  },
  {
    "name": "xdr_array",
    "type": "CPP"
  },
  {
    "name": "xdr_vector",
    "type": "CPP"
  },
  {
    "name": "xdr_free",
    "type": "CPP"
  },
  {
    "name": "xdr_void",
    "type": "CPP"
  },
  {
    "name": "xdr_int",
    "type": "CPP"
  },
  {
    "name": "xdr_u_int",
    "type": "CPP"
  },
  {
    "name": "xdr_long",
    "type": "CPP"
  },
  {
    "name": "xdr_u_long",
    "type": "CPP"
  },
  {
    "name": "xdr_hyper",
    "type": "CPP"
  },
  {
    "name": "xdr_u_hyper",
    "type": "CPP"
  },
  {
    "name": "xdr_longlong_t",
    "type": "CPP"
  },
  {
    "name": "xdr_u_longlong_t",
    "type": "CPP"
  },
  {
    "name": "xdr_short",
    "type": "CPP"
  },
  {
    "name": "xdr_u_short",
    "type": "CPP"
  },
  {
    "name": "xdr_char",
    "type": "CPP"
  },
  {
    "name": "xdr_u_char",
    "type": "CPP"
  },
  {
    "name": "xdr_bool",
    "type": "CPP"
  },
  {
    "name": "xdr_enum",
    "type": "CPP"
  },
  {
    "name": "xdr_opaque",
    "type": "CPP"
  },
  {
    "name": "xdr_bytes",
    "type": "CPP"
  },
  {
    "name": "xdr_netobj",
    "type": "CPP"
  },
  {
    "name": "xdr_union",
    "type": "CPP"
  },
  {
    "name": "xdr_string",
    "type": "CPP"
  },
  {
    "name": "xdr_wrapstring",
    "type": "CPP"
  },
  {
    "name": "xdr_int64_t",
    "type": "CPP"
  },
  {
    "name": "xdr_quad_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint64_t",
    "type": "CPP"
  },
  {
    "name": "xdr_u_quad_t",
    "type": "CPP"
  },
  {
    "name": "xdr_int32_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint32_t",
    "type": "CPP"
  },
  {
    "name": "xdr_int16_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint16_t",
    "type": "CPP"
  },
  {
    "name": "xdr_int8_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint8_t",
    "type": "CPP"
  },
  {
    "name": "xdrmem_create",
    "type": "CPP"
  },
  {
    "name": "xdr_reference",
    "type": "CPP"
  },
  {
    "name": "xdr_pointer",
    "type": "CPP"
  },
  {
    "name": "xdr_sizeof",
    "type": "CPP"
  },
  {
    "name": "xdrstdio_create",
    "type": "CPP"
  },
  {
    "name": "svc_exit",
    "type": "CPP"
  },
  {
    "name": "svc_run",
    "type": "CPP"
  },
  {
    "name": "getlogin",
    "type": "CPP"
  },
  {
    "name": "getlogin_r",
    "type": "CPP"
  },
  {
    "name": "setlogin",
    "type": "CPP"
  },
  {
    "name": "__getlogin_r_chk",
    "type": "CPP"
  },
  {
    "name": "getutent",
    "type": "CPP"
  },
  {
    "name": "setutent",
    "type": "CPP"
  },
  {
    "name": "getutent_r",
    "type": "CPP"
  },
  {
    "name": "pututline",
    "type": "CPP"
  },
  {
    "name": "endutent",
    "type": "CPP"
  },
  {
    "name": "getutid",
    "type": "CPP"
  },
  {
    "name": "getutline",
    "type": "CPP"
  },
  {
    "name": "getutid_r",
    "type": "CPP"
  },
  {
    "name": "getutline_r",
    "type": "CPP"
  },
  {
    "name": "utmpname",
    "type": "CPP"
  },
  {
    "name": "updwtmp",
    "type": "CPP"
  },
  {
    "name": "posix_openpt",
    "type": "CPP"
  },
  {
    "name": "getpt",
    "type": "CPP"
  },
  {
    "name": "grantpt",
    "type": "CPP"
  },
  {
    "name": "unlockpt",
    "type": "CPP"
  },
  {
    "name": "ptsname",
    "type": "CPP"
  },
  {
    "name": "ptsname_r",
    "type": "CPP"
  },
  {
    "name": "__ptsname_r_chk",
    "type": "CPP"
  },
  {
    "name": "setutxent",
    "type": "CPP"
  },
  {
    "name": "getutxent",
    "type": "CPP"
  },
  {
    "name": "endutxent",
    "type": "CPP"
  },
  {
    "name": "getutxid",
    "type": "CPP"
  },
  {
    "name": "getutxline",
    "type": "CPP"
  },
  {
    "name": "pututxline",
    "type": "CPP"
  },
  {
    "name": "utmpxname",
    "type": "CPP"
  },
  {
    "name": "updwtmpx",
    "type": "CPP"
  },
  {
    "name": "getutmp",
    "type": "CPP"
  },
  {
    "name": "dl_iterate_phdr",
    "type": "CPP"
  },
  {
    "name": "_dl_addr",
    "type": "CPP"
  },
  {
    "name": "_dl_mcount_wrapper",
    "type": "CPP"
  },
  {
    "name": "_dl_mcount_wrapper_check",
    "type": "CPP"
  },
  {
    "name": "__libc_dlopen_mode",
    "type": "CPP"
  },
  {
    "name": "__libc_dlsym",
    "type": "CPP"
  },
  {
    "name": "__libc_dlvsym",
    "type": "CPP"
  },
  {
    "name": "__libc_dlclose",
    "type": "CPP"
  },
  {
    "name": "_dl_vsym",
    "type": "CPP"
  },
  {
    "name": "_dl_sym",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_error",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_error",
    "type": "CPP"
  },
  {
    "name": "__sigismember",
    "type": "CPP"
  },
  {
    "name": "__sigaddset",
    "type": "CPP"
  },
  {
    "name": "__sigdelset",
    "type": "CPP"
  },
  {
    "name": "quick_exit",
    "type": "CPP"
  },
  {
    "name": "_IO_vfscanf",
    "type": "CPP"
  },
  {
    "name": "malloc_get_state",
    "type": "CPP"
  },
  {
    "name": "malloc_set_state",
    "type": "CPP"
  },
  {
    "name": "stime",
    "type": "CPP"
  },
  {
    "name": "glob",
    "type": "CPP"
  },
  {
    "name": "fattach",
    "type": "CPP"
  },
  {
    "name": "fdetach",
    "type": "CPP"
  },
  {
    "name": "getmsg",
    "type": "CPP"
  },
  {
    "name": "getpmsg",
    "type": "CPP"
  },
  {
    "name": "isastream",
    "type": "CPP"
  },
  {
    "name": "putmsg",
    "type": "CPP"
  },
  {
    "name": "putpmsg",
    "type": "CPP"
  },
  {
    "name": "step",
    "type": "CPP"
  },
  {
    "name": "advance",
    "type": "CPP"
  },
  {
    "name": "__nss_group_lookup",
    "type": "CPP"
  },
  {
    "name": "__nss_next",
    "type": "CPP"
  },
  {
    "name": "__nss_database_lookup",
    "type": "CPP"
  },
  {
    "name": "__libc_freeres",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/aarch64-linux-gnu/libpthread-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "_init",
    "type": "CPP"
  },
  {
    "name": "init_have_lse_atomics",
    "type": "CPP"
  },
  {
    "name": "deregister_tm_clones",
    "type": "CPP"
  },
  {
    "name": "register_tm_clones",
    "type": "CPP"
  },
  {
    "name": "__do_global_dtors_aux",
    "type": "CPP"
  },
  {
    "name": "frame_dummy",
    "type": "CPP"
  },
  {
    "name": "__nptl_set_robust",
    "type": "CPP"
  },
  {
    "name": "sigcancel_handler",
    "type": "CPP"
  },
  {
    "name": "sighandler_setxid",
    "type": "CPP"
  },
  {
    "name": "__pthread_initialize_minimal",
    "type": "CPP"
  },
  {
    "name": "__pthread_get_minstack",
    "type": "CPP"
  },
  {
    "name": "__libpthread_freeres",
    "type": "CPP"
  },
  {
    "name": "__GI___nptl_create_event",
    "type": "CPP"
  },
  {
    "name": "__GI___nptl_death_event",
    "type": "CPP"
  },
  {
    "name": "__nptl_main",
    "type": "CPP"
  },
  {
    "name": "stack_list_del",
    "type": "CPP"
  },
  {
    "name": "free_stacks",
    "type": "CPP"
  },
  {
    "name": "stack_list_add",
    "type": "CPP"
  },
  {
    "name": "change_stack_perm",
    "type": "CPP"
  },
  {
    "name": "create_thread",
    "type": "CPP"
  },
  {
    "name": "setxid_mark_thread.isra.0",
    "type": "CPP"
  },
  {
    "name": "setxid_unmark_thread.isra.0",
    "type": "CPP"
  },
  {
    "name": "setxid_signal_thread",
    "type": "CPP"
  },
  {
    "name": "__nptl_stacks_freeres",
    "type": "CPP"
  },
  {
    "name": "__deallocate_stack",
    "type": "CPP"
  },
  {
    "name": "__make_stacks_executable",
    "type": "CPP"
  },
  {
    "name": "__reclaim_stacks",
    "type": "CPP"
  },
  {
    "name": "__nptl_setxid_error",
    "type": "CPP"
  },
  {
    "name": "__nptl_setxid",
    "type": "CPP"
  },
  {
    "name": "__pthread_init_static_tls",
    "type": "CPP"
  },
  {
    "name": "__wait_lookup_done",
    "type": "CPP"
  },
  {
    "name": "__find_in_stack_list",
    "type": "CPP"
  },
  {
    "name": "__nptl_deallocate_tsd",
    "type": "CPP"
  },
  {
    "name": "__free_tcb",
    "type": "CPP"
  },
  {
    "name": "start_thread",
    "type": "CPP"
  },
  {
    "name": "__pthread_create_2_1",
    "type": "CPP"
  },
  {
    "name": "__pthread_exit",
    "type": "CPP"
  },
  {
    "name": "__pthread_detach",
    "type": "CPP"
  },
  {
    "name": "__pthread_join",
    "type": "CPP"
  },
  {
    "name": "pthread_tryjoin_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_timedjoin_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_clockjoin_np",
    "type": "CPP"
  },
  {
    "name": "cleanup",
    "type": "CPP"
  },
  {
    "name": "__pthread_clockjoin_ex",
    "type": "CPP"
  },
  {
    "name": "pthread_yield",
    "type": "CPP"
  },
  {
    "name": "pthread_getconcurrency",
    "type": "CPP"
  },
  {
    "name": "pthread_setconcurrency",
    "type": "CPP"
  },
  {
    "name": "__pthread_getschedparam",
    "type": "CPP"
  },
  {
    "name": "__pthread_setschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedprio",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getguardsize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setguardsize",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getscope",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setscope",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getstackaddr",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setstackaddr",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getstacksize",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setstacksize",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getstack",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setstack",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_np",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_init",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_lock_full",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_lock",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_trylock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_clocklock_common",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_clocklock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_timedlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_unlock_full",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_unlock_usercnt",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_unlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_cond_lock_full",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_cond_lock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_cond_lock_adjust",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutexattr_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutexattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutexattr_settype",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_destroy",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_rwlock_rdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedrdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockrdlock",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_rwlock_wrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedwrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockwrlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_tryrdlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_trywrlock",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_rwlock_unlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setkind_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "__condvar_confirm_wakeup",
    "type": "CPP"
  },
  {
    "name": "__condvar_release_lock",
    "type": "CPP"
  },
  {
    "name": "__condvar_dec_grefs",
    "type": "CPP"
  },
  {
    "name": "__condvar_cancel_waiting",
    "type": "CPP"
  },
  {
    "name": "__condvar_cleanup_waiting",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_clockwait",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "__pthread_condattr_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_condattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getclock",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setclock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_init",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_lock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_trylock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_unlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrier_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_key_create",
    "type": "CPP"
  },
  {
    "name": "__pthread_key_delete",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_getspecific",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_setspecific",
    "type": "CPP"
  },
  {
    "name": "pthread_sigmask",
    "type": "CPP"
  },
  {
    "name": "__pthread_kill",
    "type": "CPP"
  },
  {
    "name": "pthread_sigqueue",
    "type": "CPP"
  },
  {
    "name": "__pthread_cancel",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_testcancel",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_setcancelstate",
    "type": "CPP"
  },
  {
    "name": "__pthread_setcanceltype",
    "type": "CPP"
  },
  {
    "name": "__pthread_once_slow",
    "type": "CPP"
  },
  {
    "name": "clear_once_control",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_once",
    "type": "CPP"
  },
  {
    "name": "pthread_getcpuclockid",
    "type": "CPP"
  },
  {
    "name": "where_is_shmfs",
    "type": "CPP"
  },
  {
    "name": "__GI___shm_directory",
    "type": "CPP"
  },
  {
    "name": "__shm_directory_freeres",
    "type": "CPP"
  },
  {
    "name": "__new_sem_init",
    "type": "CPP"
  },
  {
    "name": "__new_sem_destroy",
    "type": "CPP"
  },
  {
    "name": "check_add_mapping",
    "type": "CPP"
  },
  {
    "name": "__sem_search",
    "type": "CPP"
  },
  {
    "name": "sem_open",
    "type": "CPP"
  },
  {
    "name": "walker",
    "type": "CPP"
  },
  {
    "name": "sem_close",
    "type": "CPP"
  },
  {
    "name": "sem_unlink",
    "type": "CPP"
  },
  {
    "name": "__new_sem_getvalue",
    "type": "CPP"
  },
  {
    "name": "__sem_wait_cleanup",
    "type": "CPP"
  },
  {
    "name": "do_futex_wait.constprop.0",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait_slow.constprop.0",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait",
    "type": "CPP"
  },
  {
    "name": "__new_sem_trywait",
    "type": "CPP"
  },
  {
    "name": "__sem_wait_cleanup",
    "type": "CPP"
  },
  {
    "name": "do_futex_wait.constprop.0",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait_slow.constprop.0",
    "type": "CPP"
  },
  {
    "name": "sem_timedwait",
    "type": "CPP"
  },
  {
    "name": "__sem_wait_cleanup",
    "type": "CPP"
  },
  {
    "name": "do_futex_wait",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait_slow",
    "type": "CPP"
  },
  {
    "name": "sem_clockwait",
    "type": "CPP"
  },
  {
    "name": "__new_sem_post",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_register_cancel",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_unregister_cancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_register_cancel_defer",
    "type": "CPP"
  },
  {
    "name": "__pthread_unregister_cancel_restore",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_push",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_pop",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_push_defer",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_pop_restore",
    "type": "CPP"
  },
  {
    "name": "unwind_stop",
    "type": "CPP"
  },
  {
    "name": "unwind_cleanup",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_unwind",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_unwind_next",
    "type": "CPP"
  },
  {
    "name": "longjmp_alias",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_cleanup_upto",
    "type": "CPP"
  },
  {
    "name": "__pthread_enable_asynccancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_disable_asynccancel",
    "type": "CPP"
  },
  {
    "name": "__lll_lock_wait_private",
    "type": "CPP"
  },
  {
    "name": "__lll_lock_wait",
    "type": "CPP"
  },
  {
    "name": "__lll_clocklock_wait",
    "type": "CPP"
  },
  {
    "name": "__fork_alias",
    "type": "CPP"
  },
  {
    "name": "__fcntl_alias",
    "type": "CPP"
  },
  {
    "name": "__libc_write",
    "type": "CPP"
  },
  {
    "name": "__libc_read",
    "type": "CPP"
  },
  {
    "name": "__close",
    "type": "CPP"
  },
  {
    "name": "accept",
    "type": "CPP"
  },
  {
    "name": "__connect",
    "type": "CPP"
  },
  {
    "name": "__libc_recv",
    "type": "CPP"
  },
  {
    "name": "__libc_recvfrom",
    "type": "CPP"
  },
  {
    "name": "__libc_send",
    "type": "CPP"
  },
  {
    "name": "__libc_sendto",
    "type": "CPP"
  },
  {
    "name": "fsync",
    "type": "CPP"
  },
  {
    "name": "__libc_lseek",
    "type": "CPP"
  },
  {
    "name": "msync",
    "type": "CPP"
  },
  {
    "name": "__libc_open",
    "type": "CPP"
  },
  {
    "name": "__libc_pause",
    "type": "CPP"
  },
  {
    "name": "__libc_pread",
    "type": "CPP"
  },
  {
    "name": "__libc_pwrite",
    "type": "CPP"
  },
  {
    "name": "__libc_tcdrain",
    "type": "CPP"
  },
  {
    "name": "__libc_msgrcv",
    "type": "CPP"
  },
  {
    "name": "__libc_msgsnd",
    "type": "CPP"
  },
  {
    "name": "__libc_sigwait",
    "type": "CPP"
  },
  {
    "name": "__libc_sigsuspend",
    "type": "CPP"
  },
  {
    "name": "__libc_recvmsg",
    "type": "CPP"
  },
  {
    "name": "__libc_sendmsg",
    "type": "CPP"
  },
  {
    "name": "gsignal",
    "type": "CPP"
  },
  {
    "name": "system_alias",
    "type": "CPP"
  },
  {
    "name": "__flockfile",
    "type": "CPP"
  },
  {
    "name": "__ftrylockfile",
    "type": "CPP"
  },
  {
    "name": "__funlockfile",
    "type": "CPP"
  },
  {
    "name": "__libc_sigaction",
    "type": "CPP"
  },
  {
    "name": "__sigaction",
    "type": "CPP"
  },
  {
    "name": "__h_errno_location",
    "type": "CPP"
  },
  {
    "name": "__res_state",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmin",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmax",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_rtsig",
    "type": "CPP"
  },
  {
    "name": "__pthread_kill_other_threads_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_getaffinity_new",
    "type": "CPP"
  },
  {
    "name": "__pthread_setaffinity_new",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getaffinity_new",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setaffinity_new",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_consistent",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_routine",
    "type": "CPP"
  },
  {
    "name": "pthread_cancel_init",
    "type": "CPP"
  },
  {
    "name": "__nptl_unwind_freeres",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Resume",
    "type": "CPP"
  },
  {
    "name": "__gcc_personality_v0",
    "type": "CPP"
  },
  {
    "name": "_Unwind_ForcedUnwind",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetCFA",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "__init_sched_fifo_prio",
    "type": "CPP"
  },
  {
    "name": "__pthread_tpp_change_priority",
    "type": "CPP"
  },
  {
    "name": "__pthread_current_priority",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_setname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_setattr_default_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_default_np",
    "type": "CPP"
  },
  {
    "name": "thrd_create",
    "type": "CPP"
  },
  {
    "name": "thrd_detach",
    "type": "CPP"
  },
  {
    "name": "thrd_exit",
    "type": "CPP"
  },
  {
    "name": "thrd_join",
    "type": "CPP"
  },
  {
    "name": "mtx_destroy",
    "type": "CPP"
  },
  {
    "name": "mtx_init",
    "type": "CPP"
  },
  {
    "name": "mtx_lock",
    "type": "CPP"
  },
  {
    "name": "mtx_timedlock",
    "type": "CPP"
  },
  {
    "name": "mtx_trylock",
    "type": "CPP"
  },
  {
    "name": "mtx_unlock",
    "type": "CPP"
  },
  {
    "name": "call_once",
    "type": "CPP"
  },
  {
    "name": "cnd_broadcast",
    "type": "CPP"
  },
  {
    "name": "cnd_destroy",
    "type": "CPP"
  },
  {
    "name": "cnd_init",
    "type": "CPP"
  },
  {
    "name": "cnd_signal",
    "type": "CPP"
  },
  {
    "name": "cnd_timedwait",
    "type": "CPP"
  },
  {
    "name": "cnd_wait",
    "type": "CPP"
  },
  {
    "name": "tss_create",
    "type": "CPP"
  },
  {
    "name": "tss_delete",
    "type": "CPP"
  },
  {
    "name": "tss_get",
    "type": "CPP"
  },
  {
    "name": "tss_set",
    "type": "CPP"
  },
  {
    "name": "_dl_tunable_set_mutex_spin_count",
    "type": "CPP"
  },
  {
    "name": "__pthread_tunables_init",
    "type": "CPP"
  },
  {
    "name": "__libpthread_version_placeholder",
    "type": "CPP"
  },
  {
    "name": "__errno_location",
    "type": "CPP"
  },
  {
    "name": "__aarch64_cas4_relax",
    "type": "CPP"
  },
  {
    "name": "__aarch64_cas4_acq",
    "type": "CPP"
  },
  {
    "name": "__aarch64_cas8_acq",
    "type": "CPP"
  },
  {
    "name": "__aarch64_cas4_rel",
    "type": "CPP"
  },
  {
    "name": "__aarch64_cas8_rel",
    "type": "CPP"
  },
  {
    "name": "__aarch64_swp4_relax",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldadd4_relax",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldclr4_relax",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldset4_relax",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldadd8_relax",
    "type": "CPP"
  },
  {
    "name": "__aarch64_swp4_acq",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldadd4_acq",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldset4_acq",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldadd8_acq",
    "type": "CPP"
  },
  {
    "name": "__aarch64_swp4_rel",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldadd4_rel",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldclr4_rel",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldset4_rel",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldeor8_rel",
    "type": "CPP"
  },
  {
    "name": "__aarch64_ldadd4_acq_rel",
    "type": "CPP"
  },
  {
    "name": "__pthread_initialize_minimal",
    "type": "CPP"
  },
  {
    "name": "__pthread_get_minstack",
    "type": "CPP"
  },
  {
    "name": "__libpthread_freeres",
    "type": "CPP"
  },
  {
    "name": "pthread_create",
    "type": "CPP"
  },
  {
    "name": "pthread_exit",
    "type": "CPP"
  },
  {
    "name": "pthread_detach",
    "type": "CPP"
  },
  {
    "name": "pthread_join",
    "type": "CPP"
  },
  {
    "name": "pthread_tryjoin_np",
    "type": "CPP"
  },
  {
    "name": "pthread_timedjoin_np",
    "type": "CPP"
  },
  {
    "name": "pthread_clockjoin_np",
    "type": "CPP"
  },
  {
    "name": "pthread_yield",
    "type": "CPP"
  },
  {
    "name": "pthread_getconcurrency",
    "type": "CPP"
  },
  {
    "name": "pthread_setconcurrency",
    "type": "CPP"
  },
  {
    "name": "pthread_getschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedprio",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getguardsize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setguardsize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getscope",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setscope",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getstackaddr",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setstackaddr",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getstacksize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setstacksize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getstack",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setstack",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_lock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_trylock",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_clocklock",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_timedlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_unlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutexattr_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutexattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setkind_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_rdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedrdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockrdlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_wrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedwrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockwrlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_tryrdlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_trywrlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_unlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_clockwait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getclock",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setclock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_init",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_lock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_trylock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_unlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrier_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "__pthread_key_create",
    "type": "CPP"
  },
  {
    "name": "pthread_key_delete",
    "type": "CPP"
  },
  {
    "name": "__pthread_getspecific",
    "type": "CPP"
  },
  {
    "name": "__pthread_setspecific",
    "type": "CPP"
  },
  {
    "name": "pthread_sigmask",
    "type": "CPP"
  },
  {
    "name": "pthread_kill",
    "type": "CPP"
  },
  {
    "name": "pthread_sigqueue",
    "type": "CPP"
  },
  {
    "name": "pthread_cancel",
    "type": "CPP"
  },
  {
    "name": "pthread_testcancel",
    "type": "CPP"
  },
  {
    "name": "pthread_setcancelstate",
    "type": "CPP"
  },
  {
    "name": "pthread_setcanceltype",
    "type": "CPP"
  },
  {
    "name": "__pthread_once",
    "type": "CPP"
  },
  {
    "name": "pthread_getcpuclockid",
    "type": "CPP"
  },
  {
    "name": "__shm_directory",
    "type": "CPP"
  },
  {
    "name": "sem_init",
    "type": "CPP"
  },
  {
    "name": "sem_destroy",
    "type": "CPP"
  },
  {
    "name": "sem_open",
    "type": "CPP"
  },
  {
    "name": "sem_close",
    "type": "CPP"
  },
  {
    "name": "sem_unlink",
    "type": "CPP"
  },
  {
    "name": "sem_getvalue",
    "type": "CPP"
  },
  {
    "name": "sem_wait",
    "type": "CPP"
  },
  {
    "name": "sem_trywait",
    "type": "CPP"
  },
  {
    "name": "sem_timedwait",
    "type": "CPP"
  },
  {
    "name": "sem_clockwait",
    "type": "CPP"
  },
  {
    "name": "sem_post",
    "type": "CPP"
  },
  {
    "name": "__pthread_register_cancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_unregister_cancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_register_cancel_defer",
    "type": "CPP"
  },
  {
    "name": "__pthread_unregister_cancel_restore",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_push",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_pop",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_push_defer",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_pop_restore",
    "type": "CPP"
  },
  {
    "name": "__pthread_unwind",
    "type": "CPP"
  },
  {
    "name": "__pthread_unwind_next",
    "type": "CPP"
  },
  {
    "name": "longjmp",
    "type": "CPP"
  },
  {
    "name": "__fork",
    "type": "CPP"
  },
  {
    "name": "__fcntl",
    "type": "CPP"
  },
  {
    "name": "__write",
    "type": "CPP"
  },
  {
    "name": "__read",
    "type": "CPP"
  },
  {
    "name": "__close",
    "type": "CPP"
  },
  {
    "name": "accept",
    "type": "CPP"
  },
  {
    "name": "__connect",
    "type": "CPP"
  },
  {
    "name": "recv",
    "type": "CPP"
  },
  {
    "name": "recvfrom",
    "type": "CPP"
  },
  {
    "name": "__send",
    "type": "CPP"
  },
  {
    "name": "sendto",
    "type": "CPP"
  },
  {
    "name": "fsync",
    "type": "CPP"
  },
  {
    "name": "__lseek",
    "type": "CPP"
  },
  {
    "name": "msync",
    "type": "CPP"
  },
  {
    "name": "__open",
    "type": "CPP"
  },
  {
    "name": "pause",
    "type": "CPP"
  },
  {
    "name": "pread",
    "type": "CPP"
  },
  {
    "name": "pwrite",
    "type": "CPP"
  },
  {
    "name": "tcdrain",
    "type": "CPP"
  },
  {
    "name": "sigwait",
    "type": "CPP"
  },
  {
    "name": "recvmsg",
    "type": "CPP"
  },
  {
    "name": "sendmsg",
    "type": "CPP"
  },
  {
    "name": "raise",
    "type": "CPP"
  },
  {
    "name": "system",
    "type": "CPP"
  },
  {
    "name": "flockfile",
    "type": "CPP"
  },
  {
    "name": "ftrylockfile",
    "type": "CPP"
  },
  {
    "name": "funlockfile",
    "type": "CPP"
  },
  {
    "name": "__sigaction",
    "type": "CPP"
  },
  {
    "name": "__h_errno_location",
    "type": "CPP"
  },
  {
    "name": "__res_state",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmin",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmax",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_rtsig",
    "type": "CPP"
  },
  {
    "name": "pthread_kill_other_threads_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_setaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_consistent",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_routine",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_setname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_setattr_default_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_default_np",
    "type": "CPP"
  },
  {
    "name": "thrd_create",
    "type": "CPP"
  },
  {
    "name": "thrd_detach",
    "type": "CPP"
  },
  {
    "name": "thrd_exit",
    "type": "CPP"
  },
  {
    "name": "thrd_join",
    "type": "CPP"
  },
  {
    "name": "mtx_destroy",
    "type": "CPP"
  },
  {
    "name": "mtx_init",
    "type": "CPP"
  },
  {
    "name": "mtx_lock",
    "type": "CPP"
  },
  {
    "name": "mtx_timedlock",
    "type": "CPP"
  },
  {
    "name": "mtx_trylock",
    "type": "CPP"
  },
  {
    "name": "mtx_unlock",
    "type": "CPP"
  },
  {
    "name": "call_once",
    "type": "CPP"
  },
  {
    "name": "cnd_broadcast",
    "type": "CPP"
  },
  {
    "name": "cnd_destroy",
    "type": "CPP"
  },
  {
    "name": "cnd_init",
    "type": "CPP"
  },
  {
    "name": "cnd_signal",
    "type": "CPP"
  },
  {
    "name": "cnd_timedwait",
    "type": "CPP"
  },
  {
    "name": "cnd_wait",
    "type": "CPP"
  },
  {
    "name": "tss_create",
    "type": "CPP"
  },
  {
    "name": "tss_delete",
    "type": "CPP"
  },
  {
    "name": "tss_get",
    "type": "CPP"
  },
  {
    "name": "tss_set",
    "type": "CPP"
  },
  {
    "name": "__errno_location",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/aarch64-linux-gnu/libgcc_s.so.1",
    "type": "SHARED_LIB"
  },
  {
    "name": "__multi3",
    "type": "CPP"
  },
  {
    "name": "__negti2",
    "type": "CPP"
  },
  {
    "name": "__lshrti3",
    "type": "CPP"
  },
  {
    "name": "__ashlti3",
    "type": "CPP"
  },
  {
    "name": "__ashrti3",
    "type": "CPP"
  },
  {
    "name": "__cmpti2",
    "type": "CPP"
  },
  {
    "name": "__ucmpti2",
    "type": "CPP"
  },
  {
    "name": "__clear_cache",
    "type": "CPP"
  },
  {
    "name": "__absvdi2",
    "type": "CPP"
  },
  {
    "name": "__absvsi2",
    "type": "CPP"
  },
  {
    "name": "__absvti2",
    "type": "CPP"
  },
  {
    "name": "__addvdi3",
    "type": "CPP"
  },
  {
    "name": "__addvsi3",
    "type": "CPP"
  },
  {
    "name": "__addvti3",
    "type": "CPP"
  },
  {
    "name": "__subvdi3",
    "type": "CPP"
  },
  {
    "name": "__subvsi3",
    "type": "CPP"
  },
  {
    "name": "__subvti3",
    "type": "CPP"
  },
  {
    "name": "__mulvdi3",
    "type": "CPP"
  },
  {
    "name": "__mulvsi3",
    "type": "CPP"
  },
  {
    "name": "__mulvti3",
    "type": "CPP"
  },
  {
    "name": "__negvdi2",
    "type": "CPP"
  },
  {
    "name": "__negvsi2",
    "type": "CPP"
  },
  {
    "name": "__negvti2",
    "type": "CPP"
  },
  {
    "name": "__ffsdi2",
    "type": "CPP"
  },
  {
    "name": "__ffsti2",
    "type": "CPP"
  },
  {
    "name": "__clzdi2",
    "type": "CPP"
  },
  {
    "name": "__clzti2",
    "type": "CPP"
  },
  {
    "name": "__ctzdi2",
    "type": "CPP"
  },
  {
    "name": "__ctzti2",
    "type": "CPP"
  },
  {
    "name": "__popcountdi2",
    "type": "CPP"
  },
  {
    "name": "__popcountti2",
    "type": "CPP"
  },
  {
    "name": "__paritydi2",
    "type": "CPP"
  },
  {
    "name": "__parityti2",
    "type": "CPP"
  },
  {
    "name": "__powisf2",
    "type": "CPP"
  },
  {
    "name": "__powidf2",
    "type": "CPP"
  },
  {
    "name": "__powitf2",
    "type": "CPP"
  },
  {
    "name": "__mulhc3",
    "type": "CPP"
  },
  {
    "name": "__mulsc3",
    "type": "CPP"
  },
  {
    "name": "__muldc3",
    "type": "CPP"
  },
  {
    "name": "__multc3",
    "type": "CPP"
  },
  {
    "name": "__divhc3",
    "type": "CPP"
  },
  {
    "name": "__divsc3",
    "type": "CPP"
  },
  {
    "name": "__divdc3",
    "type": "CPP"
  },
  {
    "name": "__divtc3",
    "type": "CPP"
  },
  {
    "name": "__bswapsi2",
    "type": "CPP"
  },
  {
    "name": "__bswapdi2",
    "type": "CPP"
  },
  {
    "name": "__clrsbdi2",
    "type": "CPP"
  },
  {
    "name": "__clrsbti2",
    "type": "CPP"
  },
  {
    "name": "__fixunssfdi",
    "type": "CPP"
  },
  {
    "name": "__fixunsdfdi",
    "type": "CPP"
  },
  {
    "name": "__fixsfti",
    "type": "CPP"
  },
  {
    "name": "__fixdfti",
    "type": "CPP"
  },
  {
    "name": "__fixunssfti",
    "type": "CPP"
  },
  {
    "name": "__fixunsdfti",
    "type": "CPP"
  },
  {
    "name": "__floattisf",
    "type": "CPP"
  },
  {
    "name": "__floattidf",
    "type": "CPP"
  },
  {
    "name": "__floatuntisf",
    "type": "CPP"
  },
  {
    "name": "__floatuntidf",
    "type": "CPP"
  },
  {
    "name": "__divti3",
    "type": "CPP"
  },
  {
    "name": "__modti3",
    "type": "CPP"
  },
  {
    "name": "__divmodti4",
    "type": "CPP"
  },
  {
    "name": "__udivti3",
    "type": "CPP"
  },
  {
    "name": "__umodti3",
    "type": "CPP"
  },
  {
    "name": "__udivmodti4",
    "type": "CPP"
  },
  {
    "name": "__addtf3",
    "type": "CPP"
  },
  {
    "name": "__divtf3",
    "type": "CPP"
  },
  {
    "name": "__eqtf2",
    "type": "CPP"
  },
  {
    "name": "__getf2",
    "type": "CPP"
  },
  {
    "name": "__letf2",
    "type": "CPP"
  },
  {
    "name": "__multf3",
    "type": "CPP"
  },
  {
    "name": "__negtf2",
    "type": "CPP"
  },
  {
    "name": "__subtf3",
    "type": "CPP"
  },
  {
    "name": "__unordtf2",
    "type": "CPP"
  },
  {
    "name": "__fixtfsi",
    "type": "CPP"
  },
  {
    "name": "__fixunstfsi",
    "type": "CPP"
  },
  {
    "name": "__floatsitf",
    "type": "CPP"
  },
  {
    "name": "__floatunsitf",
    "type": "CPP"
  },
  {
    "name": "__fixtfdi",
    "type": "CPP"
  },
  {
    "name": "__fixunstfdi",
    "type": "CPP"
  },
  {
    "name": "__floatditf",
    "type": "CPP"
  },
  {
    "name": "__floatunditf",
    "type": "CPP"
  },
  {
    "name": "__fixtfti",
    "type": "CPP"
  },
  {
    "name": "__fixunstfti",
    "type": "CPP"
  },
  {
    "name": "__floattitf",
    "type": "CPP"
  },
  {
    "name": "__floatuntitf",
    "type": "CPP"
  },
  {
    "name": "__extendsftf2",
    "type": "CPP"
  },
  {
    "name": "__extenddftf2",
    "type": "CPP"
  },
  {
    "name": "__extendhftf2",
    "type": "CPP"
  },
  {
    "name": "__trunctfsf2",
    "type": "CPP"
  },
  {
    "name": "__trunctfdf2",
    "type": "CPP"
  },
  {
    "name": "__trunctfhf2",
    "type": "CPP"
  },
  {
    "name": "__fixhfti",
    "type": "CPP"
  },
  {
    "name": "__fixunshfti",
    "type": "CPP"
  },
  {
    "name": "__floattihf",
    "type": "CPP"
  },
  {
    "name": "__floatuntihf",
    "type": "CPP"
  },
  {
    "name": "__enable_execute_stack",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetGR",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetCFA",
    "type": "CPP"
  },
  {
    "name": "_Unwind_SetGR",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetIP",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetIPInfo",
    "type": "CPP"
  },
  {
    "name": "_Unwind_SetIP",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetLanguageSpecificData",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetRegionStart",
    "type": "CPP"
  },
  {
    "name": "_Unwind_FindEnclosingFunction",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetDataRelBase",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetTextRelBase",
    "type": "CPP"
  },
  {
    "name": "__frame_state_for",
    "type": "CPP"
  },
  {
    "name": "_Unwind_RaiseException",
    "type": "CPP"
  },
  {
    "name": "_Unwind_ForcedUnwind",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Resume",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Resume_or_Rethrow",
    "type": "CPP"
  },
  {
    "name": "_Unwind_DeleteException",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Backtrace",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info_bases",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info",
    "type": "CPP"
  },
  {
    "name": "__register_frame",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info_table_bases",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info_table",
    "type": "CPP"
  },
  {
    "name": "__register_frame_table",
    "type": "CPP"
  },
  {
    "name": "__deregister_frame_info_bases",
    "type": "CPP"
  },
  {
    "name": "__deregister_frame_info",
    "type": "CPP"
  },
  {
    "name": "__deregister_frame",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Find_FDE",
    "type": "CPP"
  },
  {
    "name": "__gcc_personality_v0",
    "type": "CPP"
  },
  {
    "name": "__emutls_get_address",
    "type": "CPP"
  },
  {
    "name": "__emutls_register_common",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/aarch64-linux-gnu/libm-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "matherr",
    "type": "CPP"
  },
  {
    "name": "feclearexcept",
    "type": "CPP"
  },
  {
    "name": "fegetexceptflag",
    "type": "CPP"
  },
  {
    "name": "feraiseexcept",
    "type": "CPP"
  },
  {
    "name": "fesetexceptflag",
    "type": "CPP"
  },
  {
    "name": "fetestexcept",
    "type": "CPP"
  },
  {
    "name": "fegetround",
    "type": "CPP"
  },
  {
    "name": "fesetround",
    "type": "CPP"
  },
  {
    "name": "fegetenv",
    "type": "CPP"
  },
  {
    "name": "feholdexcept",
    "type": "CPP"
  },
  {
    "name": "fesetenv",
    "type": "CPP"
  },
  {
    "name": "feupdateenv",
    "type": "CPP"
  },
  {
    "name": "fedisableexcept",
    "type": "CPP"
  },
  {
    "name": "feenableexcept",
    "type": "CPP"
  },
  {
    "name": "fegetexcept",
    "type": "CPP"
  },
  {
    "name": "fesetexcept",
    "type": "CPP"
  },
  {
    "name": "fetestexceptflag",
    "type": "CPP"
  },
  {
    "name": "fegetmode",
    "type": "CPP"
  },
  {
    "name": "fesetmode",
    "type": "CPP"
  },
  {
    "name": "acosf128",
    "type": "CPP"
  },
  {
    "name": "acoshf128",
    "type": "CPP"
  },
  {
    "name": "asinf128",
    "type": "CPP"
  },
  {
    "name": "atan2f128",
    "type": "CPP"
  },
  {
    "name": "atanhf128",
    "type": "CPP"
  },
  {
    "name": "coshf128",
    "type": "CPP"
  },
  {
    "name": "exp2f128",
    "type": "CPP"
  },
  {
    "name": "exp10f128",
    "type": "CPP"
  },
  {
    "name": "fmodf128",
    "type": "CPP"
  },
  {
    "name": "hypotf128",
    "type": "CPP"
  },
  {
    "name": "j0f128",
    "type": "CPP"
  },
  {
    "name": "y0f128",
    "type": "CPP"
  },
  {
    "name": "j1f128",
    "type": "CPP"
  },
  {
    "name": "y1f128",
    "type": "CPP"
  },
  {
    "name": "jnf128",
    "type": "CPP"
  },
  {
    "name": "ynf128",
    "type": "CPP"
  },
  {
    "name": "log2f128",
    "type": "CPP"
  },
  {
    "name": "log10f128",
    "type": "CPP"
  },
  {
    "name": "logf128",
    "type": "CPP"
  },
  {
    "name": "powf128",
    "type": "CPP"
  },
  {
    "name": "dreml",
    "type": "CPP"
  },
  {
    "name": "scalbl",
    "type": "CPP"
  },
  {
    "name": "sinhf128",
    "type": "CPP"
  },
  {
    "name": "sqrtf128",
    "type": "CPP"
  },
  {
    "name": "tgammaf128",
    "type": "CPP"
  },
  {
    "name": "lgammaf128_r",
    "type": "CPP"
  },
  {
    "name": "lgammaf128",
    "type": "CPP"
  },
  {
    "name": "expf128",
    "type": "CPP"
  },
  {
    "name": "gammal",
    "type": "CPP"
  },
  {
    "name": "acos",
    "type": "CPP"
  },
  {
    "name": "acosh",
    "type": "CPP"
  },
  {
    "name": "asin",
    "type": "CPP"
  },
  {
    "name": "atan2",
    "type": "CPP"
  },
  {
    "name": "atanh",
    "type": "CPP"
  },
  {
    "name": "cosh",
    "type": "CPP"
  },
  {
    "name": "exp2",
    "type": "CPP"
  },
  {
    "name": "exp10",
    "type": "CPP"
  },
  {
    "name": "fmod",
    "type": "CPP"
  },
  {
    "name": "hypot",
    "type": "CPP"
  },
  {
    "name": "j0",
    "type": "CPP"
  },
  {
    "name": "y0",
    "type": "CPP"
  },
  {
    "name": "j1",
    "type": "CPP"
  },
  {
    "name": "y1",
    "type": "CPP"
  },
  {
    "name": "jn",
    "type": "CPP"
  },
  {
    "name": "yn",
    "type": "CPP"
  },
  {
    "name": "log2",
    "type": "CPP"
  },
  {
    "name": "log10",
    "type": "CPP"
  },
  {
    "name": "log",
    "type": "CPP"
  },
  {
    "name": "pow",
    "type": "CPP"
  },
  {
    "name": "drem",
    "type": "CPP"
  },
  {
    "name": "scalb",
    "type": "CPP"
  },
  {
    "name": "sinh",
    "type": "CPP"
  },
  {
    "name": "sqrt",
    "type": "CPP"
  },
  {
    "name": "tgamma",
    "type": "CPP"
  },
  {
    "name": "lgammaf32x_r",
    "type": "CPP"
  },
  {
    "name": "lgamma",
    "type": "CPP"
  },
  {
    "name": "exp",
    "type": "CPP"
  },
  {
    "name": "gamma",
    "type": "CPP"
  },
  {
    "name": "acosf",
    "type": "CPP"
  },
  {
    "name": "acoshf",
    "type": "CPP"
  },
  {
    "name": "asinf",
    "type": "CPP"
  },
  {
    "name": "atan2f",
    "type": "CPP"
  },
  {
    "name": "atanhf",
    "type": "CPP"
  },
  {
    "name": "coshf",
    "type": "CPP"
  },
  {
    "name": "exp2f",
    "type": "CPP"
  },
  {
    "name": "exp10f",
    "type": "CPP"
  },
  {
    "name": "fmodf",
    "type": "CPP"
  },
  {
    "name": "hypotf",
    "type": "CPP"
  },
  {
    "name": "j0f",
    "type": "CPP"
  },
  {
    "name": "y0f",
    "type": "CPP"
  },
  {
    "name": "j1f",
    "type": "CPP"
  },
  {
    "name": "y1f",
    "type": "CPP"
  },
  {
    "name": "jnf",
    "type": "CPP"
  },
  {
    "name": "ynf",
    "type": "CPP"
  },
  {
    "name": "log2f",
    "type": "CPP"
  },
  {
    "name": "log10f",
    "type": "CPP"
  },
  {
    "name": "logf",
    "type": "CPP"
  },
  {
    "name": "powf",
    "type": "CPP"
  },
  {
    "name": "dremf",
    "type": "CPP"
  },
  {
    "name": "scalbf",
    "type": "CPP"
  },
  {
    "name": "sinhf",
    "type": "CPP"
  },
  {
    "name": "sqrtf",
    "type": "CPP"
  },
  {
    "name": "tgammaf",
    "type": "CPP"
  },
  {
    "name": "lgammaf32_r",
    "type": "CPP"
  },
  {
    "name": "lgammaf",
    "type": "CPP"
  },
  {
    "name": "expf",
    "type": "CPP"
  },
  {
    "name": "gammaf",
    "type": "CPP"
  },
  {
    "name": "__acosl_finite",
    "type": "CPP"
  },
  {
    "name": "__acoshl_finite",
    "type": "CPP"
  },
  {
    "name": "__asinl_finite",
    "type": "CPP"
  },
  {
    "name": "__atan2l_finite",
    "type": "CPP"
  },
  {
    "name": "__atanhl_finite",
    "type": "CPP"
  },
  {
    "name": "__coshl_finite",
    "type": "CPP"
  },
  {
    "name": "__expl_finite",
    "type": "CPP"
  },
  {
    "name": "__fmodl_finite",
    "type": "CPP"
  },
  {
    "name": "__hypotl_finite",
    "type": "CPP"
  },
  {
    "name": "__j0l_finite",
    "type": "CPP"
  },
  {
    "name": "__y0l_finite",
    "type": "CPP"
  },
  {
    "name": "__j1l_finite",
    "type": "CPP"
  },
  {
    "name": "__y1l_finite",
    "type": "CPP"
  },
  {
    "name": "__jnl_finite",
    "type": "CPP"
  },
  {
    "name": "__ynl_finite",
    "type": "CPP"
  },
  {
    "name": "__lgammal_r_finite",
    "type": "CPP"
  },
  {
    "name": "__logl_finite",
    "type": "CPP"
  },
  {
    "name": "__log10l_finite",
    "type": "CPP"
  },
  {
    "name": "__powl_finite",
    "type": "CPP"
  },
  {
    "name": "__remainderl_finite",
    "type": "CPP"
  },
  {
    "name": "__scalbl_finite",
    "type": "CPP"
  },
  {
    "name": "__sinhl_finite",
    "type": "CPP"
  },
  {
    "name": "__sqrtl_finite",
    "type": "CPP"
  },
  {
    "name": "__gammal_r_finite",
    "type": "CPP"
  },
  {
    "name": "asinhf128",
    "type": "CPP"
  },
  {
    "name": "atanf128",
    "type": "CPP"
  },
  {
    "name": "cbrtf128",
    "type": "CPP"
  },
  {
    "name": "ceilf128",
    "type": "CPP"
  },
  {
    "name": "cosf128",
    "type": "CPP"
  },
  {
    "name": "erfcf128",
    "type": "CPP"
  },
  {
    "name": "erff128",
    "type": "CPP"
  },
  {
    "name": "expm1f128",
    "type": "CPP"
  },
  {
    "name": "fabsf128",
    "type": "CPP"
  },
  {
    "name": "floorf128",
    "type": "CPP"
  },
  {
    "name": "logbf128",
    "type": "CPP"
  },
  {
    "name": "nextafterf128",
    "type": "CPP"
  },
  {
    "name": "rintf128",
    "type": "CPP"
  },
  {
    "name": "sinf128",
    "type": "CPP"
  },
  {
    "name": "tanf128",
    "type": "CPP"
  },
  {
    "name": "tanhf128",
    "type": "CPP"
  },
  {
    "name": "__fpclassifyl",
    "type": "CPP"
  },
  {
    "name": "truncf128",
    "type": "CPP"
  },
  {
    "name": "remquof128",
    "type": "CPP"
  },
  {
    "name": "__log2l_finite",
    "type": "CPP"
  },
  {
    "name": "roundf128",
    "type": "CPP"
  },
  {
    "name": "nearbyintf128",
    "type": "CPP"
  },
  {
    "name": "sincosf128",
    "type": "CPP"
  },
  {
    "name": "fmaf128",
    "type": "CPP"
  },
  {
    "name": "lrintf128",
    "type": "CPP"
  },
  {
    "name": "llrintf128",
    "type": "CPP"
  },
  {
    "name": "lroundf128",
    "type": "CPP"
  },
  {
    "name": "llroundf128",
    "type": "CPP"
  },
  {
    "name": "__exp10l_finite",
    "type": "CPP"
  },
  {
    "name": "__issignalingl",
    "type": "CPP"
  },
  {
    "name": "__finitel",
    "type": "CPP"
  },
  {
    "name": "copysignf128",
    "type": "CPP"
  },
  {
    "name": "modff128",
    "type": "CPP"
  },
  {
    "name": "frexpf128",
    "type": "CPP"
  },
  {
    "name": "__signbitl",
    "type": "CPP"
  },
  {
    "name": "ldexpf128",
    "type": "CPP"
  },
  {
    "name": "nextupf128",
    "type": "CPP"
  },
  {
    "name": "totalorderf128",
    "type": "CPP"
  },
  {
    "name": "totalorderf128",
    "type": "CPP"
  },
  {
    "name": "totalordermagf128",
    "type": "CPP"
  },
  {
    "name": "totalordermagf128",
    "type": "CPP"
  },
  {
    "name": "getpayloadf128",
    "type": "CPP"
  },
  {
    "name": "setpayloadf128",
    "type": "CPP"
  },
  {
    "name": "setpayloadsigf128",
    "type": "CPP"
  },
  {
    "name": "roundevenf128",
    "type": "CPP"
  },
  {
    "name": "fromfpf128",
    "type": "CPP"
  },
  {
    "name": "ufromfpf128",
    "type": "CPP"
  },
  {
    "name": "fromfpxf128",
    "type": "CPP"
  },
  {
    "name": "ufromfpxf128",
    "type": "CPP"
  },
  {
    "name": "cargf128",
    "type": "CPP"
  },
  {
    "name": "conjf128",
    "type": "CPP"
  },
  {
    "name": "cimagf128",
    "type": "CPP"
  },
  {
    "name": "crealf128",
    "type": "CPP"
  },
  {
    "name": "cabsf128",
    "type": "CPP"
  },
  {
    "name": "cacosf128",
    "type": "CPP"
  },
  {
    "name": "cacoshf128",
    "type": "CPP"
  },
  {
    "name": "ccosf128",
    "type": "CPP"
  },
  {
    "name": "ccoshf128",
    "type": "CPP"
  },
  {
    "name": "casinf128",
    "type": "CPP"
  },
  {
    "name": "csinf128",
    "type": "CPP"
  },
  {
    "name": "casinhf128",
    "type": "CPP"
  },
  {
    "name": "csinhf128",
    "type": "CPP"
  },
  {
    "name": "catanhf128",
    "type": "CPP"
  },
  {
    "name": "catanf128",
    "type": "CPP"
  },
  {
    "name": "ctanf128",
    "type": "CPP"
  },
  {
    "name": "ctanhf128",
    "type": "CPP"
  },
  {
    "name": "cexpf128",
    "type": "CPP"
  },
  {
    "name": "clogf128",
    "type": "CPP"
  },
  {
    "name": "cprojf128",
    "type": "CPP"
  },
  {
    "name": "csqrtf128",
    "type": "CPP"
  },
  {
    "name": "cpowf128",
    "type": "CPP"
  },
  {
    "name": "clog10f128",
    "type": "CPP"
  },
  {
    "name": "fdimf128",
    "type": "CPP"
  },
  {
    "name": "nextdownf128",
    "type": "CPP"
  },
  {
    "name": "fmaxf128",
    "type": "CPP"
  },
  {
    "name": "fminf128",
    "type": "CPP"
  },
  {
    "name": "nanf128",
    "type": "CPP"
  },
  {
    "name": "__iseqsigl",
    "type": "CPP"
  },
  {
    "name": "canonicalizef128",
    "type": "CPP"
  },
  {
    "name": "significandl",
    "type": "CPP"
  },
  {
    "name": "ilogbf128",
    "type": "CPP"
  },
  {
    "name": "llogbf128",
    "type": "CPP"
  },
  {
    "name": "log1pf128",
    "type": "CPP"
  },
  {
    "name": "scalblnf128",
    "type": "CPP"
  },
  {
    "name": "fmaxmagf128",
    "type": "CPP"
  },
  {
    "name": "fminmagf128",
    "type": "CPP"
  },
  {
    "name": "__exp2l_finite",
    "type": "CPP"
  },
  {
    "name": "__acosh_finite",
    "type": "CPP"
  },
  {
    "name": "__asin_finite",
    "type": "CPP"
  },
  {
    "name": "__acos_finite",
    "type": "CPP"
  },
  {
    "name": "__atan2_finite",
    "type": "CPP"
  },
  {
    "name": "__atanh_finite",
    "type": "CPP"
  },
  {
    "name": "__cosh_finite",
    "type": "CPP"
  },
  {
    "name": "exp",
    "type": "CPP"
  },
  {
    "name": "__fmod_finite",
    "type": "CPP"
  },
  {
    "name": "__hypot_finite",
    "type": "CPP"
  },
  {
    "name": "__j0_finite",
    "type": "CPP"
  },
  {
    "name": "__y0_finite",
    "type": "CPP"
  },
  {
    "name": "__j1_finite",
    "type": "CPP"
  },
  {
    "name": "__y1_finite",
    "type": "CPP"
  },
  {
    "name": "__jn_finite",
    "type": "CPP"
  },
  {
    "name": "__yn_finite",
    "type": "CPP"
  },
  {
    "name": "__lgamma_r_finite",
    "type": "CPP"
  },
  {
    "name": "log",
    "type": "CPP"
  },
  {
    "name": "__log10_finite",
    "type": "CPP"
  },
  {
    "name": "pow",
    "type": "CPP"
  },
  {
    "name": "__remainder_finite",
    "type": "CPP"
  },
  {
    "name": "__scalb_finite",
    "type": "CPP"
  },
  {
    "name": "__sinh_finite",
    "type": "CPP"
  },
  {
    "name": "__sqrt_finite",
    "type": "CPP"
  },
  {
    "name": "__gamma_r_finite",
    "type": "CPP"
  },
  {
    "name": "asinh",
    "type": "CPP"
  },
  {
    "name": "atan",
    "type": "CPP"
  },
  {
    "name": "cbrt",
    "type": "CPP"
  },
  {
    "name": "ceil",
    "type": "CPP"
  },
  {
    "name": "erf",
    "type": "CPP"
  },
  {
    "name": "erfc",
    "type": "CPP"
  },
  {
    "name": "expm1",
    "type": "CPP"
  },
  {
    "name": "fabs",
    "type": "CPP"
  },
  {
    "name": "floor",
    "type": "CPP"
  },
  {
    "name": "logb",
    "type": "CPP"
  },
  {
    "name": "nextafter",
    "type": "CPP"
  },
  {
    "name": "nexttoward",
    "type": "CPP"
  },
  {
    "name": "rint",
    "type": "CPP"
  },
  {
    "name": "sin",
    "type": "CPP"
  },
  {
    "name": "cos",
    "type": "CPP"
  },
  {
    "name": "tan",
    "type": "CPP"
  },
  {
    "name": "tanh",
    "type": "CPP"
  },
  {
    "name": "__fpclassify",
    "type": "CPP"
  },
  {
    "name": "trunc",
    "type": "CPP"
  },
  {
    "name": "remquo",
    "type": "CPP"
  },
  {
    "name": "log2",
    "type": "CPP"
  },
  {
    "name": "round",
    "type": "CPP"
  },
  {
    "name": "nearbyint",
    "type": "CPP"
  },
  {
    "name": "sincos",
    "type": "CPP"
  },
  {
    "name": "fma",
    "type": "CPP"
  },
  {
    "name": "lrint",
    "type": "CPP"
  },
  {
    "name": "llrint",
    "type": "CPP"
  },
  {
    "name": "lround",
    "type": "CPP"
  },
  {
    "name": "llround",
    "type": "CPP"
  },
  {
    "name": "__exp10_finite",
    "type": "CPP"
  },
  {
    "name": "__issignaling",
    "type": "CPP"
  },
  {
    "name": "__finite",
    "type": "CPP"
  },
  {
    "name": "copysign",
    "type": "CPP"
  },
  {
    "name": "modf",
    "type": "CPP"
  },
  {
    "name": "frexp",
    "type": "CPP"
  },
  {
    "name": "__signbit",
    "type": "CPP"
  },
  {
    "name": "ldexp",
    "type": "CPP"
  },
  {
    "name": "nextup",
    "type": "CPP"
  },
  {
    "name": "totalorder",
    "type": "CPP"
  },
  {
    "name": "totalorder",
    "type": "CPP"
  },
  {
    "name": "totalordermag",
    "type": "CPP"
  },
  {
    "name": "totalordermag",
    "type": "CPP"
  },
  {
    "name": "getpayload",
    "type": "CPP"
  },
  {
    "name": "setpayload",
    "type": "CPP"
  },
  {
    "name": "setpayloadsig",
    "type": "CPP"
  },
  {
    "name": "roundeven",
    "type": "CPP"
  },
  {
    "name": "fromfp",
    "type": "CPP"
  },
  {
    "name": "ufromfp",
    "type": "CPP"
  },
  {
    "name": "fromfpx",
    "type": "CPP"
  },
  {
    "name": "ufromfpx",
    "type": "CPP"
  },
  {
    "name": "carg",
    "type": "CPP"
  },
  {
    "name": "conj",
    "type": "CPP"
  },
  {
    "name": "cimag",
    "type": "CPP"
  },
  {
    "name": "creal",
    "type": "CPP"
  },
  {
    "name": "cabs",
    "type": "CPP"
  },
  {
    "name": "cacos",
    "type": "CPP"
  },
  {
    "name": "cacosh",
    "type": "CPP"
  },
  {
    "name": "ccos",
    "type": "CPP"
  },
  {
    "name": "ccosh",
    "type": "CPP"
  },
  {
    "name": "casin",
    "type": "CPP"
  },
  {
    "name": "csin",
    "type": "CPP"
  },
  {
    "name": "casinh",
    "type": "CPP"
  },
  {
    "name": "csinh",
    "type": "CPP"
  },
  {
    "name": "catanh",
    "type": "CPP"
  },
  {
    "name": "catan",
    "type": "CPP"
  },
  {
    "name": "ctan",
    "type": "CPP"
  },
  {
    "name": "ctanh",
    "type": "CPP"
  },
  {
    "name": "cexp",
    "type": "CPP"
  },
  {
    "name": "clog",
    "type": "CPP"
  },
  {
    "name": "cproj",
    "type": "CPP"
  },
  {
    "name": "csqrt",
    "type": "CPP"
  },
  {
    "name": "cpow",
    "type": "CPP"
  },
  {
    "name": "__clog10",
    "type": "CPP"
  },
  {
    "name": "fdim",
    "type": "CPP"
  },
  {
    "name": "nextdown",
    "type": "CPP"
  },
  {
    "name": "fmax",
    "type": "CPP"
  },
  {
    "name": "fmin",
    "type": "CPP"
  },
  {
    "name": "nan",
    "type": "CPP"
  },
  {
    "name": "__iseqsig",
    "type": "CPP"
  },
  {
    "name": "canonicalize",
    "type": "CPP"
  },
  {
    "name": "significand",
    "type": "CPP"
  },
  {
    "name": "ilogb",
    "type": "CPP"
  },
  {
    "name": "llogb",
    "type": "CPP"
  },
  {
    "name": "log1p",
    "type": "CPP"
  },
  {
    "name": "scalbln",
    "type": "CPP"
  },
  {
    "name": "fmaxmag",
    "type": "CPP"
  },
  {
    "name": "fminmag",
    "type": "CPP"
  },
  {
    "name": "exp2",
    "type": "CPP"
  },
  {
    "name": "__acosf_finite",
    "type": "CPP"
  },
  {
    "name": "__acoshf_finite",
    "type": "CPP"
  },
  {
    "name": "__asinf_finite",
    "type": "CPP"
  },
  {
    "name": "__atan2f_finite",
    "type": "CPP"
  },
  {
    "name": "__atanhf_finite",
    "type": "CPP"
  },
  {
    "name": "__coshf_finite",
    "type": "CPP"
  },
  {
    "name": "expf",
    "type": "CPP"
  },
  {
    "name": "__fmodf_finite",
    "type": "CPP"
  },
  {
    "name": "__hypotf_finite",
    "type": "CPP"
  },
  {
    "name": "__j0f_finite",
    "type": "CPP"
  },
  {
    "name": "__y0f_finite",
    "type": "CPP"
  },
  {
    "name": "__j1f_finite",
    "type": "CPP"
  },
  {
    "name": "__y1f_finite",
    "type": "CPP"
  },
  {
    "name": "__jnf_finite",
    "type": "CPP"
  },
  {
    "name": "__ynf_finite",
    "type": "CPP"
  },
  {
    "name": "__lgammaf_r_finite",
    "type": "CPP"
  },
  {
    "name": "logf",
    "type": "CPP"
  },
  {
    "name": "__log10f_finite",
    "type": "CPP"
  },
  {
    "name": "powf",
    "type": "CPP"
  },
  {
    "name": "__remainderf_finite",
    "type": "CPP"
  },
  {
    "name": "__scalbf_finite",
    "type": "CPP"
  },
  {
    "name": "__sinhf_finite",
    "type": "CPP"
  },
  {
    "name": "__sqrtf_finite",
    "type": "CPP"
  },
  {
    "name": "__gammaf_r_finite",
    "type": "CPP"
  },
  {
    "name": "asinhf",
    "type": "CPP"
  },
  {
    "name": "atanf",
    "type": "CPP"
  },
  {
    "name": "cbrtf",
    "type": "CPP"
  },
  {
    "name": "ceilf",
    "type": "CPP"
  },
  {
    "name": "cosf",
    "type": "CPP"
  },
  {
    "name": "erff",
    "type": "CPP"
  },
  {
    "name": "erfcf",
    "type": "CPP"
  },
  {
    "name": "expm1f",
    "type": "CPP"
  },
  {
    "name": "fabsf",
    "type": "CPP"
  },
  {
    "name": "floorf",
    "type": "CPP"
  },
  {
    "name": "logbf",
    "type": "CPP"
  },
  {
    "name": "nextafterf",
    "type": "CPP"
  },
  {
    "name": "nexttowardf",
    "type": "CPP"
  },
  {
    "name": "rintf",
    "type": "CPP"
  },
  {
    "name": "sinf",
    "type": "CPP"
  },
  {
    "name": "tanf",
    "type": "CPP"
  },
  {
    "name": "tanhf",
    "type": "CPP"
  },
  {
    "name": "__fpclassifyf",
    "type": "CPP"
  },
  {
    "name": "truncf",
    "type": "CPP"
  },
  {
    "name": "remquof",
    "type": "CPP"
  },
  {
    "name": "log2f",
    "type": "CPP"
  },
  {
    "name": "roundf",
    "type": "CPP"
  },
  {
    "name": "nearbyintf",
    "type": "CPP"
  },
  {
    "name": "sincosf",
    "type": "CPP"
  },
  {
    "name": "fmaf",
    "type": "CPP"
  },
  {
    "name": "lrintf",
    "type": "CPP"
  },
  {
    "name": "llrintf",
    "type": "CPP"
  },
  {
    "name": "lroundf",
    "type": "CPP"
  },
  {
    "name": "llroundf",
    "type": "CPP"
  },
  {
    "name": "__exp10f_finite",
    "type": "CPP"
  },
  {
    "name": "__issignalingf",
    "type": "CPP"
  },
  {
    "name": "__finitef",
    "type": "CPP"
  },
  {
    "name": "copysignf",
    "type": "CPP"
  },
  {
    "name": "modff",
    "type": "CPP"
  },
  {
    "name": "frexpf",
    "type": "CPP"
  },
  {
    "name": "__signbitf",
    "type": "CPP"
  },
  {
    "name": "ldexpf",
    "type": "CPP"
  },
  {
    "name": "nextupf",
    "type": "CPP"
  },
  {
    "name": "totalorderf",
    "type": "CPP"
  },
  {
    "name": "totalorderf",
    "type": "CPP"
  },
  {
    "name": "totalordermagf",
    "type": "CPP"
  },
  {
    "name": "totalordermagf",
    "type": "CPP"
  },
  {
    "name": "getpayloadf",
    "type": "CPP"
  },
  {
    "name": "setpayloadf",
    "type": "CPP"
  },
  {
    "name": "setpayloadsigf",
    "type": "CPP"
  },
  {
    "name": "roundevenf",
    "type": "CPP"
  },
  {
    "name": "fromfpf",
    "type": "CPP"
  },
  {
    "name": "ufromfpf",
    "type": "CPP"
  },
  {
    "name": "fromfpxf",
    "type": "CPP"
  },
  {
    "name": "ufromfpxf",
    "type": "CPP"
  },
  {
    "name": "cargf",
    "type": "CPP"
  },
  {
    "name": "conjf",
    "type": "CPP"
  },
  {
    "name": "cimagf",
    "type": "CPP"
  },
  {
    "name": "crealf",
    "type": "CPP"
  },
  {
    "name": "cabsf",
    "type": "CPP"
  },
  {
    "name": "cacosf",
    "type": "CPP"
  },
  {
    "name": "cacoshf",
    "type": "CPP"
  },
  {
    "name": "ccosf",
    "type": "CPP"
  },
  {
    "name": "ccoshf",
    "type": "CPP"
  },
  {
    "name": "casinf",
    "type": "CPP"
  },
  {
    "name": "csinf",
    "type": "CPP"
  },
  {
    "name": "casinhf",
    "type": "CPP"
  },
  {
    "name": "csinhf",
    "type": "CPP"
  },
  {
    "name": "catanhf",
    "type": "CPP"
  },
  {
    "name": "catanf",
    "type": "CPP"
  },
  {
    "name": "ctanf",
    "type": "CPP"
  },
  {
    "name": "ctanhf",
    "type": "CPP"
  },
  {
    "name": "cexpf",
    "type": "CPP"
  },
  {
    "name": "clogf",
    "type": "CPP"
  },
  {
    "name": "cprojf",
    "type": "CPP"
  },
  {
    "name": "csqrtf",
    "type": "CPP"
  },
  {
    "name": "cpowf",
    "type": "CPP"
  },
  {
    "name": "__clog10f",
    "type": "CPP"
  },
  {
    "name": "fdimf",
    "type": "CPP"
  },
  {
    "name": "nextdownf",
    "type": "CPP"
  },
  {
    "name": "fmaxf",
    "type": "CPP"
  },
  {
    "name": "fminf",
    "type": "CPP"
  },
  {
    "name": "nanf",
    "type": "CPP"
  },
  {
    "name": "__iseqsigf",
    "type": "CPP"
  },
  {
    "name": "canonicalizef",
    "type": "CPP"
  },
  {
    "name": "significandf",
    "type": "CPP"
  },
  {
    "name": "ilogbf",
    "type": "CPP"
  },
  {
    "name": "llogbf",
    "type": "CPP"
  },
  {
    "name": "log1pf",
    "type": "CPP"
  },
  {
    "name": "scalblnf",
    "type": "CPP"
  },
  {
    "name": "fmaxmagf",
    "type": "CPP"
  },
  {
    "name": "fminmagf",
    "type": "CPP"
  },
  {
    "name": "exp2f",
    "type": "CPP"
  },
  {
    "name": "f32addf32x",
    "type": "CPP"
  },
  {
    "name": "f32xaddf64",
    "type": "CPP"
  },
  {
    "name": "f32addf128",
    "type": "CPP"
  },
  {
    "name": "daddl",
    "type": "CPP"
  },
  {
    "name": "f64xaddf128",
    "type": "CPP"
  },
  {
    "name": "f32divf32x",
    "type": "CPP"
  },
  {
    "name": "f32xdivf64",
    "type": "CPP"
  },
  {
    "name": "f32divf128",
    "type": "CPP"
  },
  {
    "name": "ddivl",
    "type": "CPP"
  },
  {
    "name": "f64xdivf128",
    "type": "CPP"
  },
  {
    "name": "f32mulf32x",
    "type": "CPP"
  },
  {
    "name": "f32xmulf64",
    "type": "CPP"
  },
  {
    "name": "f32mulf128",
    "type": "CPP"
  },
  {
    "name": "dmull",
    "type": "CPP"
  },
  {
    "name": "f64xmulf128",
    "type": "CPP"
  },
  {
    "name": "f32subf32x",
    "type": "CPP"
  },
  {
    "name": "f32xsubf64",
    "type": "CPP"
  },
  {
    "name": "f32subf128",
    "type": "CPP"
  },
  {
    "name": "dsubl",
    "type": "CPP"
  },
  {
    "name": "f64xsubf128",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.29",
    "type": "SHARED_LIB"
  },
  {
    "name": "__cxa_throw_bad_array_length",
    "type": "CPP"
  },
  {
    "name": "__cxa_bad_cast",
    "type": "CPP"
  },
  {
    "name": "__cxa_bad_typeid",
    "type": "CPP"
  },
  {
    "name": "__cxa_throw_bad_array_new_length",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_exception()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_cast()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_domain_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_invalid_argument(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_range_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_underflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_future_error(int)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_regex_error(std::regex_constants::error_type)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_system_error(int)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_ios_failure(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_ios_failure(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<char>::eq(char const&, char const&)",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<wchar_t>::eq(wchar_t const&, wchar_t const&)",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> >::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_copy(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_move(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_assign(char*, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_disjunct(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_set_length_and_sharable(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::ignore()",
    "type": "CPP"
  },
  {
    "name": "std::istream::ignore(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_copy(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_move(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_assign(wchar_t*, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_disjunct(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_set_length_and_sharable(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::ignore()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::ignore(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::swap(__gnu_norm::_List_node_base&, __gnu_norm::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::transfer(__gnu_norm::_List_node_base*, __gnu_norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::hook(__gnu_norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::swap(std::__norm::_List_node_base&, std::__norm::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::transfer(std::__norm::_List_node_base*, std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::hook(std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_transfer(std::__norm::_List_node_base*, std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_hook(std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::lock_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::string>::operator()(std::string) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::string const&>::operator()(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&>::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::error_code>::operator()(std::error_code) const",
    "type": "CPP"
  },
  {
    "name": "std::error_category::error_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::system_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::default_error_condition(int) const",
    "type": "CPP"
  },
  {
    "name": "std::error_category::equivalent(int, std::error_condition const&) const",
    "type": "CPP"
  },
  {
    "name": "std::generic_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::equivalent(std::error_code const&, int) const",
    "type": "CPP"
  },
  {
    "name": "std::__atomic0::atomic_flag::test_and_set(std::memory_order)",
    "type": "CPP"
  },
  {
    "name": "std::__atomic0::atomic_flag::clear(std::memory_order)",
    "type": "CPP"
  },
  {
    "name": "atomic_flag_test_and_set_explicit",
    "type": "CPP"
  },
  {
    "name": "atomic_flag_clear_explicit",
    "type": "CPP"
  },
  {
    "name": "__atomic_flag_wait_explicit",
    "type": "CPP"
  },
  {
    "name": "__atomic_flag_for_address",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_State_base::~_State_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_State_base::~_State_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Async_state_common::~_Async_state_common()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Async_state_common::~_Async_state_common()",
    "type": "CPP"
  },
  {
    "name": "std::chrono::system_clock::now()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable_any::condition_variable_any()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable_any::~condition_variable_any()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__array_type_info::~__array_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__array_type_info::~__array_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxa_thread_atexit",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__exchange_and_add(int volatile*, int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__atomic_add(int volatile*, int)",
    "type": "CPP"
  },
  {
    "name": "std::bad_alloc::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_alloc::~bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "std::bad_alloc::~bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_length::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_length::~bad_array_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_length::~bad_array_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_new_length::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_new_length::~bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_new_length::~bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_cast::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_cast::~bad_cast()",
    "type": "CPP"
  },
  {
    "name": "std::bad_cast::~bad_cast()",
    "type": "CPP"
  },
  {
    "name": "std::bad_typeid::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_typeid::~bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "std::bad_typeid::~bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::~__class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::~__class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "__dynamic_cast",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__freeres()",
    "type": "CPP"
  },
  {
    "name": "__cxa_allocate_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_free_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_allocate_dependent_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_free_dependent_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_get_exception_ptr",
    "type": "CPP"
  },
  {
    "name": "__cxa_begin_catch",
    "type": "CPP"
  },
  {
    "name": "__cxa_end_catch",
    "type": "CPP"
  },
  {
    "name": "std::uncaught_exception()",
    "type": "CPP"
  },
  {
    "name": "std::uncaught_exceptions()",
    "type": "CPP"
  },
  {
    "name": "std::exception::~exception()",
    "type": "CPP"
  },
  {
    "name": "std::bad_exception::~bad_exception()",
    "type": "CPP"
  },
  {
    "name": "std::exception::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_exception::what() const",
    "type": "CPP"
  },
  {
    "name": "std::exception::~exception()",
    "type": "CPP"
  },
  {
    "name": "std::bad_exception::~bad_exception()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::exception::~exception() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::exception::what() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::bad_exception::~bad_exception() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::bad_exception::what() const",
    "type": "CPP"
  },
  {
    "name": "__cxa_get_globals_fast",
    "type": "CPP"
  },
  {
    "name": "__cxa_get_globals",
    "type": "CPP"
  },
  {
    "name": "__gxx_personality_v0",
    "type": "CPP"
  },
  {
    "name": "__cxa_call_unexpected",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::_M_addref()",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr(void*)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::_M_release()",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::~exception_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::operator!() const",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::__cxa_exception_type() const",
    "type": "CPP"
  },
  {
    "name": "std::current_exception()",
    "type": "CPP"
  },
  {
    "name": "std::rethrow_exception(std::__exception_ptr::exception_ptr)",
    "type": "CPP"
  },
  {
    "name": "std::set_terminate(void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::get_terminate()",
    "type": "CPP"
  },
  {
    "name": "std::terminate()",
    "type": "CPP"
  },
  {
    "name": "std::set_unexpected(void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::get_unexpected()",
    "type": "CPP"
  },
  {
    "name": "std::unexpected()",
    "type": "CPP"
  },
  {
    "name": "__cxa_tm_cleanup",
    "type": "CPP"
  },
  {
    "name": "__cxa_init_primary_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_throw",
    "type": "CPP"
  },
  {
    "name": "__cxa_rethrow",
    "type": "CPP"
  },
  {
    "name": "__cxa_current_exception_type",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__enum_type_info::~__enum_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__enum_type_info::~__enum_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__function_type_info::__is_function_p() const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__function_type_info::~__function_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__function_type_info::~__function_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxa_guard_acquire",
    "type": "CPP"
  },
  {
    "name": "__cxa_guard_abort",
    "type": "CPP"
  },
  {
    "name": "__cxa_guard_release",
    "type": "CPP"
  },
  {
    "name": "std::_Hash_bytes(void const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Fnv_hash_bytes(void const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::nested_exception::~nested_exception()",
    "type": "CPP"
  },
  {
    "name": "std::nested_exception::~nested_exception()",
    "type": "CPP"
  },
  {
    "name": "std::set_new_handler(void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::get_new_handler()",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::__is_pointer_p() const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxa_pure_virtual",
    "type": "CPP"
  },
  {
    "name": "__cxa_deleted_virtual",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "type": "CPP"
  },
  {
    "name": "std::type_info::~type_info()",
    "type": "CPP"
  },
  {
    "name": "std::type_info::__is_pointer_p() const",
    "type": "CPP"
  },
  {
    "name": "std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const",
    "type": "CPP"
  },
  {
    "name": "std::type_info::~type_info()",
    "type": "CPP"
  },
  {
    "name": "std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_cleanup",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_ctor",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_new2",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_new",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_new3",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_cctor",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_dtor",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_delete2",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_delete",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_delete3",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__verbose_terminate_handler()",
    "type": "CPP"
  },
  {
    "name": "__cxa_demangle",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::free_list::_M_clear()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::free_list::_M_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool_alloc_base::_M_get_free_list(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool_alloc_base::_M_get_mutex()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool_alloc_base::_M_refill(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_reclaim_block(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_reserve_block(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_initialize()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_reserve_block(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_initialize()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_get_thread_id()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_reclaim_block(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_destroy_thread_key(void*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_initialize(void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::codecvt(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::codecvt(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::codecvt(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><float, char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::complex<float>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><double, char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::complex<double>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><long double, char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::complex<long double>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><float, wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::complex<float>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><double, wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::complex<double>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><long double, wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::complex<long double>&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <float, char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::complex<float> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <double, char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::complex<double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <long double, char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::complex<long double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <float, wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::complex<float> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <double, wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::complex<double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <long double, wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::complex<long double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<long double>::operator()(long double) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::string>::operator()(std::string) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::string const&>::operator()(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&>::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::what() const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::failure(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::Init::Init()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::Init::~Init()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::sync_with_stdio(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_init()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::operator void*() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::operator void*() const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::swap(std::_List_node_base&, std::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::transfer(std::_List_node_base*, std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::hook(std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_transfer(std::_List_node_base*, std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_hook(std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::swap(std::__cxx1998::_List_node_base&, std::__cxx1998::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::transfer(std::__cxx1998::_List_node_base*, std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::hook(std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_transfer(std::__cxx1998::_List_node_base*, std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_hook(std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::~facet()",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::~facet()",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale::_Impl*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "std::locale::operator==(std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::locale::_S_normalize_category(int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_get_c_locale()",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_get_c_name()",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::~_Impl()",
    "type": "CPP"
  },
  {
    "name": "std::locale::operator=(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::~locale()",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_Impl(std::locale::_Impl const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::id::_M_id() const",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_replace_facet(std::locale::_Impl const*, std::locale::id const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_replace_category(std::locale::_Impl const*, std::locale::id const* const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_install_cache(std::locale::facet const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_Impl(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale()",
    "type": "CPP"
  },
  {
    "name": "std::locale::classic()",
    "type": "CPP"
  },
  {
    "name": "std::locale::global(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__num_base::_S_format_float(std::ios_base const&, char*, char)",
    "type": "CPP"
  },
  {
    "name": "std::__verify_grouping(char const*, unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_Impl(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_replace_categories(std::locale::_Impl const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_M_coalesce(std::locale const&, std::locale const&, int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale const&, std::locale const&, int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale const&, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::domain_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::invalid_argument(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::length_error::length_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::out_of_range(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::range_error::range_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::overflow_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::underflow_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::freeze(bool)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::str()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::pcount() const",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::_M_alloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(void* (*)(unsigned long), void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::_M_free(char*)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::~strstreambuf()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::~strstreambuf()",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::_M_setup(char*, char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(signed char*, long, signed char*)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(signed char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::str()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::freeze(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::str()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::pcount() const",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::strstream::freeze(bool)",
    "type": "CPP"
  },
  {
    "name": "std::strstream::pcount() const",
    "type": "CPP"
  },
  {
    "name": "std::strstream::str()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_increment(std::_Rb_tree_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_increment(std::_Rb_tree_node_base const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_decrement(std::_Rb_tree_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)",
    "type": "CPP"
  },
  {
    "name": "std::istream::getline(char*, long, char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::ignore(long, int)",
    "type": "CPP"
  },
  {
    "name": "std::__istream_extract(std::istream&, char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::getline(wchar_t*, long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::ignore(long, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs_eof<char, std::char_traits<char> >(std::basic_streambuf<char, std::char_traits<char> >*, std::basic_streambuf<char, std::char_traits<char> >*, bool&)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs_eof<wchar_t, std::char_traits<wchar_t> >(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::valarray(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::valarray(std::valarray<unsigned long> const&)",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::~valarray()",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::size() const",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::gslice::_Indexer::_Indexer(unsigned long, std::valarray<unsigned long> const&, std::valarray<unsigned long> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::_M_compare(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::_M_transform(char*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::_M_compare(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::_M_transform(wchar_t*, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::do_open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::do_close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::do_get(int, int, int, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::do_open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "wchar_t* std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct<wchar_t*>(wchar_t*, wchar_t*, std::allocator<wchar_t> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::do_get(int, int, int, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::money_base::_S_construct_pattern(char, char, char)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::_M_compare(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::_M_transform(char*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::_M_compare(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::_M_transform(wchar_t*, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::do_open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::do_close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::do_get(int, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::do_open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::do_get(int, int, int, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_put(char*, unsigned long, char const*, tm const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_initialize_timepunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_put(wchar_t*, unsigned long, wchar_t const*, tm const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_initialize_timepunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::__basic_file(pthread_mutex_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::sys_open(_IO_FILE*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::sys_open(int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::open(char const*, std::_Ios_Openmode, int)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::fd()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::file()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::close()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::~__basic_file()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::xsputn_2(char const*, long, char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::seekoff(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::sync()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__convert_to_v<double>(char const*, double&, std::_Ios_Iostate&, __locale_struct* const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__convert_to_v<long double>(char const*, long double&, std::_Ios_Iostate&, __locale_struct* const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_create_c_locale(__locale_struct*&, char const*, __locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_destroy_c_locale(__locale_struct*&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_clone_c_locale(__locale_struct*&)",
    "type": "CPP"
  },
  {
    "name": "std::allocator<char>::allocator()",
    "type": "CPP"
  },
  {
    "name": "std::allocator<char>::allocator(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::allocator<char>::~allocator()",
    "type": "CPP"
  },
  {
    "name": "std::allocator<wchar_t>::allocator()",
    "type": "CPP"
  },
  {
    "name": "std::allocator<wchar_t>::allocator(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::allocator<wchar_t>::~allocator()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert<__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__verify_grouping(char const*, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_parallel::_Settings::get()",
    "type": "CPP"
  },
  {
    "name": "__gnu_parallel::_Settings::set(__gnu_parallel::_Settings&)",
    "type": "CPP"
  },
  {
    "name": "std::chrono::_V2::system_clock::now()",
    "type": "CPP"
  },
  {
    "name": "std::chrono::_V2::steady_clock::now()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_unshift(__mbstate_t&, char8_t*, char8_t*, char8_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_length(__mbstate_t&, char8_t const*, char8_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_in(__mbstate_t&, char8_t const*, char8_t const*, char8_t const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::do_length(__mbstate_t&, char8_t const*, char8_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char8_t*, char8_t*, char8_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char8_t*, char8_t*, char8_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::do_in(__mbstate_t&, char8_t const*, char8_t const*, char8_t const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::condition_variable()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::~condition_variable()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::wait(std::unique_lock<std::mutex>&)",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::notify_one()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::notify_all()",
    "type": "CPP"
  },
  {
    "name": "std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::logic_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::operator=(std::logic_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::logic_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::operator=(std::logic_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::runtime_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::operator=(std::runtime_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::runtime_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::operator=(std::runtime_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::domain_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::invalid_argument(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::length_error::length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::range_error::range_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::underflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::_M_message(int) const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::what() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::domain_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::invalid_argument(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::what() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::range_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::underflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_narrow(char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_narrow(char const*, char const*, char, char*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char const*, char const*, char*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::_M_narrow_init() const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::_M_widen_init() const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::ctype(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::ctype(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_get_mutex()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_revalidate_singular()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_swap(__gnu_debug::_Safe_sequence_base&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_detach_all()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_detach_single()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_attach_single(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_detach()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_singular() const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_detach_singular()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_can_compare(__gnu_debug::_Safe_iterator_base const&) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_get_mutex()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_unordered_container_base::_M_detach_all()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_unordered_container_base::_M_swap(__gnu_debug::_Safe_unordered_container_base&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_local_iterator_base::_M_attach_single(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_local_iterator_base::_M_detach()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_local_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_message(__gnu_debug::_Debug_msg_id) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_error() const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_Parameter::_M_print_field(__gnu_debug::_Error_formatter const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_Parameter::_M_print_description(__gnu_debug::_Error_formatter const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_print_word(char const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_print_string(char const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_get_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__throw_out_of_range_fmt(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "std::bad_function_call::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_function_call::~bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "std::bad_function_call::~bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "std::__atomic_futex_unsigned_base::_M_futex_wait_until(unsigned int*, unsigned int, bool, std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)",
    "type": "CPP"
  },
  {
    "name": "std::__atomic_futex_unsigned_base::_M_futex_wait_until_steady(unsigned int*, unsigned int, bool, std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)",
    "type": "CPP"
  },
  {
    "name": "std::__atomic_futex_unsigned_base::_M_futex_notify_all(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "std::future_error::~future_error()",
    "type": "CPP"
  },
  {
    "name": "std::future_error::~future_error()",
    "type": "CPP"
  },
  {
    "name": "std::future_category()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Result_base::_Result_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Result_base::~_Result_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Result_base::~_Result_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_State_baseV2::_Make_ready::_M_set()",
    "type": "CPP"
  },
  {
    "name": "std::future_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::hash<long double>::operator()(long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::ios_base()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::xalloc()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::register_callback(void (*)(std::ios_base::event, std::ios_base&, int), int)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_grow_words(int, bool)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_call_callbacks(std::ios_base::event)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_dispose_callbacks()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::~ios_base()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::~ios_base()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_move(std::ios_base&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_swap(std::ios_base&)",
    "type": "CPP"
  },
  {
    "name": "__once_proxy",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_fini()",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_getval()",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_getval_pretr1()",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_getentropy() const",
    "type": "CPP"
  },
  {
    "name": "std::regex_error::~regex_error()",
    "type": "CPP"
  },
  {
    "name": "std::regex_error::~regex_error()",
    "type": "CPP"
  },
  {
    "name": "std::regex_error::regex_error(std::regex_constants::error_type)",
    "type": "CPP"
  },
  {
    "name": "std::bad_weak_ptr::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_weak_ptr::~bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::bad_weak_ptr::~bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_locker::_Sp_locker(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_locker::_Sp_locker(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_locker::~_Sp_locker()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_make_shared_tag::_S_eq(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::default_error_condition(int) const",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::equivalent(int, std::error_condition const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::equivalent(std::error_code const&, int) const",
    "type": "CPP"
  },
  {
    "name": "std::system_error::~system_error()",
    "type": "CPP"
  },
  {
    "name": "std::system_error::~system_error()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::_M_message[abi:cxx11](int) const",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::system_category()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::generic_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_code::default_error_condition() const",
    "type": "CPP"
  },
  {
    "name": "std::thread::_State::~_State()",
    "type": "CPP"
  },
  {
    "name": "std::thread::_State::~_State()",
    "type": "CPP"
  },
  {
    "name": "std::thread::join()",
    "type": "CPP"
  },
  {
    "name": "std::thread::detach()",
    "type": "CPP"
  },
  {
    "name": "std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::thread::hardware_concurrency()",
    "type": "CPP"
  },
  {
    "name": "std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)",
    "type": "CPP"
  },
  {
    "name": "std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)",
    "type": "CPP"
  },
  {
    "name": "std::locale::name() const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >::operator()(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >) const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::what() const",
    "type": "CPP"
  },
  {
    "name": "std::iostream_category()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::failure(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::failure(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::failure(char const*, std::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::classic_table()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::ctype(__locale_struct*, unsigned short const*, bool, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::ctype(unsigned short const*, bool, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_toupper(char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_toupper(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_tolower(char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_tolower(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_toupper(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_toupper(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_tolower(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_tolower(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_is(unsigned short, wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_is(wchar_t const*, wchar_t const*, unsigned short*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_widen(char const*, char const*, wchar_t*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_narrow(wchar_t, char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::_M_initialize_ctype()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_pbump(char*, char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_pbump(wchar_t*, wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_sync(wchar_t*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_data(char*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_rep() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_ibegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_iend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::end() const",
    "type": "CPP"
  },
  {
    "name": "std::string::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::size() const",
    "type": "CPP"
  },
  {
    "name": "std::string::length() const",
    "type": "CPP"
  },
  {
    "name": "std::string::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::string::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::string::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::string::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::front() const",
    "type": "CPP"
  },
  {
    "name": "std::string::back() const",
    "type": "CPP"
  },
  {
    "name": "std::string::copy(char*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::swap(std::string&)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::string::data() const",
    "type": "CPP"
  },
  {
    "name": "std::string::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_is_leaked() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_is_shared() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_set_leaked()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_set_sharable()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_refdata()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_construct(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_construct_aux_2(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_destroy(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_mutate(unsigned long, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_leak_hard()",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_leak()",
    "type": "CPP"
  },
  {
    "name": "std::string::front()",
    "type": "CPP"
  },
  {
    "name": "std::string::begin()",
    "type": "CPP"
  },
  {
    "name": "std::string::rend()",
    "type": "CPP"
  },
  {
    "name": "std::string::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::end()",
    "type": "CPP"
  },
  {
    "name": "std::string::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::string::back()",
    "type": "CPP"
  },
  {
    "name": "std::string::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(char)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::string::clear()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_refcopy()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::resize(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::push_back(char)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(char)",
    "type": "CPP"
  },
  {
    "name": "std::string::reserve()",
    "type": "CPP"
  },
  {
    "name": "std::string::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init_pretr1(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data(wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_rep() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_ibegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_iend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::size() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::length() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::copy(wchar_t*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_is_leaked() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_is_shared() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_set_leaked()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_set_sharable()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_refdata()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_create(unsigned long, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct_aux_2(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_destroy(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_mutate(unsigned long, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_leak_hard()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_leak()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace_safe(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_dispose(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_refcopy()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_clone(std::allocator<wchar_t> const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::push_back(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::reserve()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_grab(std::allocator<wchar_t> const&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider::_Alloc_hider(wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "wchar_t* std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct<__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::allocator<wchar_t> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t*>(wchar_t*, wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "wchar_t* std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct<wchar_t const*>(wchar_t const*, wchar_t const*, std::allocator<wchar_t> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::initializer_list<wchar_t>, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t const*>(wchar_t const*, wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::do_hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::do_compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::do_transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<true>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<false>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<true>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<false>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::moneypunct(std::__moneypunct_cache<char, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::moneypunct(std::__moneypunct_cache<char, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::numpunct(std::__numpunct_cache<char>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::numpunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_num(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_name(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_wday_or_month(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_via_format(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::get(int, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::_M_convert_to_char(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::messages_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::codecvt_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::collate_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char> const& std::use_facet<std::__cxx11::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char> const& std::use_facet<std::__cxx11::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true> const& std::use_facet<std::__cxx11::moneypunct<char, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false> const& std::use_facet<std::__cxx11::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char> const& std::use_facet<std::__cxx11::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::do_hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<true>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<false>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<true>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<false>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::moneypunct(std::__moneypunct_cache<wchar_t, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::moneypunct(std::__moneypunct_cache<wchar_t, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::numpunct(std::__numpunct_cache<wchar_t>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::numpunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_num(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_name(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_wday_or_month(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_via_format(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::get(int, int, int, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::_M_convert_to_char(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::messages_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::codecvt_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::collate_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t> const& std::use_facet<std::__cxx11::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t> const& std::use_facet<std::__cxx11::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true> const& std::use_facet<std::__cxx11::moneypunct<wchar_t, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false> const& std::use_facet<std::__cxx11::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t> const& std::use_facet<std::__cxx11::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::stdio_sync_filebuf(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::stdio_sync_filebuf(__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::operator=(__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::file()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::stdio_sync_filebuf(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::stdio_sync_filebuf(__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::operator=(__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::file()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_create_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_destroy_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf(std::basic_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::swap(std::basic_filebuf<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_allocate_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_destroy_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_convert_to_external(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_get_ext_pos(__mbstate_t&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_terminate_output()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_seek(long, std::_Ios_Seekdir, __mbstate_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_set_buffer(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::basic_ifstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::basic_ifstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::swap(std::basic_ifstream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::basic_ofstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::basic_ofstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::swap(std::basic_ofstream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::basic_fstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::basic_fstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::swap(std::basic_fstream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_create_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_destroy_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::basic_filebuf(std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_allocate_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_destroy_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_convert_to_external(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_get_ext_pos(__mbstate_t&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_terminate_output()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_seek(long, std::_Ios_Seekdir, __mbstate_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_set_buffer(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::operator=(std::basic_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::operator=(std::basic_ifstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::operator=(std::basic_fstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::operator=(std::basic_ofstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::operator!() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::rdstate() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::good() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::eof() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::fail() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::bad() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::exceptions() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::exceptions(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::tie() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::tie(std::ostream*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::rdbuf(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::fill() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::fill(char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::narrow(char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::set_rdbuf(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::copyfmt(std::basic_ios<char, std::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::basic_ios(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::move(std::basic_ios<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::swap(std::basic_ios<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::move(std::basic_ios<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::operator!() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::rdstate() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::clear(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::good() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::eof() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::fail() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::bad() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::exceptions() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::exceptions(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::tie() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::tie(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::rdbuf(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::fill() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::fill(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::narrow(wchar_t, char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::set_rdbuf(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::copyfmt(std::basic_ios<wchar_t, std::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::basic_ios(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::move(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::move(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::iostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::iostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::iostream::operator=(std::iostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::iostream::swap(std::iostream&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::istream& (*)(std::istream&))",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::basic_ios<char, std::char_traits<char> >& (*)(std::basic_ios<char, std::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::istream::gcount() const",
    "type": "CPP"
  },
  {
    "name": "std::istream::getline(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::istream&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::istream&&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator=(std::istream&&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::swap(std::istream&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::sentry::sentry(std::istream&, bool)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(short&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(int&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get()",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(char&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(char*, long, char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(std::basic_streambuf<char, std::char_traits<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(std::basic_streambuf<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::peek()",
    "type": "CPP"
  },
  {
    "name": "std::istream::read(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::readsome(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::putback(char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::unget()",
    "type": "CPP"
  },
  {
    "name": "std::istream::sync()",
    "type": "CPP"
  },
  {
    "name": "std::istream::tellg()",
    "type": "CPP"
  },
  {
    "name": "std::istream::seekg(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::istream::seekg(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::istream::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::ws<char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, char&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, signed char&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, signed char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setfill<char>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned short>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned int>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<long>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned long>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<bool>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<long long>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned long long>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<float>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<double>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<long double>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<void*>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::basic_istream<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::basic_ios<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::gcount() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::getline(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::sentry::sentry(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, bool)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(short&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(int&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(wchar_t&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(wchar_t*, long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::peek()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::read(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::readsome(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::putback(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::unget()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::tellg()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::seekg(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::seekg(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::ws<wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, wchar_t&)",
    "type": "CPP"
  },
  {
    "name": "void std::__istream_extract<wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setfill<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned short>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned int>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<long>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned long>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<bool>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<long long>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned long long>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<float>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<double>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<long double>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<void*>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::do_hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<char>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<char>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::do_compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::do_transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::num_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::num_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::moneypunct(std::__moneypunct_cache<char, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::moneypunct(std::__moneypunct_cache<char, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::__numpunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::numpunct(std::__numpunct_cache<char>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::numpunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::__timepunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::__timepunct(std::__timepunct_cache<char>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::__timepunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_date_formats(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_time_formats(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_date_time_formats(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_am_pm_format(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_am_pm(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_days(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_days_abbreviated(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_months(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_months_abbreviated(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<char>::__timepunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::open(std::string const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::get(int, int, int, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::_M_convert_to_char(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::messages_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::ctype_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::codecvt_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::codecvt_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::collate_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, tm const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_num(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t> const& std::use_facet<std::codecvt<char, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char> const& std::use_facet<std::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char> const& std::use_facet<std::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true> const& std::use_facet<std::moneypunct<char, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false> const& std::use_facet<std::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char> const& std::use_facet<std::__timepunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char> const& std::use_facet<std::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::ctype<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::codecvt<char, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__timepunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_group_float(char const*, unsigned long, char, char const*, char*, char*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_group_int(char const*, unsigned long, char, std::ios_base&, char*, char*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<true>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<false>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_pad(char, long, std::ios_base&, char*, char const*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<long double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned short>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned int>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned long long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_name(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_wday_or_month(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_via_format(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<true>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<false>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::ostream& (*)(std::ostream&))",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::basic_ios<char, std::char_traits<char> >& (*)(std::basic_ios<char, std::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::ostream::_M_write(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::flush()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::tellp()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::seekp(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::seekp(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::iostream&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::iostream&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::ostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::ostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator=(std::ostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::swap(std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::sentry::sentry(std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::put(char)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::write(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::ends<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::flush<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setfill<char>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, signed char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, signed char const*)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<long>(long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(short)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(int)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned short)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<bool>(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<long long>(long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<unsigned long long>(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<double>(double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(float)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<long double>(long double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(long double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<void const*>(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::basic_ios<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_write(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::flush()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::tellp()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::seekp(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::seekp(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::sentry::sentry(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::put(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::write(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::endl<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::ends<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::flush<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setfill<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::__ostream_insert<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<long>(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(short)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<unsigned long>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned short)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<bool>(bool)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(bool)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<long long>(long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<unsigned long long>(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<double>(double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(float)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<long double>(long double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(long double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<void const*>(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_pbump(char*, char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::__xfer_bufptrs&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::__xfer_bufptrs::__xfer_bufptrs(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::__xfer_bufptrs::~__xfer_bufptrs()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_pbump(wchar_t*, wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_sync(wchar_t*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__xfer_bufptrs&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__xfer_bufptrs::__xfer_bufptrs(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__xfer_bufptrs::~__xfer_bufptrs()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubimbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::getloc() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubsetbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubseekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubseekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubsync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::in_avail()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::snextc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sbumpc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sgetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sputbackc(char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sungetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sputc(char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::eback() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::gptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::egptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::gbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::setg(char*, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pbase() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::epptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::setp(char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::stossc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::__safe_gbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::__safe_pbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf(std::basic_streambuf<char, std::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::operator=(std::basic_streambuf<char, std::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::swap(std::basic_streambuf<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs<char, std::char_traits<char> >(std::basic_streambuf<char, std::char_traits<char> >*, std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubimbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::getloc() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubsetbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubseekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubseekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubsync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::in_avail()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::snextc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sbumpc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sgetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sputbackc(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sungetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sputc(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::eback() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::gptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::egptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::gbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setg(wchar_t*, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbase() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::epptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setp(wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::stossc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::__safe_gbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::__safe_pbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::basic_streambuf(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs<wchar_t, std::char_traits<wchar_t> >(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux_2(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*, void>(char const*, char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::do_hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<wchar_t>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<wchar_t>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::num_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::num_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::moneypunct(std::__moneypunct_cache<wchar_t, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::moneypunct(std::__moneypunct_cache<wchar_t, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::__numpunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::numpunct(std::__numpunct_cache<wchar_t>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::numpunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::__timepunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::__timepunct(std::__timepunct_cache<wchar_t>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::__timepunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_date_formats(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_time_formats(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_date_time_formats(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_am_pm_format(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_am_pm(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_days(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_days_abbreviated(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_months(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_months_abbreviated(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<wchar_t>::__timepunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_put_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_put_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::open(std::string const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::get(int, int, int, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::_M_convert_to_char(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::messages_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::ctype_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::codecvt_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::codecvt_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::collate_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, tm const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_num(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t> const& std::use_facet<std::codecvt<wchar_t, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t> const& std::use_facet<std::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t> const& std::use_facet<std::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true> const& std::use_facet<std::moneypunct<wchar_t, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false> const& std::use_facet<std::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t> const& std::use_facet<std::__timepunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t> const& std::use_facet<std::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::ctype<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::codecvt<wchar_t, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__timepunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_group_float(char const*, unsigned long, wchar_t, wchar_t const*, wchar_t*, wchar_t*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_group_int(char const*, unsigned long, wchar_t, std::ios_base&, wchar_t*, wchar_t*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<true>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<false>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_pad(wchar_t, long, std::ios_base&, wchar_t*, wchar_t const*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<long long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<unsigned long long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_float<double>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, double) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_float<long double>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_float(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned short>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned int>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<long long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned long long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_name(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_wday_or_month(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_via_format(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<true>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<false>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data(wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_local_data()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_local_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_capacity(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_set_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_is_local() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_create(unsigned long&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_destroy(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct_aux_2(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_get_allocator()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_disjunct(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_move(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_assign(wchar_t*, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_mutate(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::length() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::reserve()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::push_back(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_append(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::copy(wchar_t*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider::_Alloc_hider(wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider::_Alloc_hider(wchar_t*, std::allocator<wchar_t>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, void>(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<wchar_t*>(wchar_t*, wchar_t*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t*, void>(wchar_t*, wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<wchar_t const*>(wchar_t const*, wchar_t const*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::initializer_list<wchar_t>, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t const*, void>(wchar_t const*, wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::from_chars(char const*, char const*, long double&, std::chars_format)",
    "type": "CPP"
  },
  {
    "name": "std::from_chars(char const*, char const*, double&, std::chars_format)",
    "type": "CPP"
  },
  {
    "name": "std::from_chars(char const*, char const*, float&, std::chars_format)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, long double, std::chars_format, int)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, double, std::chars_format, int)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, double)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, double, std::chars_format)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, float, std::chars_format, int)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, float)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, float, std::chars_format)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, long double)",
    "type": "CPP"
  },
  {
    "name": "std::to_chars(char*, char*, long double, std::chars_format)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::~recursive_directory_iterator()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::options() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::depth() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::recursion_pending() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator=(std::filesystem::__cxx11::recursive_directory_iterator const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator=(std::filesystem::__cxx11::recursive_directory_iterator&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::pop(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::disable_recursion_pending()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::pop()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::directory_iterator(std::filesystem::__cxx11::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::recursive_directory_iterator(std::filesystem::__cxx11::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::__cxx11::path const&, unsigned long, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::__cxx11::path const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::__cxx11::path const&, std::filesystem::perms, std::filesystem::perm_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::__cxx11::path const&, std::filesystem::perms, std::filesystem::perm_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path[abi:cxx11](std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path[abi:cxx11](std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::_List()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::end() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::compare(std::filesystem::__cxx11::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::compare(std::basic_string_view<char, std::char_traits<char> >) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_filename() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_find_extension() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_split_cmpts()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::remove_filename()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::hash_value(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::path1() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::path2() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_concat(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_append(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::_List(std::filesystem::__cxx11::path::_List const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::operator=(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::operator/=(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::replace_filename(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::operator+=(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::replace_extension(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::lexically_relative(std::filesystem::__cxx11::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::lexically_proximate(std::filesystem::__cxx11::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::lexically_normal() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::filesystem_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_S_convert_loc(char const*, char const*, std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::filesystem_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::filesystem::__cxx11::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::filesystem_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::memory_resource::~memory_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::memory_resource::~memory_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::new_delete_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::null_memory_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::set_default_resource(std::pmr::memory_resource*)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::get_default_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::_M_new_buffer(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::_M_release_buffers()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::~monotonic_buffer_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::~monotonic_buffer_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::release()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::~synchronized_pool_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::do_deallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::synchronized_pool_resource(std::pmr::pool_options const&, std::pmr::memory_resource*)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(std::pmr::pool_options const&, std::pmr::memory_resource*)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::release()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::~unsynchronized_pool_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::do_deallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::do_allocate(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::do_allocate(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::~recursive_directory_iterator()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::options() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::depth() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::recursion_pending() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator=(std::filesystem::recursive_directory_iterator const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator=(std::filesystem::recursive_directory_iterator&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::pop(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::disable_recursion_pending()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::pop()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::directory_iterator(std::filesystem::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::recursive_directory_iterator(std::filesystem::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::path const&, unsigned long, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::path const&, std::filesystem::perms, std::filesystem::perm_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::path const&, std::filesystem::perms, std::filesystem::perm_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::path const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::_Impl_deleter::operator()(std::filesystem::path::_List::_Impl*) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::_List()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::end() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::compare(std::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::compare(std::basic_string_view<char, std::char_traits<char> >) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_filename() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_find_extension() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_split_cmpts()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::remove_filename()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hash_value(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::path1() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::path2() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_concat(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_append(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::_List(std::filesystem::path::_List const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::operator=(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::operator/=(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::replace_filename(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::operator+=(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::replace_extension(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::lexically_relative(std::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::lexically_proximate(std::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::lexically_normal() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::filesystem_error(std::string const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_S_convert_loc(char const*, char const*, std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::filesystem_error(std::string const&, std::filesystem::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::filesystem_error(std::string const&, std::filesystem::path const&, std::filesystem::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(decltype(nullptr))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(decltype(nullptr))",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator std::basic_string_view<char, std::char_traits<char> >() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_to_string_view(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator std::basic_string_view<wchar_t, std::char_traits<wchar_t> >() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string::__sv_wrapper, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator std::basic_string_view<char, std::char_traits<char> >() const",
    "type": "CPP"
  },
  {
    "name": "std::string::data()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_to_string_view(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator std::basic_string_view<wchar_t, std::char_traits<wchar_t> >() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::_Ios_Openmode, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&, std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::__xfer_bufptrs&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::_Ios_Openmode, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::allocator<wchar_t> const&, std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__xfer_bufptrs&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::view() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() &&",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const &",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/aarch64-linux-gnu/libdl-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "dlopen",
    "type": "CPP"
  },
  {
    "name": "dlclose",
    "type": "CPP"
  },
  {
    "name": "dlsym",
    "type": "CPP"
  },
  {
    "name": "dlvsym",
    "type": "CPP"
  },
  {
    "name": "dlerror",
    "type": "CPP"
  },
  {
    "name": "dladdr",
    "type": "CPP"
  },
  {
    "name": "dladdr1",
    "type": "CPP"
  },
  {
    "name": "dlinfo",
    "type": "CPP"
  },
  {
    "name": "dlmopen",
    "type": "CPP"
  },
  {
    "name": "__libdl_freeres",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/aarch64-linux-gnu/ld-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "_dl_rtld_di_serinfo",
    "type": "CPP"
  },
  {
    "name": "_dl_debug_state",
    "type": "CPP"
  },
  {
    "name": "_dl_mcount",
    "type": "CPP"
  },
  {
    "name": "_dl_get_tls_static_info",
    "type": "CPP"
  },
  {
    "name": "_dl_allocate_tls_init",
    "type": "CPP"
  },
  {
    "name": "_dl_allocate_tls",
    "type": "CPP"
  },
  {
    "name": "_dl_deallocate_tls",
    "type": "CPP"
  },
  {
    "name": "__tls_get_addr",
    "type": "CPP"
  },
  {
    "name": "_dl_make_stack_executable",
    "type": "CPP"
  },
  {
    "name": "_dl_find_dso_for_object",
    "type": "CPP"
  },
  {
    "name": "_dl_exception_create",
    "type": "CPP"
  },
  {
    "name": "_dl_exception_create_format",
    "type": "CPP"
  },
  {
    "name": "_dl_exception_free",
    "type": "CPP"
  },
  {
    "name": "__tunable_get_val",
    "type": "CPP"
  },
  {
    "name": "_dl_var_init",
    "type": "CPP"
  },
  {
    "name": "malloc",
    "type": "CPP"
  },
  {
    "name": "calloc",
    "type": "CPP"
  },
  {
    "name": "free",
    "type": "CPP"
  },
  {
    "name": "realloc",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_error",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_error",
    "type": "CPP"
  },
  {
    "name": "[vdso]",
    "type": "SHARED_LIB"
  },
  {
    "name": "RecordWrite",
    "timestamp": 1510,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EphemeronKeyBarrier",
    "timestamp": 1515,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AdaptorWithBuiltinExitFrame",
    "timestamp": 1517,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArgumentsAdaptorTrampoline",
    "timestamp": 1520,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsNullOrUndefined",
    "timestamp": 1523,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsNotNullOrUndefined",
    "timestamp": 1526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsAny",
    "timestamp": 1529,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallBoundFunction",
    "timestamp": 1532,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNullOrUndefined",
    "timestamp": 1535,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNotNullOrUndefined",
    "timestamp": 1537,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsAny",
    "timestamp": 1540,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallProxy",
    "timestamp": 1543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallVarargs",
    "timestamp": 1545,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithSpread",
    "timestamp": 1547,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithArrayLike",
    "timestamp": 1549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallForwardVarargs",
    "timestamp": 1552,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionForwardVarargs",
    "timestamp": 1554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckAccess",
    "timestamp": 1557,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckCompatibleReceiver",
    "timestamp": 1560,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckAccessAndCompatibleReceiver",
    "timestamp": 1563,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructFunction",
    "timestamp": 1567,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructBoundFunction",
    "timestamp": 1570,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructedNonConstructable",
    "timestamp": 1572,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Construct",
    "timestamp": 1579,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructVarargs",
    "timestamp": 1582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithSpread",
    "timestamp": 1584,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithArrayLike",
    "timestamp": 1587,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructForwardVarargs",
    "timestamp": 1589,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructFunctionForwardVarargs",
    "timestamp": 1592,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructStubGeneric",
    "timestamp": 1595,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSBuiltinsConstructStub",
    "timestamp": 1597,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewObject",
    "timestamp": 1600,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewClosure",
    "timestamp": 1602,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewFunctionContextEval",
    "timestamp": 1604,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewFunctionContextFunction",
    "timestamp": 1607,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateRegExpLiteral",
    "timestamp": 1610,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateEmptyArrayLiteral",
    "timestamp": 1612,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateShallowArrayLiteral",
    "timestamp": 1615,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateShallowObjectLiteral",
    "timestamp": 1618,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructProxy",
    "timestamp": 1620,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSEntry",
    "timestamp": 1623,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructEntry",
    "timestamp": 1625,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSRunMicrotasksEntry",
    "timestamp": 1627,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSEntryTrampoline",
    "timestamp": 1630,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructEntryTrampoline",
    "timestamp": 1632,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ResumeGeneratorTrampoline",
    "timestamp": 1635,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringCodePointAt",
    "timestamp": 1637,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCodePointAt",
    "timestamp": 1640,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringEqual",
    "timestamp": 1642,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringGreaterThan",
    "timestamp": 1644,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringGreaterThanOrEqual",
    "timestamp": 1655,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringIndexOf",
    "timestamp": 1658,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringLessThan",
    "timestamp": 1660,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringLessThanOrEqual",
    "timestamp": 1662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringSubstring",
    "timestamp": 1665,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrderedHashTableHealIndex",
    "timestamp": 1667,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEntryTrampoline",
    "timestamp": 1670,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenCall",
    "timestamp": 1672,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushUndefinedAndArgsThenCall",
    "timestamp": 1675,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenCallWithFinalSpread",
    "timestamp": 1678,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstruct",
    "timestamp": 1682,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstructArrayFunction",
    "timestamp": 1685,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstructWithFinalSpread",
    "timestamp": 1688,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEnterBytecodeAdvance",
    "timestamp": 1696,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEnterBytecodeDispatch",
    "timestamp": 1699,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterOnStackReplacement",
    "timestamp": 1702,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CompileLazy",
    "timestamp": 1705,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CompileLazyDeoptimizedCode",
    "timestamp": 1707,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstantiateAsmJs",
    "timestamp": 1710,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NotifyDeoptimized",
    "timestamp": 1713,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToCodeStubBuiltin",
    "timestamp": 1715,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToCodeStubBuiltinWithResult",
    "timestamp": 1718,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToJavaScriptBuiltin",
    "timestamp": 1721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToJavaScriptBuiltinWithResult",
    "timestamp": 1724,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallApiCallback",
    "timestamp": 1727,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallApiGetter",
    "timestamp": 1730,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCall",
    "timestamp": 1732,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCallAsFunction",
    "timestamp": 1740,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCallAsConstructor",
    "timestamp": 1742,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateInYoungGeneration",
    "timestamp": 1745,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateRegularInYoungGeneration",
    "timestamp": 1748,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateInOldGeneration",
    "timestamp": 1751,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateRegularInOldGeneration",
    "timestamp": 1754,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyFastSmiOrObjectElements",
    "timestamp": 1757,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GrowFastDoubleElements",
    "timestamp": 1760,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GrowFastSmiOrObjectElements",
    "timestamp": 1763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewArgumentsElements",
    "timestamp": 1780,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DebugBreakTrampoline",
    "timestamp": 1783,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FrameDropperTrampoline",
    "timestamp": 1786,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleDebuggerStatement",
    "timestamp": 1788,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToObject",
    "timestamp": 1791,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToBoolean",
    "timestamp": 1793,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryToPrimitive_Number",
    "timestamp": 1796,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryToPrimitive_String",
    "timestamp": 1799,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_Default",
    "timestamp": 1802,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_Number",
    "timestamp": 1807,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_String",
    "timestamp": 1810,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToNumber",
    "timestamp": 1816,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToName",
    "timestamp": 1818,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonNumberToNumber",
    "timestamp": 1842,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonNumberToNumeric",
    "timestamp": 1848,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumber",
    "timestamp": 1851,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumberConvertBigInt",
    "timestamp": 1853,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumeric",
    "timestamp": 1856,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberToString",
    "timestamp": 1858,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToLength",
    "timestamp": 1860,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Typeof",
    "timestamp": 1863,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetSuperConstructor",
    "timestamp": 1865,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntToI64",
    "timestamp": 1867,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntToI32Pair",
    "timestamp": 1883,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "I64ToBigInt",
    "timestamp": 1886,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "I32PairToBigInt",
    "timestamp": 1889,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToBooleanLazyDeoptContinuation",
    "timestamp": 1894,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_PolymorphicName",
    "timestamp": 1897,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Megamorphic",
    "timestamp": 1900,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalIC_NoFeedback",
    "timestamp": 1903,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_FunctionPrototype",
    "timestamp": 1906,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_StringLength",
    "timestamp": 1909,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_StringWrapperLength",
    "timestamp": 1911,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_NoFeedback",
    "timestamp": 1914,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalIC_Slow",
    "timestamp": 1917,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreIC_NoFeedback",
    "timestamp": 1920,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_SloppyArguments",
    "timestamp": 1923,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIndexedInterceptorIC",
    "timestamp": 1926,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_Standard",
    "timestamp": 1929,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_GrowNoTransitionHandleCOW",
    "timestamp": 1932,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_NoTransitionIgnoreOOB",
    "timestamp": 1936,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_NoTransitionHandleCOW",
    "timestamp": 1940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_Standard",
    "timestamp": 1944,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_GrowNoTransitionHandleCOW",
    "timestamp": 1947,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_NoTransitionIgnoreOOB",
    "timestamp": 1951,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_NoTransitionHandleCOW",
    "timestamp": 1954,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_Standard",
    "timestamp": 1957,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_GrowNoTransitionHandleCOW",
    "timestamp": 1961,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_NoTransitionIgnoreOOB",
    "timestamp": 1964,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_NoTransitionHandleCOW",
    "timestamp": 1968,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_PolymorphicName",
    "timestamp": 1971,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_SloppyArguments",
    "timestamp": 1974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HasIndexedInterceptorIC",
    "timestamp": 1977,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EnqueueMicrotask",
    "timestamp": 1980,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RunMicrotasksTrampoline",
    "timestamp": 1982,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RunMicrotasks",
    "timestamp": 1985,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HasProperty",
    "timestamp": 1988,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DeleteProperty",
    "timestamp": 1990,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyDataProperties",
    "timestamp": 1993,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetDataProperties",
    "timestamp": 1995,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Abort",
    "timestamp": 1998,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AbortCSAAssert",
    "timestamp": 2000,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EmptyFunction",
    "timestamp": 2002,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Illegal",
    "timestamp": 2004,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictPoisonPillThrower",
    "timestamp": 2006,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "UnsupportedThrower",
    "timestamp": 2009,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReturnReceiver",
    "timestamp": 2012,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConstructor",
    "timestamp": 2014,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConstructorImpl",
    "timestamp": 2017,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedSmi_DontOverride",
    "timestamp": 2019,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleySmi_DontOverride",
    "timestamp": 2023,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedSmi_DisableAllocationSites",
    "timestamp": 2027,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleySmi_DisableAllocationSites",
    "timestamp": 2031,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_Packed_DisableAllocationSites",
    "timestamp": 2035,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_Holey_DisableAllocationSites",
    "timestamp": 2039,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedDouble_DisableAllocationSites",
    "timestamp": 2043,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleyDouble_DisableAllocationSites",
    "timestamp": 2048,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedSmi_DontOverride",
    "timestamp": 2052,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleySmi_DontOverride",
    "timestamp": 2056,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedSmi_DisableAllocationSites",
    "timestamp": 2060,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleySmi_DisableAllocationSites",
    "timestamp": 2065,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_Packed_DisableAllocationSites",
    "timestamp": 2070,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_Holey_DisableAllocationSites",
    "timestamp": 2074,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedDouble_DisableAllocationSites",
    "timestamp": 2078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites",
    "timestamp": 2082,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNArgumentsConstructor",
    "timestamp": 2087,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConcat",
    "timestamp": 2090,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFill",
    "timestamp": 2092,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesSmiOrObject",
    "timestamp": 2094,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesPackedDoubles",
    "timestamp": 2097,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesHoleyDoubles",
    "timestamp": 2100,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludes",
    "timestamp": 2103,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfSmiOrObject",
    "timestamp": 2105,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfPackedDoubles",
    "timestamp": 2108,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfHoleyDoubles",
    "timestamp": 2110,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOf",
    "timestamp": 2113,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPop",
    "timestamp": 2115,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypePop",
    "timestamp": 2117,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPush",
    "timestamp": 2120,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypePush",
    "timestamp": 2122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayShift",
    "timestamp": 2124,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayUnshift",
    "timestamp": 2126,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneFastJSArray",
    "timestamp": 2129,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneFastJSArrayFillingHoles",
    "timestamp": 2131,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtractFastJSArray",
    "timestamp": 2134,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeEntries",
    "timestamp": 2137,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeKeys",
    "timestamp": 2139,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeValues",
    "timestamp": 2142,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIteratorPrototypeNext",
    "timestamp": 2144,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FlattenIntoArray",
    "timestamp": 2147,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FlatMapIntoArray",
    "timestamp": 2150,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFlat",
    "timestamp": 2152,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFlatMap",
    "timestamp": 2155,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferConstructor",
    "timestamp": 2157,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferConstructor_DoNotInitialize",
    "timestamp": 2160,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeGetByteLength",
    "timestamp": 2163,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferIsView",
    "timestamp": 2166,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeSlice",
    "timestamp": 2169,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionEnter",
    "timestamp": 2172,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionReject",
    "timestamp": 2174,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionResolve",
    "timestamp": 2177,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionLazyDeoptContinuation",
    "timestamp": 2179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitCaught",
    "timestamp": 2182,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitUncaught",
    "timestamp": 2185,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitRejectClosure",
    "timestamp": 2188,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitResolveClosure",
    "timestamp": 2191,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntConstructor",
    "timestamp": 2194,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAsUintN",
    "timestamp": 2196,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAsIntN",
    "timestamp": 2199,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeToLocaleString",
    "timestamp": 2201,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeToString",
    "timestamp": 2204,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeValueOf",
    "timestamp": 2207,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetColumnNumber",
    "timestamp": 2210,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetEnclosingColumnNumber",
    "timestamp": 2213,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetEnclosingLineNumber",
    "timestamp": 2216,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetEvalOrigin",
    "timestamp": 2219,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFileName",
    "timestamp": 2222,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFunction",
    "timestamp": 2225,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFunctionName",
    "timestamp": 2228,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetLineNumber",
    "timestamp": 2232,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetMethodName",
    "timestamp": 2235,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetPosition",
    "timestamp": 2238,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetPromiseIndex",
    "timestamp": 2240,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetScriptNameOrSourceURL",
    "timestamp": 2244,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetThis",
    "timestamp": 2247,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetTypeName",
    "timestamp": 2249,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsAsync",
    "timestamp": 2252,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsConstructor",
    "timestamp": 2255,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsEval",
    "timestamp": 2258,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsNative",
    "timestamp": 2260,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsPromiseAll",
    "timestamp": 2263,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsToplevel",
    "timestamp": 2266,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeToString",
    "timestamp": 2269,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDebug",
    "timestamp": 2271,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleError",
    "timestamp": 2274,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleInfo",
    "timestamp": 2276,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleLog",
    "timestamp": 2278,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleWarn",
    "timestamp": 2280,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDir",
    "timestamp": 2283,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDirXml",
    "timestamp": 2285,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTable",
    "timestamp": 2287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTrace",
    "timestamp": 2289,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroup",
    "timestamp": 2292,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroupCollapsed",
    "timestamp": 2294,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroupEnd",
    "timestamp": 2296,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleClear",
    "timestamp": 2299,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleCount",
    "timestamp": 2301,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleCountReset",
    "timestamp": 2303,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleAssert",
    "timestamp": 2306,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleProfile",
    "timestamp": 2308,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleProfileEnd",
    "timestamp": 2310,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTime",
    "timestamp": 2313,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeLog",
    "timestamp": 2315,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeEnd",
    "timestamp": 2318,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeStamp",
    "timestamp": 2320,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleContext",
    "timestamp": 2323,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewConstructor",
    "timestamp": 2325,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateConstructor",
    "timestamp": 2328,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetDate",
    "timestamp": 2330,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetDay",
    "timestamp": 2332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetFullYear",
    "timestamp": 2335,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetHours",
    "timestamp": 2338,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMilliseconds",
    "timestamp": 2341,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMinutes",
    "timestamp": 2343,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMonth",
    "timestamp": 2346,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetSeconds",
    "timestamp": 2349,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetTime",
    "timestamp": 2352,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetTimezoneOffset",
    "timestamp": 2354,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCDate",
    "timestamp": 2357,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCDay",
    "timestamp": 2360,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCFullYear",
    "timestamp": 2363,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCHours",
    "timestamp": 2365,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMilliseconds",
    "timestamp": 2368,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMinutes",
    "timestamp": 2371,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMonth",
    "timestamp": 2374,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCSeconds",
    "timestamp": 2377,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeValueOf",
    "timestamp": 2380,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToPrimitive",
    "timestamp": 2383,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetYear",
    "timestamp": 2385,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetYear",
    "timestamp": 2388,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateNow",
    "timestamp": 2390,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateParse",
    "timestamp": 2392,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetDate",
    "timestamp": 2394,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetFullYear",
    "timestamp": 2397,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetHours",
    "timestamp": 2401,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMilliseconds",
    "timestamp": 2403,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMinutes",
    "timestamp": 2406,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMonth",
    "timestamp": 2409,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetSeconds",
    "timestamp": 2411,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetTime",
    "timestamp": 2414,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCDate",
    "timestamp": 2416,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCFullYear",
    "timestamp": 2419,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCHours",
    "timestamp": 2422,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMilliseconds",
    "timestamp": 2425,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMinutes",
    "timestamp": 2427,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMonth",
    "timestamp": 2430,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCSeconds",
    "timestamp": 2433,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToDateString",
    "timestamp": 2435,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToISOString",
    "timestamp": 2438,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToUTCString",
    "timestamp": 2441,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToString",
    "timestamp": 2443,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToTimeString",
    "timestamp": 2446,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToJson",
    "timestamp": 2449,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateUTC",
    "timestamp": 2451,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorConstructor",
    "timestamp": 2453,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorCaptureStackTrace",
    "timestamp": 2456,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorPrototypeToString",
    "timestamp": 2458,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionConstructor",
    "timestamp": 2461,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeApply",
    "timestamp": 2463,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeBind",
    "timestamp": 2466,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastFunctionPrototypeBind",
    "timestamp": 2468,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeCall",
    "timestamp": 2471,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeHasInstance",
    "timestamp": 2473,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeToString",
    "timestamp": 2476,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateIterResultObject",
    "timestamp": 2479,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateGeneratorObject",
    "timestamp": 2482,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorFunctionConstructor",
    "timestamp": 2484,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeNext",
    "timestamp": 2487,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeReturn",
    "timestamp": 2489,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeThrow",
    "timestamp": 2492,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionConstructor",
    "timestamp": 2495,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetIteratorWithFeedbackLazyDeoptContinuation",
    "timestamp": 2497,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalDecodeURI",
    "timestamp": 2501,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalDecodeURIComponent",
    "timestamp": 2503,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEncodeURI",
    "timestamp": 2506,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEncodeURIComponent",
    "timestamp": 2508,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEscape",
    "timestamp": 2511,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalUnescape",
    "timestamp": 2513,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEval",
    "timestamp": 2515,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalIsFinite",
    "timestamp": 2518,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalIsNaN",
    "timestamp": 2520,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JsonParse",
    "timestamp": 2522,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JsonStringify",
    "timestamp": 2524,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC",
    "timestamp": 2526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Megamorphic",
    "timestamp": 2528,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Noninlined",
    "timestamp": 2531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadICTrampoline",
    "timestamp": 2533,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadICTrampoline_Megamorphic",
    "timestamp": 2536,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC",
    "timestamp": 2539,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_Megamorphic",
    "timestamp": 2541,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadICTrampoline",
    "timestamp": 2543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadICTrampoline_Megamorphic",
    "timestamp": 2546,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalIC",
    "timestamp": 2549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalICTrampoline",
    "timestamp": 2551,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreIC",
    "timestamp": 2554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreICTrampoline",
    "timestamp": 2556,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC",
    "timestamp": 2558,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreICTrampoline",
    "timestamp": 2560,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC",
    "timestamp": 2563,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalIC",
    "timestamp": 2566,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICInsideTypeof",
    "timestamp": 2569,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICTrampoline",
    "timestamp": 2571,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICInsideTypeofTrampoline",
    "timestamp": 2574,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneObjectIC",
    "timestamp": 2577,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneObjectIC_Slow",
    "timestamp": 2579,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC",
    "timestamp": 2582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_Megamorphic",
    "timestamp": 2584,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToList",
    "timestamp": 2586,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToFixedArray",
    "timestamp": 2589,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToListWithSymbolLookup",
    "timestamp": 2591,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToFixedArrayWithSymbolLookupSlow",
    "timestamp": 2594,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToListMayPreserveHoles",
    "timestamp": 2597,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToFixedArrayForWasm",
    "timestamp": 2600,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringListFromIterable",
    "timestamp": 2603,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FindOrderedHashMapEntry",
    "timestamp": 2605,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapConstructor",
    "timestamp": 2608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeSet",
    "timestamp": 2610,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeDelete",
    "timestamp": 2613,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeGet",
    "timestamp": 2615,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeHas",
    "timestamp": 2617,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeClear",
    "timestamp": 2620,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeEntries",
    "timestamp": 2622,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeGetSize",
    "timestamp": 2625,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeForEach",
    "timestamp": 2627,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeKeys",
    "timestamp": 2630,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeValues",
    "timestamp": 2632,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapIteratorPrototypeNext",
    "timestamp": 2635,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapIteratorToList",
    "timestamp": 2637,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateHeapNumber",
    "timestamp": 2640,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberConstructor",
    "timestamp": 2642,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsFinite",
    "timestamp": 2644,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsInteger",
    "timestamp": 2647,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsNaN",
    "timestamp": 2649,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsSafeInteger",
    "timestamp": 2651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberParseFloat",
    "timestamp": 2654,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberParseInt",
    "timestamp": 2656,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ParseInt",
    "timestamp": 2658,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToExponential",
    "timestamp": 2660,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToFixed",
    "timestamp": 2663,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToLocaleString",
    "timestamp": 2666,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToPrecision",
    "timestamp": 2669,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeValueOf",
    "timestamp": 2671,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Add",
    "timestamp": 2674,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Subtract",
    "timestamp": 2676,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Multiply",
    "timestamp": 2678,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Divide",
    "timestamp": 2681,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Modulus",
    "timestamp": 2683,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Exponentiate",
    "timestamp": 2685,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseAnd",
    "timestamp": 2687,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseOr",
    "timestamp": 2689,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseXor",
    "timestamp": 2691,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftLeft",
    "timestamp": 2693,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRight",
    "timestamp": 2695,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRightLogical",
    "timestamp": 2698,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThan",
    "timestamp": 2700,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThanOrEqual",
    "timestamp": 2702,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThan",
    "timestamp": 2705,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThanOrEqual",
    "timestamp": 2707,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Equal",
    "timestamp": 2709,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SameValue",
    "timestamp": 2712,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SameValueNumbersOnly",
    "timestamp": 2714,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictEqual",
    "timestamp": 2716,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseNot",
    "timestamp": 2719,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Decrement",
    "timestamp": 2721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Increment",
    "timestamp": 2723,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Negate",
    "timestamp": 2725,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectConstructor",
    "timestamp": 2727,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectAssign",
    "timestamp": 2730,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectCreate",
    "timestamp": 2733,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineGetter",
    "timestamp": 2735,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineProperties",
    "timestamp": 2737,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineProperty",
    "timestamp": 2740,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineSetter",
    "timestamp": 2742,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectEntries",
    "timestamp": 2745,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectFreeze",
    "timestamp": 2747,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyDescriptor",
    "timestamp": 2749,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyDescriptors",
    "timestamp": 2752,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyNames",
    "timestamp": 2755,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertySymbols",
    "timestamp": 2758,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIs",
    "timestamp": 2760,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsFrozen",
    "timestamp": 2762,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsSealed",
    "timestamp": 2765,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectKeys",
    "timestamp": 2767,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectLookupGetter",
    "timestamp": 2769,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectLookupSetter",
    "timestamp": 2772,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeHasOwnProperty",
    "timestamp": 2774,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeIsPrototypeOf",
    "timestamp": 2777,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypePropertyIsEnumerable",
    "timestamp": 2780,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeGetProto",
    "timestamp": 2783,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeSetProto",
    "timestamp": 2785,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectSeal",
    "timestamp": 2788,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectToString",
    "timestamp": 2790,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectValues",
    "timestamp": 2793,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryHasInstance",
    "timestamp": 2795,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstanceOf",
    "timestamp": 2797,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInEnumerate",
    "timestamp": 2799,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInFilter",
    "timestamp": 2802,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectApply",
    "timestamp": 2804,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectConstruct",
    "timestamp": 2806,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectDefineProperty",
    "timestamp": 2809,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGetOwnPropertyDescriptor",
    "timestamp": 2811,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectOwnKeys",
    "timestamp": 2814,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectSet",
    "timestamp": 2816,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture1Getter",
    "timestamp": 2818,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture2Getter",
    "timestamp": 2821,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture3Getter",
    "timestamp": 2823,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture4Getter",
    "timestamp": 2826,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture5Getter",
    "timestamp": 2828,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture6Getter",
    "timestamp": 2831,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture7Getter",
    "timestamp": 2833,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture8Getter",
    "timestamp": 2836,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture9Getter",
    "timestamp": 2838,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpConstructor",
    "timestamp": 2841,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInputGetter",
    "timestamp": 2843,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInputSetter",
    "timestamp": 2846,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLastMatchGetter",
    "timestamp": 2848,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLastParenGetter",
    "timestamp": 2851,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLeftContextGetter",
    "timestamp": 2853,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeCompile",
    "timestamp": 2856,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeToString",
    "timestamp": 2858,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpRightContextGetter",
    "timestamp": 2861,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpExecAtom",
    "timestamp": 2864,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpExecInternal",
    "timestamp": 2866,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInterpreterTrampoline",
    "timestamp": 2868,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetConstructor",
    "timestamp": 2871,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeHas",
    "timestamp": 2873,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeAdd",
    "timestamp": 2876,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeDelete",
    "timestamp": 2878,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeClear",
    "timestamp": 2881,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeEntries",
    "timestamp": 2883,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeGetSize",
    "timestamp": 2885,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeForEach",
    "timestamp": 2888,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeValues",
    "timestamp": 2890,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetIteratorPrototypeNext",
    "timestamp": 2894,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetOrSetIteratorToList",
    "timestamp": 2897,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeGetByteLength",
    "timestamp": 2899,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeSlice",
    "timestamp": 2903,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsLoad",
    "timestamp": 2905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsStore",
    "timestamp": 2908,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsExchange",
    "timestamp": 2910,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsCompareExchange",
    "timestamp": 2912,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsAdd",
    "timestamp": 2915,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsSub",
    "timestamp": 2917,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsAnd",
    "timestamp": 2919,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsOr",
    "timestamp": 2921,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsXor",
    "timestamp": 2923,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsNotify",
    "timestamp": 2926,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsIsLockFree",
    "timestamp": 2928,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsWait",
    "timestamp": 2930,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsWake",
    "timestamp": 2933,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCodePoint",
    "timestamp": 2935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCharCode",
    "timestamp": 2937,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIncludes",
    "timestamp": 2940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIndexOf",
    "timestamp": 2942,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLastIndexOf",
    "timestamp": 2945,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeMatch",
    "timestamp": 2948,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeMatchAll",
    "timestamp": 2951,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLocaleCompare",
    "timestamp": 2953,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeReplace",
    "timestamp": 2957,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSearch",
    "timestamp": 2959,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSplit",
    "timestamp": 2962,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrim",
    "timestamp": 2964,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrimEnd",
    "timestamp": 2967,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrimStart",
    "timestamp": 2970,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringRaw",
    "timestamp": 2972,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolConstructor",
    "timestamp": 2975,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolFor",
    "timestamp": 2977,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolKeyFor",
    "timestamp": 2979,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayBaseConstructor",
    "timestamp": 2982,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericLazyDeoptContinuation",
    "timestamp": 2984,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayConstructor",
    "timestamp": 2987,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeBuffer",
    "timestamp": 2990,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeByteLength",
    "timestamp": 2993,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeByteOffset",
    "timestamp": 2996,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeLength",
    "timestamp": 2999,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeEntries",
    "timestamp": 3002,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeKeys",
    "timestamp": 3005,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeValues",
    "timestamp": 3007,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeCopyWithin",
    "timestamp": 3010,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFill",
    "timestamp": 3026,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeIncludes",
    "timestamp": 3029,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeIndexOf",
    "timestamp": 3032,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeLastIndexOf",
    "timestamp": 3035,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReverse",
    "timestamp": 3038,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeToStringTag",
    "timestamp": 3041,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeMap",
    "timestamp": 3044,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmCompileLazy",
    "timestamp": 3047,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmDebugBreak",
    "timestamp": 3049,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmFloat32ToNumber",
    "timestamp": 3051,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmFloat64ToNumber",
    "timestamp": 3054,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateArray",
    "timestamp": 3059,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateStruct",
    "timestamp": 3062,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAtomicNotify",
    "timestamp": 3066,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI32AtomicWait32",
    "timestamp": 3069,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI32AtomicWait64",
    "timestamp": 3091,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI64AtomicWait32",
    "timestamp": 3097,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI64AtomicWait64",
    "timestamp": 3100,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableInit",
    "timestamp": 3105,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableCopy",
    "timestamp": 3107,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapConstructor",
    "timestamp": 3110,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapLookupHashIndex",
    "timestamp": 3112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapGet",
    "timestamp": 3115,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeHas",
    "timestamp": 3117,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeSet",
    "timestamp": 3120,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeDelete",
    "timestamp": 3122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetConstructor",
    "timestamp": 3125,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeHas",
    "timestamp": 3128,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeAdd",
    "timestamp": 3130,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeDelete",
    "timestamp": 3133,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakCollectionDelete",
    "timestamp": 3136,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakCollectionSet",
    "timestamp": 3138,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorResolve",
    "timestamp": 3140,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReject",
    "timestamp": 3143,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorYield",
    "timestamp": 3145,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturn",
    "timestamp": 3148,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorResumeNext",
    "timestamp": 3151,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorFunctionConstructor",
    "timestamp": 3153,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeNext",
    "timestamp": 3156,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeReturn",
    "timestamp": 3159,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeThrow",
    "timestamp": 3162,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitCaught",
    "timestamp": 3165,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitUncaught",
    "timestamp": 3167,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitResolveClosure",
    "timestamp": 3170,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitRejectClosure",
    "timestamp": 3173,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorYieldResolveClosure",
    "timestamp": 3176,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnClosedResolveClosure",
    "timestamp": 3179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnClosedRejectClosure",
    "timestamp": 3182,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnResolveClosure",
    "timestamp": 3186,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeNext",
    "timestamp": 3189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeThrow",
    "timestamp": 3192,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeReturn",
    "timestamp": 3195,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncIteratorValueUnwrap",
    "timestamp": 3198,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 3200,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 3204,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit",
    "timestamp": 3208,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_SaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 3212,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_SaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 3215,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 3219,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 3223,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit",
    "timestamp": 3226,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_SaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 3230,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_SaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 3234,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DirectCEntry",
    "timestamp": 3238,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAdd_CheckNone",
    "timestamp": 3240,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SubString",
    "timestamp": 3242,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StackCheck",
    "timestamp": 3244,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DoubleToI",
    "timestamp": 3247,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetProperty",
    "timestamp": 3249,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetPropertyWithReceiver",
    "timestamp": 3251,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetProperty",
    "timestamp": 3254,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPropertyInLiteral",
    "timestamp": 3256,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MemCopyUint8Uint8",
    "timestamp": 3258,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MemMove",
    "timestamp": 3261,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IsTraceCategoryEnabled",
    "timestamp": 3263,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Trace",
    "timestamp": 3267,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryConstructor",
    "timestamp": 3269,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryRegister",
    "timestamp": 3272,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryUnregister",
    "timestamp": 3275,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakRefConstructor",
    "timestamp": 3277,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakRefDeref",
    "timestamp": 3280,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncModuleEvaluate",
    "timestamp": 3282,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallAsyncModuleFulfilled",
    "timestamp": 3285,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallAsyncModuleRejected",
    "timestamp": 3287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeCopyWithin",
    "timestamp": 3290,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopEagerDeoptContinuation",
    "timestamp": 3293,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopLazyDeoptContinuation",
    "timestamp": 3296,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopContinuation",
    "timestamp": 3299,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEvery",
    "timestamp": 3302,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopEagerDeoptContinuation",
    "timestamp": 3304,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopLazyDeoptContinuation",
    "timestamp": 3307,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopContinuation",
    "timestamp": 3310,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilter",
    "timestamp": 3313,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopEagerDeoptContinuation",
    "timestamp": 3315,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopLazyDeoptContinuation",
    "timestamp": 3318,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopAfterCallbackLazyDeoptContinuation",
    "timestamp": 3321,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopContinuation",
    "timestamp": 3324,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFind",
    "timestamp": 3327,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopEagerDeoptContinuation",
    "timestamp": 3330,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopLazyDeoptContinuation",
    "timestamp": 3333,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopAfterCallbackLazyDeoptContinuation",
    "timestamp": 3336,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopContinuation",
    "timestamp": 3340,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFindIndex",
    "timestamp": 3343,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopEagerDeoptContinuation",
    "timestamp": 3345,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopLazyDeoptContinuation",
    "timestamp": 3348,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopContinuation",
    "timestamp": 3351,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEach",
    "timestamp": 3354,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFrom",
    "timestamp": 3357,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIsArray",
    "timestamp": 3359,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_DictionaryElements_0",
    "timestamp": 3361,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_FastSmiOrObjectElements_0",
    "timestamp": 3364,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_FastDoubleElements_0",
    "timestamp": 3367,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConvertToLocaleString",
    "timestamp": 3370,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JoinStackPush",
    "timestamp": 3373,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JoinStackPop",
    "timestamp": 3375,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeJoin",
    "timestamp": 3377,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeToLocaleString",
    "timestamp": 3380,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeToString",
    "timestamp": 3383,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeJoin",
    "timestamp": 3385,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeToLocaleString",
    "timestamp": 3388,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeLastIndexOf",
    "timestamp": 3391,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopEagerDeoptContinuation",
    "timestamp": 3394,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopLazyDeoptContinuation",
    "timestamp": 3397,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopContinuation",
    "timestamp": 3400,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMap",
    "timestamp": 3402,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayOf",
    "timestamp": 3405,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightPreLoopEagerDeoptContinuation",
    "timestamp": 3407,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopEagerDeoptContinuation",
    "timestamp": 3410,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopLazyDeoptContinuation",
    "timestamp": 3413,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopContinuation",
    "timestamp": 3416,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRight",
    "timestamp": 3420,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReducePreLoopEagerDeoptContinuation",
    "timestamp": 3422,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopEagerDeoptContinuation",
    "timestamp": 3426,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopLazyDeoptContinuation",
    "timestamp": 3429,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopContinuation",
    "timestamp": 3432,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduce",
    "timestamp": 3435,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeReverse",
    "timestamp": 3437,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeShift",
    "timestamp": 3440,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSlice",
    "timestamp": 3442,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopEagerDeoptContinuation",
    "timestamp": 3445,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopLazyDeoptContinuation",
    "timestamp": 3448,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopContinuation",
    "timestamp": 3451,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySome",
    "timestamp": 3454,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSplice",
    "timestamp": 3456,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeUnshift",
    "timestamp": 3458,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToInteger",
    "timestamp": 3461,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToString",
    "timestamp": 3463,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastCreateDataProperty",
    "timestamp": 3465,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CheckNumberInRange",
    "timestamp": 3468,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CheckSameObject",
    "timestamp": 3470,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAddNoThrow",
    "timestamp": 3472,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAdd",
    "timestamp": 3475,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntSubtractNoThrow",
    "timestamp": 3477,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntSubtract",
    "timestamp": 3480,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntUnaryMinus",
    "timestamp": 3482,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanConstructor",
    "timestamp": 3484,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanPrototypeToString",
    "timestamp": 3487,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanPrototypeValueOf",
    "timestamp": 3489,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToString",
    "timestamp": 3492,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeValueOf",
    "timestamp": 3494,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToList",
    "timestamp": 3497,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCharAt",
    "timestamp": 3499,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCharCodeAt",
    "timestamp": 3502,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCodePointAt",
    "timestamp": 3504,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeConcat",
    "timestamp": 3507,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringConstructor",
    "timestamp": 3510,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAddConvertLeft",
    "timestamp": 3512,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAddConvertRight",
    "timestamp": 3515,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringCharAt",
    "timestamp": 3518,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastConsoleAssert",
    "timestamp": 3520,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBuffer",
    "timestamp": 3522,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetByteLength",
    "timestamp": 3525,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetByteOffset",
    "timestamp": 3528,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint8",
    "timestamp": 3531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt8",
    "timestamp": 3533,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint16",
    "timestamp": 3536,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt16",
    "timestamp": 3539,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint32",
    "timestamp": 3541,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt32",
    "timestamp": 3544,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetFloat32",
    "timestamp": 3547,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetFloat64",
    "timestamp": 3549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBigUint64",
    "timestamp": 3552,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBigInt64",
    "timestamp": 3555,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint8",
    "timestamp": 3558,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt8",
    "timestamp": 3560,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint16",
    "timestamp": 3563,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt16",
    "timestamp": 3566,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint32",
    "timestamp": 3569,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt32",
    "timestamp": 3571,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetFloat32",
    "timestamp": 3574,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetFloat64",
    "timestamp": 3577,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetBigUint64",
    "timestamp": 3580,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetBigInt64",
    "timestamp": 3582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryPrototypeCleanupSome",
    "timestamp": 3585,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IncBlockCounter",
    "timestamp": 3589,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetIteratorWithFeedback",
    "timestamp": 3592,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallIteratorWithFeedback",
    "timestamp": 3594,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAbs",
    "timestamp": 3597,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCeil",
    "timestamp": 3599,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathFloor",
    "timestamp": 3601,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathRound",
    "timestamp": 3604,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTrunc",
    "timestamp": 3606,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathPow",
    "timestamp": 3608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathMax",
    "timestamp": 3610,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathMin",
    "timestamp": 3612,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAcos",
    "timestamp": 3614,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAcosh",
    "timestamp": 3616,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAsin",
    "timestamp": 3618,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAsinh",
    "timestamp": 3620,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtan",
    "timestamp": 3623,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtan2",
    "timestamp": 3625,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtanh",
    "timestamp": 3627,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCbrt",
    "timestamp": 3629,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathClz32",
    "timestamp": 3631,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCos",
    "timestamp": 3633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCosh",
    "timestamp": 3635,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathExp",
    "timestamp": 3637,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathExpm1",
    "timestamp": 3639,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathFround",
    "timestamp": 3642,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathImul",
    "timestamp": 3644,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog",
    "timestamp": 3646,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog1p",
    "timestamp": 3648,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog10",
    "timestamp": 3650,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog2",
    "timestamp": 3652,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSin",
    "timestamp": 3654,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSign",
    "timestamp": 3656,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSinh",
    "timestamp": 3658,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSqrt",
    "timestamp": 3660,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTan",
    "timestamp": 3662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTanh",
    "timestamp": 3664,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathHypot",
    "timestamp": 3667,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathRandom",
    "timestamp": 3669,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToString",
    "timestamp": 3671,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectFromEntries",
    "timestamp": 3673,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateObjectWithoutProperties",
    "timestamp": 3676,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsExtensible",
    "timestamp": 3679,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPreventExtensions",
    "timestamp": 3681,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetPrototypeOf",
    "timestamp": 3684,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectSetPrototypeOf",
    "timestamp": 3686,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeToString",
    "timestamp": 3689,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeValueOf",
    "timestamp": 3691,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeToLocaleString",
    "timestamp": 3694,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FulfillPromise",
    "timestamp": 3697,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RejectPromise",
    "timestamp": 3699,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewPromiseCapability",
    "timestamp": 3701,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCapabilityDefaultReject",
    "timestamp": 3704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCapabilityDefaultResolve",
    "timestamp": 3707,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PerformPromiseThen",
    "timestamp": 3710,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseReject",
    "timestamp": 3712,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseGetCapabilitiesExecutor",
    "timestamp": 3714,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseConstructorLazyDeoptContinuation",
    "timestamp": 3717,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAll",
    "timestamp": 3720,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettled",
    "timestamp": 3723,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllResolveElementClosure",
    "timestamp": 3725,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettledResolveElementClosure",
    "timestamp": 3728,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettledRejectElementClosure",
    "timestamp": 3731,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAnyRejectElementClosure",
    "timestamp": 3734,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAny",
    "timestamp": 3737,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseConstructor",
    "timestamp": 3739,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeCatch",
    "timestamp": 3742,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseValueThunkFinally",
    "timestamp": 3744,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseThrowerFinally",
    "timestamp": 3747,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCatchFinally",
    "timestamp": 3751,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseThenFinally",
    "timestamp": 3753,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeFinally",
    "timestamp": 3755,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseRace",
    "timestamp": 3758,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseFulfillReactionJob",
    "timestamp": 3760,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseRejectReactionJob",
    "timestamp": 3763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolveTrampoline",
    "timestamp": 3765,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolve",
    "timestamp": 3768,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ResolvePromise",
    "timestamp": 3770,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeThen",
    "timestamp": 3773,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolveThenableJob",
    "timestamp": 3775,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyConstructor",
    "timestamp": 3778,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyDeleteProperty",
    "timestamp": 3780,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyGetProperty",
    "timestamp": 3783,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyGetPrototypeOf",
    "timestamp": 3785,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyHasProperty",
    "timestamp": 3787,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyIsExtensible",
    "timestamp": 3790,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyPreventExtensions",
    "timestamp": 3792,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyRevocable",
    "timestamp": 3795,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyRevoke",
    "timestamp": 3797,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxySetProperty",
    "timestamp": 3799,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxySetPrototypeOf",
    "timestamp": 3802,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectIsExtensible",
    "timestamp": 3804,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectPreventExtensions",
    "timestamp": 3807,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGetPrototypeOf",
    "timestamp": 3809,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectSetPrototypeOf",
    "timestamp": 3812,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGet",
    "timestamp": 3814,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectDeleteProperty",
    "timestamp": 3817,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectHas",
    "timestamp": 3819,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeExecSlow",
    "timestamp": 3821,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeExec",
    "timestamp": 3824,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMatchAll",
    "timestamp": 3826,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpStringIteratorPrototypeNext",
    "timestamp": 3829,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpMatchFast",
    "timestamp": 3832,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMatch",
    "timestamp": 3834,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpReplace",
    "timestamp": 3837,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeReplace",
    "timestamp": 3839,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpSearchFast",
    "timestamp": 3841,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSearch",
    "timestamp": 3844,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSourceGetter",
    "timestamp": 3846,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpSplit",
    "timestamp": 3849,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSplit",
    "timestamp": 3851,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeTest",
    "timestamp": 3854,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeTestFast",
    "timestamp": 3856,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeGlobalGetter",
    "timestamp": 3859,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeIgnoreCaseGetter",
    "timestamp": 3861,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMultilineGetter",
    "timestamp": 3864,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeDotAllGetter",
    "timestamp": 3867,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeStickyGetter",
    "timestamp": 3870,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeUnicodeGetter",
    "timestamp": 3873,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeFlagsGetter",
    "timestamp": 3876,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeEndsWith",
    "timestamp": 3878,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateHTML",
    "timestamp": 3881,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeAnchor",
    "timestamp": 3883,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBig",
    "timestamp": 3886,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBlink",
    "timestamp": 3888,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBold",
    "timestamp": 3890,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFontcolor",
    "timestamp": 3893,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFontsize",
    "timestamp": 3896,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFixed",
    "timestamp": 3898,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeItalics",
    "timestamp": 3901,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLink",
    "timestamp": 3903,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSmall",
    "timestamp": 3906,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeStrike",
    "timestamp": 3908,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSub",
    "timestamp": 3912,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSup",
    "timestamp": 3914,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIterator",
    "timestamp": 3916,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringIteratorPrototypeNext",
    "timestamp": 3919,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypePadStart",
    "timestamp": 3922,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypePadEnd",
    "timestamp": 3924,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringRepeat",
    "timestamp": 3927,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeRepeat",
    "timestamp": 3929,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeReplaceAll",
    "timestamp": 3932,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSlice",
    "timestamp": 3934,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeStartsWith",
    "timestamp": 3937,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSubstring",
    "timestamp": 3939,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSubstr",
    "timestamp": 3942,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeDescriptionGetter",
    "timestamp": 3945,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeToPrimitive",
    "timestamp": 3948,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeToString",
    "timestamp": 3951,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeValueOf",
    "timestamp": 3953,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateTypedArray",
    "timestamp": 3956,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeEvery",
    "timestamp": 3958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFilter",
    "timestamp": 3961,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFind",
    "timestamp": 3963,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFindIndex",
    "timestamp": 3966,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeForEach",
    "timestamp": 3969,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayFrom",
    "timestamp": 3972,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayOf",
    "timestamp": 3974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReduce",
    "timestamp": 3976,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReduceRight",
    "timestamp": 3979,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSet",
    "timestamp": 3982,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSlice",
    "timestamp": 3984,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSome",
    "timestamp": 3987,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayMergeSort",
    "timestamp": 3989,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSort",
    "timestamp": 3992,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSubArray",
    "timestamp": 3994,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmInt32ToHeapNumber",
    "timestamp": 3997,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTaggedNonSmiToInt32",
    "timestamp": 4000,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTaggedToFloat64",
    "timestamp": 4002,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmMemoryGrow",
    "timestamp": 4005,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableGet",
    "timestamp": 4007,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableSet",
    "timestamp": 4010,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmRefFunc",
    "timestamp": 4012,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmThrow",
    "timestamp": 4014,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmRethrow",
    "timestamp": 4016,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmStackGuard",
    "timestamp": 4018,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmStackOverflow",
    "timestamp": 4021,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTraceMemory",
    "timestamp": 4023,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateJSArray",
    "timestamp": 4025,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmGetOwnProperty",
    "timestamp": 4028,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTrap",
    "timestamp": 4030,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapUnreachable",
    "timestamp": 4032,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapMemOutOfBounds",
    "timestamp": 4035,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapUnalignedAccess",
    "timestamp": 4038,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDivByZero",
    "timestamp": 4041,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDivUnrepresentable",
    "timestamp": 4043,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapRemByZero",
    "timestamp": 4046,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFloatUnrepresentable",
    "timestamp": 4049,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFuncInvalid",
    "timestamp": 4052,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFuncSigMismatch",
    "timestamp": 4054,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDataSegmentDropped",
    "timestamp": 4057,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapElemSegmentDropped",
    "timestamp": 4060,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapTableOutOfBounds",
    "timestamp": 4063,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapBrOnExnNullRef",
    "timestamp": 4066,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapRethrowNullRef",
    "timestamp": 4068,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapNullDereference",
    "timestamp": 4073,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapIllegalCast",
    "timestamp": 4075,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapArrayOutOfBounds",
    "timestamp": 4078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AggregateErrorConstructor",
    "timestamp": 4081,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AggregateErrorPrototypeErrorsGetter",
    "timestamp": 4084,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericBuiltinTest_JSAny_0",
    "timestamp": 4087,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TestHelperPlus1",
    "timestamp": 4090,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TestHelperPlus2",
    "timestamp": 4092,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewSmiBox",
    "timestamp": 4094,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_FastSmiElements_0",
    "timestamp": 4096,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_FastObjectElements_0",
    "timestamp": 4099,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_FastDoubleElements_0",
    "timestamp": 4102,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_FastSmiElements_0",
    "timestamp": 4104,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_FastObjectElements_0",
    "timestamp": 4107,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_FastDoubleElements_0",
    "timestamp": 4109,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_FastSmiElements_0",
    "timestamp": 4112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_FastObjectElements_0",
    "timestamp": 4115,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_FastDoubleElements_0",
    "timestamp": 4118,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SortCompareDefault",
    "timestamp": 4120,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SortCompareUserFn",
    "timestamp": 4123,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_GenericElementsAccessor_0",
    "timestamp": 4125,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Copy",
    "timestamp": 4129,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MergeAt",
    "timestamp": 4131,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GallopLeft",
    "timestamp": 4133,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GallopRight",
    "timestamp": 4135,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayTimSort",
    "timestamp": 4137,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSort",
    "timestamp": 4139,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_GenericElementsAccessor_0",
    "timestamp": 4142,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Int32Elements_0",
    "timestamp": 4145,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Float32Elements_0",
    "timestamp": 4148,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Float64Elements_0",
    "timestamp": 4151,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint8ClampedElements_0",
    "timestamp": 4155,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_BigUint64Elements_0",
    "timestamp": 4158,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_BigInt64Elements_0",
    "timestamp": 4161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint8Elements_0",
    "timestamp": 4164,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Int8Elements_0",
    "timestamp": 4168,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint16Elements_0",
    "timestamp": 4171,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Int16Elements_0",
    "timestamp": 4174,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint32Elements_0",
    "timestamp": 4177,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericBuiltinTest_Smi_0",
    "timestamp": 4180,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_FastDoubleElements_0",
    "timestamp": 4182,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_FastSmiElements_0",
    "timestamp": 4186,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_FastObjectElements_0",
    "timestamp": 4189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_GenericElementsAccessor_0",
    "timestamp": 4192,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_GenericElementsAccessor_0",
    "timestamp": 4195,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_GenericElementsAccessor_0",
    "timestamp": 4197,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Int32Elements_0",
    "timestamp": 4200,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Int32Elements_0",
    "timestamp": 4203,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Int32Elements_0",
    "timestamp": 4207,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Float32Elements_0",
    "timestamp": 4210,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Float32Elements_0",
    "timestamp": 4213,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Float32Elements_0",
    "timestamp": 4216,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Float64Elements_0",
    "timestamp": 4219,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Float64Elements_0",
    "timestamp": 4222,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Float64Elements_0",
    "timestamp": 4226,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint8ClampedElements_0",
    "timestamp": 4229,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint8ClampedElements_0",
    "timestamp": 4233,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint8ClampedElements_0",
    "timestamp": 4237,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_BigUint64Elements_0",
    "timestamp": 4240,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_BigUint64Elements_0",
    "timestamp": 4243,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_BigUint64Elements_0",
    "timestamp": 4246,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_BigInt64Elements_0",
    "timestamp": 4250,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_BigInt64Elements_0",
    "timestamp": 4253,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_BigInt64Elements_0",
    "timestamp": 4256,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint8Elements_0",
    "timestamp": 4259,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint8Elements_0",
    "timestamp": 4262,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint8Elements_0",
    "timestamp": 4266,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Int8Elements_0",
    "timestamp": 4269,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Int8Elements_0",
    "timestamp": 4272,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Int8Elements_0",
    "timestamp": 4275,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint16Elements_0",
    "timestamp": 4278,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint16Elements_0",
    "timestamp": 4281,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint16Elements_0",
    "timestamp": 4284,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Int16Elements_0",
    "timestamp": 4288,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Int16Elements_0",
    "timestamp": 4291,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Int16Elements_0",
    "timestamp": 4294,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint32Elements_0",
    "timestamp": 4297,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint32Elements_0",
    "timestamp": 4300,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint32Elements_0",
    "timestamp": 4303,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorConstructor",
    "timestamp": 4308,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorInternalCompare",
    "timestamp": 4311,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorPrototypeCompare",
    "timestamp": 4313,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorSupportedLocalesOf",
    "timestamp": 4316,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorPrototypeResolvedOptions",
    "timestamp": 4319,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleDateString",
    "timestamp": 4322,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleString",
    "timestamp": 4325,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleTimeString",
    "timestamp": 4328,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatConstructor",
    "timestamp": 4331,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatInternalFormat",
    "timestamp": 4334,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormat",
    "timestamp": 4337,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatRange",
    "timestamp": 4340,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatRangeToParts",
    "timestamp": 4343,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatToParts",
    "timestamp": 4346,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeResolvedOptions",
    "timestamp": 4361,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatSupportedLocalesOf",
    "timestamp": 4364,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesConstructor",
    "timestamp": 4368,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesPrototypeOf",
    "timestamp": 4374,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesPrototypeResolvedOptions",
    "timestamp": 4377,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesSupportedLocalesOf",
    "timestamp": 4380,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IntlGetCanonicalLocales",
    "timestamp": 4384,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatConstructor",
    "timestamp": 4387,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeFormat",
    "timestamp": 4389,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeFormatToParts",
    "timestamp": 4392,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeResolvedOptions",
    "timestamp": 4395,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatSupportedLocalesOf",
    "timestamp": 4398,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocaleConstructor",
    "timestamp": 4401,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeBaseName",
    "timestamp": 4404,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCalendar",
    "timestamp": 4410,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCaseFirst",
    "timestamp": 4413,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCollation",
    "timestamp": 4417,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeHourCycle",
    "timestamp": 4420,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeLanguage",
    "timestamp": 4427,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeMaximize",
    "timestamp": 4430,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeMinimize",
    "timestamp": 4433,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeNumeric",
    "timestamp": 4435,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeNumberingSystem",
    "timestamp": 4438,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeRegion",
    "timestamp": 4441,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeScript",
    "timestamp": 4444,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeToString",
    "timestamp": 4447,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatConstructor",
    "timestamp": 4449,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatInternalFormatNumber",
    "timestamp": 4452,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatNumber",
    "timestamp": 4455,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatToParts",
    "timestamp": 4458,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeResolvedOptions",
    "timestamp": 4461,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatSupportedLocalesOf",
    "timestamp": 4465,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesConstructor",
    "timestamp": 4467,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesPrototypeResolvedOptions",
    "timestamp": 4470,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesPrototypeSelect",
    "timestamp": 4473,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesSupportedLocalesOf",
    "timestamp": 4478,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatConstructor",
    "timestamp": 4481,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeFormat",
    "timestamp": 4486,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeFormatToParts",
    "timestamp": 4490,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeResolvedOptions",
    "timestamp": 4495,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatSupportedLocalesOf",
    "timestamp": 4499,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterConstructor",
    "timestamp": 4502,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterPrototypeResolvedOptions",
    "timestamp": 4505,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterPrototypeSegment",
    "timestamp": 4508,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterSupportedLocalesOf",
    "timestamp": 4511,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeBreakType",
    "timestamp": 4514,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeFollowing",
    "timestamp": 4517,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypePreceding",
    "timestamp": 4520,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeIndex",
    "timestamp": 4523,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeNext",
    "timestamp": 4526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeNormalizeIntl",
    "timestamp": 4529,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLocaleLowerCase",
    "timestamp": 4532,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLocaleUpperCase",
    "timestamp": 4535,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLowerCaseIntl",
    "timestamp": 4538,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToUpperCaseIntl",
    "timestamp": 4541,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToLowerCaseIntl",
    "timestamp": 4547,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorConstructor",
    "timestamp": 4549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalAdoptText",
    "timestamp": 4555,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalBreakType",
    "timestamp": 4558,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalCurrent",
    "timestamp": 4564,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalFirst",
    "timestamp": 4567,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalNext",
    "timestamp": 4573,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeAdoptText",
    "timestamp": 4576,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeBreakType",
    "timestamp": 4582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeCurrent",
    "timestamp": 4585,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeFirst",
    "timestamp": 4591,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeNext",
    "timestamp": 4594,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeResolvedOptions",
    "timestamp": 4600,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorSupportedLocalesOf",
    "timestamp": 4603,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Wide",
    "timestamp": 4610,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExtraWide",
    "timestamp": 4612,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreakWide",
    "timestamp": 4615,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreakExtraWide",
    "timestamp": 4618,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak0",
    "timestamp": 4621,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1",
    "timestamp": 4624,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2",
    "timestamp": 4627,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3",
    "timestamp": 4631,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4",
    "timestamp": 4633,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5",
    "timestamp": 4636,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6",
    "timestamp": 4639,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaZero",
    "timestamp": 4641,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi",
    "timestamp": 4644,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaUndefined",
    "timestamp": 4646,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNull",
    "timestamp": 4649,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaTheHole",
    "timestamp": 4651,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaTrue",
    "timestamp": 4654,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaFalse",
    "timestamp": 4656,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant",
    "timestamp": 4661,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal",
    "timestamp": 4664,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof",
    "timestamp": 4669,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal",
    "timestamp": 4672,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext",
    "timestamp": 4678,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext",
    "timestamp": 4681,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot",
    "timestamp": 4686,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot",
    "timestamp": 4689,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot",
    "timestamp": 4695,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot",
    "timestamp": 4698,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot",
    "timestamp": 4701,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot",
    "timestamp": 4704,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot",
    "timestamp": 4707,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot",
    "timestamp": 4731,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot",
    "timestamp": 4737,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof",
    "timestamp": 4741,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof",
    "timestamp": 4744,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof",
    "timestamp": 4747,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot",
    "timestamp": 4751,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar",
    "timestamp": 4753,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star",
    "timestamp": 4756,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov",
    "timestamp": 4758,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedProperty",
    "timestamp": 4760,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedPropertyNoFeedback",
    "timestamp": 4763,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaKeyedProperty",
    "timestamp": 4767,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable",
    "timestamp": 4769,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable",
    "timestamp": 4772,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedProperty",
    "timestamp": 4775,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedPropertyNoFeedback",
    "timestamp": 4778,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedOwnProperty",
    "timestamp": 4781,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaKeyedProperty",
    "timestamp": 4784,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral",
    "timestamp": 4786,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaDataPropertyInLiteral",
    "timestamp": 4789,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile",
    "timestamp": 4792,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add",
    "timestamp": 4795,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub",
    "timestamp": 4797,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul",
    "timestamp": 4799,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div",
    "timestamp": 4801,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod",
    "timestamp": 4808,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp",
    "timestamp": 4810,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr",
    "timestamp": 4813,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor",
    "timestamp": 4815,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd",
    "timestamp": 4818,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft",
    "timestamp": 4820,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight",
    "timestamp": 4823,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical",
    "timestamp": 4825,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi",
    "timestamp": 4828,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi",
    "timestamp": 4830,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi",
    "timestamp": 4832,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi",
    "timestamp": 4835,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi",
    "timestamp": 4837,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi",
    "timestamp": 4840,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi",
    "timestamp": 4844,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi",
    "timestamp": 4847,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi",
    "timestamp": 4850,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi",
    "timestamp": 4852,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi",
    "timestamp": 4855,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi",
    "timestamp": 4857,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc",
    "timestamp": 4860,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec",
    "timestamp": 4862,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate",
    "timestamp": 4865,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot",
    "timestamp": 4867,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToBooleanLogicalNot",
    "timestamp": 4869,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LogicalNot",
    "timestamp": 4872,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TypeOf",
    "timestamp": 4875,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict",
    "timestamp": 4877,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy",
    "timestamp": 4880,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor",
    "timestamp": 4883,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver",
    "timestamp": 4886,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty",
    "timestamp": 4888,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0",
    "timestamp": 4891,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1",
    "timestamp": 4893,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2",
    "timestamp": 4896,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver",
    "timestamp": 4899,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0",
    "timestamp": 4901,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1",
    "timestamp": 4904,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2",
    "timestamp": 4907,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallNoFeedback",
    "timestamp": 4910,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread",
    "timestamp": 4913,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime",
    "timestamp": 4915,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair",
    "timestamp": 4918,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime",
    "timestamp": 4921,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic",
    "timestamp": 4923,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct",
    "timestamp": 4926,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread",
    "timestamp": 4928,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual",
    "timestamp": 4931,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict",
    "timestamp": 4934,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan",
    "timestamp": 4936,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan",
    "timestamp": 4939,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual",
    "timestamp": 4941,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual",
    "timestamp": 4944,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual",
    "timestamp": 4947,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf",
    "timestamp": 4950,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn",
    "timestamp": 4953,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestUndetectable",
    "timestamp": 4955,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestNull",
    "timestamp": 4958,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestUndefined",
    "timestamp": 4960,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestTypeOf",
    "timestamp": 4963,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName",
    "timestamp": 4965,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber",
    "timestamp": 4967,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric",
    "timestamp": 4970,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject",
    "timestamp": 4972,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToString",
    "timestamp": 4975,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral",
    "timestamp": 4977,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral",
    "timestamp": 4980,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayFromIterable",
    "timestamp": 4982,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral",
    "timestamp": 4985,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral",
    "timestamp": 4988,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyObjectLiteral",
    "timestamp": 4991,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject",
    "timestamp": 4994,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject",
    "timestamp": 4996,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure",
    "timestamp": 4999,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext",
    "timestamp": 5002,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext",
    "timestamp": 5004,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext",
    "timestamp": 5008,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext",
    "timestamp": 5011,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext",
    "timestamp": 5014,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateMappedArguments",
    "timestamp": 5017,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateUnmappedArguments",
    "timestamp": 5019,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRestParameter",
    "timestamp": 5022,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop",
    "timestamp": 5025,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump",
    "timestamp": 5028,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant",
    "timestamp": 5030,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant",
    "timestamp": 5032,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant",
    "timestamp": 5035,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant",
    "timestamp": 5038,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant",
    "timestamp": 5041,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNullConstant",
    "timestamp": 5044,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant",
    "timestamp": 5047,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant",
    "timestamp": 5050,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant",
    "timestamp": 5052,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant",
    "timestamp": 5055,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant",
    "timestamp": 5058,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue",
    "timestamp": 5061,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse",
    "timestamp": 5064,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue",
    "timestamp": 5067,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse",
    "timestamp": 5070,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull",
    "timestamp": 5072,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull",
    "timestamp": 5074,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined",
    "timestamp": 5077,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined",
    "timestamp": 5080,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNull",
    "timestamp": 5082,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver",
    "timestamp": 5085,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback",
    "timestamp": 5088,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate",
    "timestamp": 5091,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare",
    "timestamp": 5093,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue",
    "timestamp": 5096,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext",
    "timestamp": 5098,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep",
    "timestamp": 5101,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetPendingMessage",
    "timestamp": 5103,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Throw",
    "timestamp": 5106,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ReThrow",
    "timestamp": 5108,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Return",
    "timestamp": 5113,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole",
    "timestamp": 5115,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowSuperNotCalledIfHole",
    "timestamp": 5119,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowSuperAlreadyCalledIfNotHole",
    "timestamp": 5122,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState",
    "timestamp": 5125,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator",
    "timestamp": 5128,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator",
    "timestamp": 5130,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetIterator",
    "timestamp": 5133,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Debugger",
    "timestamp": 5135,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter",
    "timestamp": 5138,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort",
    "timestamp": 5141,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Illegal",
    "timestamp": 5143,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1.Wide",
    "timestamp": 5146,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2.Wide",
    "timestamp": 5149,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3.Wide",
    "timestamp": 5152,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4.Wide",
    "timestamp": 5154,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5.Wide",
    "timestamp": 5157,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6.Wide",
    "timestamp": 5160,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi.Wide",
    "timestamp": 5163,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant.Wide",
    "timestamp": 5165,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal.Wide",
    "timestamp": 5168,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof.Wide",
    "timestamp": 5171,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal.Wide",
    "timestamp": 5175,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext.Wide",
    "timestamp": 5178,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext.Wide",
    "timestamp": 5181,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot.Wide",
    "timestamp": 5184,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot.Wide",
    "timestamp": 5186,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot.Wide",
    "timestamp": 5190,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot.Wide",
    "timestamp": 5193,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot.Wide",
    "timestamp": 5196,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot.Wide",
    "timestamp": 5199,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot.Wide",
    "timestamp": 5202,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot.Wide",
    "timestamp": 5205,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot.Wide",
    "timestamp": 5208,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof.Wide",
    "timestamp": 5211,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof.Wide",
    "timestamp": 5215,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof.Wide",
    "timestamp": 5218,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot.Wide",
    "timestamp": 5222,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar.Wide",
    "timestamp": 5224,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star.Wide",
    "timestamp": 5227,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov.Wide",
    "timestamp": 5229,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedProperty.Wide",
    "timestamp": 5232,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedPropertyNoFeedback.Wide",
    "timestamp": 5235,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaKeyedProperty.Wide",
    "timestamp": 5238,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable.Wide",
    "timestamp": 5241,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable.Wide",
    "timestamp": 5244,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedProperty.Wide",
    "timestamp": 5247,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedPropertyNoFeedback.Wide",
    "timestamp": 5250,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedOwnProperty.Wide",
    "timestamp": 5253,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaKeyedProperty.Wide",
    "timestamp": 5257,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral.Wide",
    "timestamp": 5260,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaDataPropertyInLiteral.Wide",
    "timestamp": 5263,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile.Wide",
    "timestamp": 5266,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add.Wide",
    "timestamp": 5269,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub.Wide",
    "timestamp": 5271,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul.Wide",
    "timestamp": 5274,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div.Wide",
    "timestamp": 5276,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod.Wide",
    "timestamp": 5279,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp.Wide",
    "timestamp": 5281,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr.Wide",
    "timestamp": 5284,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor.Wide",
    "timestamp": 5286,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd.Wide",
    "timestamp": 5289,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft.Wide",
    "timestamp": 5292,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight.Wide",
    "timestamp": 5295,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical.Wide",
    "timestamp": 5297,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi.Wide",
    "timestamp": 5300,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi.Wide",
    "timestamp": 5303,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi.Wide",
    "timestamp": 5305,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi.Wide",
    "timestamp": 5308,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi.Wide",
    "timestamp": 5311,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi.Wide",
    "timestamp": 5313,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi.Wide",
    "timestamp": 5316,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi.Wide",
    "timestamp": 5318,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi.Wide",
    "timestamp": 5321,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi.Wide",
    "timestamp": 5324,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi.Wide",
    "timestamp": 5327,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi.Wide",
    "timestamp": 5330,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc.Wide",
    "timestamp": 5333,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec.Wide",
    "timestamp": 5335,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate.Wide",
    "timestamp": 5338,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot.Wide",
    "timestamp": 5346,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict.Wide",
    "timestamp": 5349,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy.Wide",
    "timestamp": 5352,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor.Wide",
    "timestamp": 5355,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver.Wide",
    "timestamp": 5358,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty.Wide",
    "timestamp": 5361,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0.Wide",
    "timestamp": 5364,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1.Wide",
    "timestamp": 5367,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2.Wide",
    "timestamp": 5369,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver.Wide",
    "timestamp": 5372,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0.Wide",
    "timestamp": 5376,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1.Wide",
    "timestamp": 5379,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2.Wide",
    "timestamp": 5382,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallNoFeedback.Wide",
    "timestamp": 5385,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread.Wide",
    "timestamp": 5388,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime.Wide",
    "timestamp": 5391,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair.Wide",
    "timestamp": 5394,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime.Wide",
    "timestamp": 5397,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic.Wide",
    "timestamp": 5399,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct.Wide",
    "timestamp": 5402,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread.Wide",
    "timestamp": 5405,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual.Wide",
    "timestamp": 5408,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict.Wide",
    "timestamp": 5411,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan.Wide",
    "timestamp": 5414,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan.Wide",
    "timestamp": 5417,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual.Wide",
    "timestamp": 5420,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual.Wide",
    "timestamp": 5423,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual.Wide",
    "timestamp": 5426,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf.Wide",
    "timestamp": 5429,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn.Wide",
    "timestamp": 5432,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName.Wide",
    "timestamp": 5434,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber.Wide",
    "timestamp": 5437,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric.Wide",
    "timestamp": 5439,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject.Wide",
    "timestamp": 5442,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral.Wide",
    "timestamp": 5445,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral.Wide",
    "timestamp": 5448,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral.Wide",
    "timestamp": 5451,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral.Wide",
    "timestamp": 5454,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject.Wide",
    "timestamp": 5457,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject.Wide",
    "timestamp": 5460,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure.Wide",
    "timestamp": 5463,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext.Wide",
    "timestamp": 5465,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext.Wide",
    "timestamp": 5468,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext.Wide",
    "timestamp": 5471,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext.Wide",
    "timestamp": 5475,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext.Wide",
    "timestamp": 5478,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop.Wide",
    "timestamp": 5481,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump.Wide",
    "timestamp": 5483,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant.Wide",
    "timestamp": 5486,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant.Wide",
    "timestamp": 5489,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant.Wide",
    "timestamp": 5492,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant.Wide",
    "timestamp": 5495,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant.Wide",
    "timestamp": 5498,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNullConstant.Wide",
    "timestamp": 5501,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant.Wide",
    "timestamp": 5505,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant.Wide",
    "timestamp": 5508,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant.Wide",
    "timestamp": 5512,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant.Wide",
    "timestamp": 5515,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant.Wide",
    "timestamp": 5518,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue.Wide",
    "timestamp": 5522,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse.Wide",
    "timestamp": 5525,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue.Wide",
    "timestamp": 5528,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse.Wide",
    "timestamp": 5530,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull.Wide",
    "timestamp": 5533,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull.Wide",
    "timestamp": 5536,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined.Wide",
    "timestamp": 5539,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined.Wide",
    "timestamp": 5542,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNull.Wide",
    "timestamp": 5545,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver.Wide",
    "timestamp": 5548,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback.Wide",
    "timestamp": 5551,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate.Wide",
    "timestamp": 5554,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare.Wide",
    "timestamp": 5557,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue.Wide",
    "timestamp": 5560,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext.Wide",
    "timestamp": 5562,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep.Wide",
    "timestamp": 5565,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole.Wide",
    "timestamp": 5568,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState.Wide",
    "timestamp": 5571,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator.Wide",
    "timestamp": 5574,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator.Wide",
    "timestamp": 5577,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetIterator.Wide",
    "timestamp": 5580,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter.Wide",
    "timestamp": 5583,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort.Wide",
    "timestamp": 5586,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1.ExtraWide",
    "timestamp": 5588,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2.ExtraWide",
    "timestamp": 5591,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3.ExtraWide",
    "timestamp": 5594,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4.ExtraWide",
    "timestamp": 5597,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5.ExtraWide",
    "timestamp": 5600,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6.ExtraWide",
    "timestamp": 5603,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi.ExtraWide",
    "timestamp": 5606,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant.ExtraWide",
    "timestamp": 5609,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal.ExtraWide",
    "timestamp": 5612,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof.ExtraWide",
    "timestamp": 5614,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal.ExtraWide",
    "timestamp": 5618,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext.ExtraWide",
    "timestamp": 5621,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext.ExtraWide",
    "timestamp": 5624,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot.ExtraWide",
    "timestamp": 5627,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot.ExtraWide",
    "timestamp": 5630,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot.ExtraWide",
    "timestamp": 5633,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot.ExtraWide",
    "timestamp": 5636,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot.ExtraWide",
    "timestamp": 5641,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot.ExtraWide",
    "timestamp": 5645,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot.ExtraWide",
    "timestamp": 5648,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot.ExtraWide",
    "timestamp": 5651,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot.ExtraWide",
    "timestamp": 5655,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof.ExtraWide",
    "timestamp": 5658,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof.ExtraWide",
    "timestamp": 5661,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof.ExtraWide",
    "timestamp": 5665,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot.ExtraWide",
    "timestamp": 5669,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar.ExtraWide",
    "timestamp": 5673,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star.ExtraWide",
    "timestamp": 5675,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov.ExtraWide",
    "timestamp": 5678,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedProperty.ExtraWide",
    "timestamp": 5695,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedPropertyNoFeedback.ExtraWide",
    "timestamp": 5698,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaKeyedProperty.ExtraWide",
    "timestamp": 5702,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable.ExtraWide",
    "timestamp": 5706,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable.ExtraWide",
    "timestamp": 5709,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedProperty.ExtraWide",
    "timestamp": 5712,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedPropertyNoFeedback.ExtraWide",
    "timestamp": 5715,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedOwnProperty.ExtraWide",
    "timestamp": 5719,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaKeyedProperty.ExtraWide",
    "timestamp": 5725,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral.ExtraWide",
    "timestamp": 5728,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaDataPropertyInLiteral.ExtraWide",
    "timestamp": 5734,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile.ExtraWide",
    "timestamp": 5738,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add.ExtraWide",
    "timestamp": 5744,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub.ExtraWide",
    "timestamp": 5747,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul.ExtraWide",
    "timestamp": 5753,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div.ExtraWide",
    "timestamp": 5756,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod.ExtraWide",
    "timestamp": 5758,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp.ExtraWide",
    "timestamp": 5762,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr.ExtraWide",
    "timestamp": 5767,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor.ExtraWide",
    "timestamp": 5771,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd.ExtraWide",
    "timestamp": 5774,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft.ExtraWide",
    "timestamp": 5777,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight.ExtraWide",
    "timestamp": 5780,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical.ExtraWide",
    "timestamp": 5783,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi.ExtraWide",
    "timestamp": 5787,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi.ExtraWide",
    "timestamp": 5813,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi.ExtraWide",
    "timestamp": 5820,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi.ExtraWide",
    "timestamp": 5823,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi.ExtraWide",
    "timestamp": 5826,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi.ExtraWide",
    "timestamp": 5829,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi.ExtraWide",
    "timestamp": 5832,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi.ExtraWide",
    "timestamp": 5835,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi.ExtraWide",
    "timestamp": 5838,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi.ExtraWide",
    "timestamp": 5842,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi.ExtraWide",
    "timestamp": 5845,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi.ExtraWide",
    "timestamp": 5848,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc.ExtraWide",
    "timestamp": 5852,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec.ExtraWide",
    "timestamp": 5855,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate.ExtraWide",
    "timestamp": 5858,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot.ExtraWide",
    "timestamp": 5861,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict.ExtraWide",
    "timestamp": 5864,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy.ExtraWide",
    "timestamp": 5867,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor.ExtraWide",
    "timestamp": 5883,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver.ExtraWide",
    "timestamp": 5887,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty.ExtraWide",
    "timestamp": 5891,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0.ExtraWide",
    "timestamp": 5894,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1.ExtraWide",
    "timestamp": 5897,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2.ExtraWide",
    "timestamp": 5901,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver.ExtraWide",
    "timestamp": 5904,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0.ExtraWide",
    "timestamp": 5907,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1.ExtraWide",
    "timestamp": 5911,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2.ExtraWide",
    "timestamp": 5915,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallNoFeedback.ExtraWide",
    "timestamp": 5918,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread.ExtraWide",
    "timestamp": 5921,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime.ExtraWide",
    "timestamp": 5928,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair.ExtraWide",
    "timestamp": 5931,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime.ExtraWide",
    "timestamp": 5934,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic.ExtraWide",
    "timestamp": 5937,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct.ExtraWide",
    "timestamp": 5941,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread.ExtraWide",
    "timestamp": 5944,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual.ExtraWide",
    "timestamp": 5947,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict.ExtraWide",
    "timestamp": 5950,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan.ExtraWide",
    "timestamp": 5953,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan.ExtraWide",
    "timestamp": 5956,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual.ExtraWide",
    "timestamp": 5959,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual.ExtraWide",
    "timestamp": 5962,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual.ExtraWide",
    "timestamp": 5966,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf.ExtraWide",
    "timestamp": 5969,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn.ExtraWide",
    "timestamp": 5972,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName.ExtraWide",
    "timestamp": 5975,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber.ExtraWide",
    "timestamp": 5978,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric.ExtraWide",
    "timestamp": 5980,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject.ExtraWide",
    "timestamp": 5983,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral.ExtraWide",
    "timestamp": 5986,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral.ExtraWide",
    "timestamp": 5989,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral.ExtraWide",
    "timestamp": 5993,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral.ExtraWide",
    "timestamp": 5996,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject.ExtraWide",
    "timestamp": 5999,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject.ExtraWide",
    "timestamp": 6002,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure.ExtraWide",
    "timestamp": 6005,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext.ExtraWide",
    "timestamp": 6008,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext.ExtraWide",
    "timestamp": 6012,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext.ExtraWide",
    "timestamp": 6015,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext.ExtraWide",
    "timestamp": 6018,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext.ExtraWide",
    "timestamp": 6021,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop.ExtraWide",
    "timestamp": 6024,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump.ExtraWide",
    "timestamp": 6027,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant.ExtraWide",
    "timestamp": 6030,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant.ExtraWide",
    "timestamp": 6033,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant.ExtraWide",
    "timestamp": 6036,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant.ExtraWide",
    "timestamp": 6040,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant.ExtraWide",
    "timestamp": 6043,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNullConstant.ExtraWide",
    "timestamp": 6046,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant.ExtraWide",
    "timestamp": 6050,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant.ExtraWide",
    "timestamp": 6053,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant.ExtraWide",
    "timestamp": 6056,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant.ExtraWide",
    "timestamp": 6060,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant.ExtraWide",
    "timestamp": 6063,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue.ExtraWide",
    "timestamp": 6067,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse.ExtraWide",
    "timestamp": 6070,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue.ExtraWide",
    "timestamp": 6073,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse.ExtraWide",
    "timestamp": 6076,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull.ExtraWide",
    "timestamp": 6079,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull.ExtraWide",
    "timestamp": 6082,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined.ExtraWide",
    "timestamp": 6085,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined.ExtraWide",
    "timestamp": 6088,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNull.ExtraWide",
    "timestamp": 6091,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver.ExtraWide",
    "timestamp": 6096,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback.ExtraWide",
    "timestamp": 6099,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate.ExtraWide",
    "timestamp": 6102,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare.ExtraWide",
    "timestamp": 6105,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue.ExtraWide",
    "timestamp": 6108,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext.ExtraWide",
    "timestamp": 6111,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep.ExtraWide",
    "timestamp": 6114,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole.ExtraWide",
    "timestamp": 6117,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState.ExtraWide",
    "timestamp": 6121,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator.ExtraWide",
    "timestamp": 6124,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator.ExtraWide",
    "timestamp": 6127,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetIterator.ExtraWide",
    "timestamp": 6130,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter.ExtraWide",
    "timestamp": 6133,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort.ExtraWide",
    "timestamp": 6136,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 0,
    "tm": 7135
  },
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 1,
    "tm": 7142
  },
  {
    "name": "<static_fields_initializer> internal/bootstrap/loaders.js:170:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 2,
    "tm": 7146
  },
  {
    "name": "SafeSet internal/per_context/primordials.js:353:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 3,
    "tm": 7361
  },
  {
    "name": "internalBinding internal/bootstrap/loaders.js:138:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 4,
    "tm": 7418
  },
  {
    "name": " internal/bootstrap/loaders.js:171:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 5,
    "tm": 7481
  },
  {
    "name": "NativeModule internal/bootstrap/loaders.js:174:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 6,
    "tm": 7500
  },
  {
    "name": "SafeMap internal/per_context/primordials.js:341:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 7,
    "tm": 7583
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 8,
    "tm": 7776
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 9,
    "tm": 7780
  },
  {
    "name": "setupPrepareStackTrace internal/bootstrap/node.js:254:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 10,
    "tm": 7838
  },
  {
    "name": "nativeModuleRequire internal/bootstrap/loaders.js:306:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 11,
    "tm": 7866
  },
  {
    "name": "compileForInternalLoader internal/bootstrap/loaders.js:273:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 12,
    "tm": 7892
  },
  {
    "name": " internal/errors.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 13,
    "tm": 8946
  },
  {
    "name": " internal/errors.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 14,
    "tm": 8952
  },
  {
    "name": "SafeWeakMap internal/per_context/primordials.js:347:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 15,
    "tm": 9100
  },
  {
    "name": "hideStackFrames internal/errors.js:333:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 16,
    "tm": 9170
  },
  {
    "name": "E internal/errors.js:343:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 17,
    "tm": 9224
  },
  {
    "name": "makeNodeErrorWithCode internal/errors.js:307:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 18,
    "tm": 9240
  },
  {
    "name": "makeSystemErrorWithCode internal/errors.js:299:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 19,
    "tm": 9305
  },
  {
    "name": " internal/errors.js:354:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 20,
    "tm": 9334
  },
  {
    "name": " internal/util.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 21,
    "tm": 9741
  },
  {
    "name": " internal/util.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 22,
    "tm": 9746
  },
  {
    "name": "setupProcessObject internal/bootstrap/node.js:273:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 23,
    "tm": 10192
  },
  {
    "name": " events.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 24,
    "tm": 10533
  },
  {
    "name": " events.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 25,
    "tm": 10537
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 26,
    "tm": 11397
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 27,
    "tm": 11405
  },
  {
    "name": " internal/util/types.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 28,
    "tm": 11575
  },
  {
    "name": " internal/util/types.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 29,
    "tm": 11581
  },
  {
    "name": " internal/assert.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 30,
    "tm": 11661
  },
  {
    "name": " internal/assert.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 31,
    "tm": 11666
  },
  {
    "name": " internal/util/inspect.js:131:5",
    "type": "JS",
    "kind": "Unopt",
    "func": 32,
    "tm": 11808
  },
  {
    "name": "^[A-Z][a-zA-Z0-9]+$",
    "timestamp": 11921,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "defineColorAlias internal/util/inspect.js:388:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 33,
    "tm": 12049
  },
  {
    "name": " internal/validators.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 34,
    "tm": 12234
  },
  {
    "name": " internal/validators.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 35,
    "tm": 12239
  },
  {
    "name": "EventEmitter events.js:87:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 36,
    "tm": 12382
  },
  {
    "name": "EventEmitter.init events.js:202:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 37,
    "tm": 12414
  },
  {
    "name": "setupGlobalProxy internal/bootstrap/node.js:293:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 38,
    "tm": 12440
  },
  {
    "name": "setupBuffer internal/bootstrap/node.js:302:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 39,
    "tm": 12461
  },
  {
    "name": " buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 40,
    "tm": 12961
  },
  {
    "name": " buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 41,
    "tm": 12966
  },
  {
    "name": " internal/buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 42,
    "tm": 13514
  },
  {
    "name": " internal/buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 43,
    "tm": 13519
  },
  {
    "name": " internal/blob.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 44,
    "tm": 13701
  },
  {
    "name": " internal/blob.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 45,
    "tm": 13705
  },
  {
    "name": " internal/encoding.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 46,
    "tm": 13975
  },
  {
    "name": " internal/encoding.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 47,
    "tm": 13982
  },
  {
    "name": "makeTextDecoderICU internal/encoding.js:372:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 48,
    "tm": 14175
  },
  {
    "name": " internal/worker/js_transferable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 49,
    "tm": 14239
  },
  {
    "name": " internal/worker/js_transferable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 50,
    "tm": 14244
  },
  {
    "name": "addBufferPrototypeMethods internal/buffer.js:962:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 51,
    "tm": 14430
  },
  {
    "name": "createPool buffer.js:162:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 52,
    "tm": 14506
  },
  {
    "name": "createUnsafeBuffer buffer.js:153:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 53,
    "tm": 14522
  },
  {
    "name": "FastBuffer internal/buffer.js:957:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 54,
    "tm": 14535
  },
  {
    "name": "markAsUntransferable internal/buffer.js:1047:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 55,
    "tm": 14567
  },
  {
    "name": "setup internal/worker/js_transferable.js:17:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 56,
    "tm": 14799
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 57,
    "tm": 14931
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 58,
    "tm": 14936
  },
  {
    "name": "wrapProcessMethods internal/process/per_thread.js:44:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 59,
    "tm": 15051
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 60,
    "tm": 15300
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 61,
    "tm": 15304
  },
  {
    "name": "emitHookFactory internal/async_hooks.js:253:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 62,
    "tm": 15463
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 63,
    "tm": 15610
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 64,
    "tm": 15614
  },
  {
    "name": " internal/process/promises.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 65,
    "tm": 15745
  },
  {
    "name": " internal/process/promises.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 66,
    "tm": 15749
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 67,
    "tm": 15828
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 15832
  },
  {
    "name": " async_hooks.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 69,
    "tm": 16000
  },
  {
    "name": " async_hooks.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 70,
    "tm": 16006
  },
  {
    "name": "createHook async_hooks.js:144:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 71,
    "tm": 16067
  },
  {
    "name": "AsyncHook async_hooks.js:66:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 72,
    "tm": 16091
  },
  {
    "name": "FixedQueue internal/fixed_queue.js:91:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 73,
    "tm": 16118
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:60:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 74,
    "tm": 16130
  },
  {
    "name": "createGlobalConsole internal/bootstrap/node.js:319:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 75,
    "tm": 16176
  },
  {
    "name": " internal/console/global.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 76,
    "tm": 16224
  },
  {
    "name": " internal/console/global.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 77,
    "tm": 16229
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 78,
    "tm": 16543
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 79,
    "tm": 16550
  },
  {
    "name": " internal/constants.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 80,
    "tm": 16666
  },
  {
    "name": " internal/constants.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 81,
    "tm": 16672
  },
  {
    "name": "value internal/console/constructor.js:200:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 82,
    "tm": 16861
  },
  {
    "name": "value internal/console/constructor.js:227:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 83,
    "tm": 16902
  },
  {
    "name": "createWriteErrorHandler internal/console/constructor.js:342:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 84,
    "tm": 16922
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 85,
    "tm": 16989
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 86,
    "tm": 16993
  },
  {
    "name": "set consoleFromVM internal/util/inspector.js:65:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 87,
    "tm": 17025
  },
  {
    "name": "wrapConsole internal/util/inspector.js:36:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 88,
    "tm": 17050
  },
  {
    "name": "exposeNamespace internal/bootstrap/node.js:337:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 89,
    "tm": 17146
  },
  {
    "name": " internal/url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 90,
    "tm": 17708
  },
  {
    "name": " internal/url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 91,
    "tm": 17714
  },
  {
    "name": " internal/querystring.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 92,
    "tm": 17892
  },
  {
    "name": " internal/querystring.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 93,
    "tm": 17899
  },
  {
    "name": " path.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 94,
    "tm": 18756
  },
  {
    "name": " path.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 95,
    "tm": 18762
  },
  {
    "name": "defineIDLClass internal/url.js:875:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 96,
    "tm": 18952
  },
  {
    "name": "exposeInterface internal/bootstrap/node.js:347:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 97,
    "tm": 19013
  },
  {
    "name": " timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 98,
    "tm": 19149
  },
  {
    "name": " timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 99,
    "tm": 19153
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 100,
    "tm": 19243
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 101,
    "tm": 19250
  },
  {
    "name": " internal/timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 102,
    "tm": 19491
  },
  {
    "name": " internal/timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 103,
    "tm": 19497
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 104,
    "tm": 19607
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 105,
    "tm": 19612
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 106,
    "tm": 19690
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 107,
    "tm": 19694
  },
  {
    "name": "debuglog internal/util/debuglog.js:70:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 108,
    "tm": 19744
  },
  {
    "name": "ImmediateList internal/timers.js:260:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 109,
    "tm": 19786
  },
  {
    "name": "PriorityQueue internal/priority_queue.js:20:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 110,
    "tm": 19812
  },
  {
    "name": "deprecate internal/util.js:90:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 111,
    "tm": 19893
  },
  {
    "name": "validateString internal/validators.js:122:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 112,
    "tm": 19914
  },
  {
    "name": "defineOperation internal/bootstrap/node.js:357:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 113,
    "tm": 19941
  },
  {
    "name": " internal/process/execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 114,
    "tm": 20054
  },
  {
    "name": " internal/process/execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 115,
    "tm": 20058
  },
  {
    "name": "createOnGlobalUncaughtException internal/process/execution.js:138:41",
    "type": "JS",
    "kind": "Unopt",
    "func": 116,
    "tm": 20117
  },
  {
    "name": " internal/process/warning.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 117,
    "tm": 20199
  },
  {
    "name": " internal/process/warning.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 118,
    "tm": 20204
  },
  {
    "name": "setupTaskQueue internal/process/task_queues.js:165:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 119,
    "tm": 20255
  },
  {
    "name": "listenForRejections internal/process/promises.js:291:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 120,
    "tm": 20276
  },
  {
    "name": "getTimerCallbacks internal/timers.js:415:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 121,
    "tm": 20299
  },
  {
    "name": " internal/bootstrap/switches/is_main_thread.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 122,
    "tm": 20396
  },
  {
    "name": " internal/bootstrap/switches/is_main_thread.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 123,
    "tm": 20401
  },
  {
    "name": "defineStream internal/bootstrap/switches/is_main_thread.js:16:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 124,
    "tm": 20443
  },
  {
    "name": " internal/process/signal.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 125,
    "tm": 20488
  },
  {
    "name": " internal/process/signal.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 126,
    "tm": 20492
  },
  {
    "name": "addListener events.js:496:58",
    "type": "JS",
    "kind": "Unopt",
    "func": 127,
    "tm": 20520
  },
  {
    "name": "_addListener events.js:428:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 128,
    "tm": 20587
  },
  {
    "name": "checkListener events.js:133:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 129,
    "tm": 20600
  },
  {
    "name": "emit events.js:349:44",
    "type": "JS",
    "kind": "Unopt",
    "func": 130,
    "tm": 20658
  },
  {
    "name": "startListeningIfSignal internal/process/signal.js:21:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 131,
    "tm": 20685
  },
  {
    "name": "isSignal internal/process/signal.js:16:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 132,
    "tm": 20697
  },
  {
    "name": " internal/bootstrap/switches/does_own_process_state.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 133,
    "tm": 20763
  },
  {
    "name": " internal/bootstrap/switches/does_own_process_state.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 134,
    "tm": 20768
  },
  {
    "name": "wrapPosixCredentialSetters internal/bootstrap/switches/does_own_process_state.js:30:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 135,
    "tm": 20821
  },
  {
    "name": "wrapIdSetter internal/bootstrap/switches/does_own_process_state.js:80:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 136,
    "tm": 20840
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 137,
    "tm": 20884
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 138,
    "tm": 20889
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 139,
    "tm": 21078
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 140,
    "tm": 21082
  },
  {
    "name": " internal/options.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 141,
    "tm": 21149
  },
  {
    "name": " internal/options.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 142,
    "tm": 21153
  },
  {
    "name": "prepareMainThreadExecution internal/bootstrap/pre_execution.js:21:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 143,
    "tm": 21244
  },
  {
    "name": "patchProcessObject internal/bootstrap/pre_execution.js:76:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 144,
    "tm": 21281
  },
  {
    "name": "resolve path.js:1067:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 145,
    "tm": 21374
  },
  {
    "name": "wrappedCwd internal/bootstrap/switches/does_own_process_state.js:128:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 146,
    "tm": 21390
  },
  {
    "name": "normalizeString path.js:59:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 147,
    "tm": 21449
  },
  {
    "name": "isPosixPathSeparator path.js:49:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 148,
    "tm": 21463
  },
  {
    "name": "addReadOnlyProcessAlias internal/bootstrap/pre_execution.js:116:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 149,
    "tm": 21492
  },
  {
    "name": "getOptionValue internal/options.js:28:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 150,
    "tm": 21512
  },
  {
    "name": "getOptionsFromBinding internal/options.js:14:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 151,
    "tm": 21523
  },
  {
    "name": "setupTraceCategoryState internal/bootstrap/pre_execution.js:208:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 152,
    "tm": 21659
  },
  {
    "name": "toggleTraceCategoryState internal/process/per_thread.js:357:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 153,
    "tm": 21679
  },
  {
    "name": "setupInspectorHooks internal/bootstrap/pre_execution.js:214:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 154,
    "tm": 21694
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 155,
    "tm": 21747
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 156,
    "tm": 21751
  },
  {
    "name": "setupWarningHandler internal/bootstrap/pre_execution.js:128:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 157,
    "tm": 21787
  },
  {
    "name": "setupDebugEnv internal/bootstrap/pre_execution.js:180:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 158,
    "tm": 21809
  },
  {
    "name": "initializeDebugEnv internal/util/debuglog.js:23:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 159,
    "tm": 21831
  },
  {
    "name": "setupStacktracePrinterOnSigint internal/bootstrap/pre_execution.js:159:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 160,
    "tm": 21847
  },
  {
    "name": "initializeReport internal/bootstrap/pre_execution.js:169:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 161,
    "tm": 21863
  },
  {
    "name": " internal/process/report.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 162,
    "tm": 21939
  },
  {
    "name": " internal/process/report.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 163,
    "tm": 21944
  },
  {
    "name": "initializeReportSignalHandlers internal/bootstrap/pre_execution.js:188:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 164,
    "tm": 22013
  },
  {
    "name": "addSignalHandler internal/process/report.js:99:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 165,
    "tm": 22032
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers internal/bootstrap/pre_execution.js:194:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 166,
    "tm": 22049
  },
  {
    "name": "setupChildProcessIpcChannel internal/bootstrap/pre_execution.js:343:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 167,
    "tm": 22073
  },
  {
    "name": "initializePolicy internal/bootstrap/pre_execution.js:371:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 168,
    "tm": 22122
  },
  {
    "name": "initializeClusterIPC internal/bootstrap/pre_execution.js:362:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 169,
    "tm": 22138
  },
  {
    "name": "initializeAbortController internal/bootstrap/pre_execution.js:319:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 170,
    "tm": 22157
  },
  {
    "name": "initializeSourceMapsHandlers internal/bootstrap/pre_execution.js:452:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 171,
    "tm": 22170
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 172,
    "tm": 22392
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 173,
    "tm": 22397
  },
  {
    "name": " fs.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 174,
    "tm": 23205
  },
  {
    "name": " fs.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 175,
    "tm": 23210
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 176,
    "tm": 23746
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 177,
    "tm": 23750
  },
  {
    "name": "from buffer.js:307:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 178,
    "tm": 23872
  },
  {
    "name": "fromString buffer.js:445:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 179,
    "tm": 23892
  },
  {
    "name": "fromStringFast buffer.js:426:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 180,
    "tm": 23917
  },
  {
    "name": "write buffer.js:608:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 181,
    "tm": 23931
  },
  {
    "name": "alignPool buffer.js:170:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 182,
    "tm": 23945
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 183,
    "tm": 24608
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 184,
    "tm": 24615
  },
  {
    "name": " internal/util/iterable_weak_map.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 185,
    "tm": 24882
  },
  {
    "name": " internal/util/iterable_weak_map.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 186,
    "tm": 24887
  },
  {
    "name": "<instance_members_initializer> internal/util/iterable_weak_map.js:29:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 187,
    "tm": 24892
  },
  {
    "name": "makeSafe internal/per_context/primordials.js:299:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 188,
    "tm": 24955
  },
  {
    "name": "copyProps internal/per_context/primordials.js:288:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 189,
    "tm": 24971
  },
  {
    "name": " internal/per_context/primordials.js:289:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 190,
    "tm": 24987
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 191,
    "tm": 25107
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 192,
    "tm": 25111
  },
  {
    "name": "IterableWeakMap internal/util/iterable_weak_map.js:28:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 193,
    "tm": 25162
  },
  {
    "name": "SafeFinalizationRegistry internal/util/iterable_weak_map.js:15:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 194,
    "tm": 25176
  },
  {
    "name": "initializeDeprecations internal/bootstrap/pre_execution.js:232:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 195,
    "tm": 25237
  },
  {
    "name": "initializeWASI internal/bootstrap/pre_execution.js:420:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 196,
    "tm": 25266
  },
  {
    "name": "initializeCJSLoader internal/bootstrap/pre_execution.js:427:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 197,
    "tm": 25286
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 198,
    "tm": 25774
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 199,
    "tm": 25779
  },
  {
    "name": " vm.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 200,
    "tm": 26045
  },
  {
    "name": " vm.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 201,
    "tm": 26050
  },
  {
    "name": " internal/modules/package_json_reader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 202,
    "tm": 26156
  },
  {
    "name": " internal/modules/package_json_reader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 203,
    "tm": 26161
  },
  {
    "name": " url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 204,
    "tm": 26515
  },
  {
    "name": " url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 205,
    "tm": 26519
  },
  {
    "name": " internal/idna.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 206,
    "tm": 26577
  },
  {
    "name": " internal/idna.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 207,
    "tm": 26581
  },
  {
    "name": " internal/process/esm_loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 208,
    "tm": 26685
  },
  {
    "name": " internal/process/esm_loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 209,
    "tm": 26690
  },
  {
    "name": " internal/modules/esm/loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 210,
    "tm": 27246
  },
  {
    "name": " internal/modules/esm/loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 211,
    "tm": 27250
  },
  {
    "name": " internal/modules/esm/module_map.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 212,
    "tm": 27306
  },
  {
    "name": " internal/modules/esm/module_map.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 213,
    "tm": 27311
  },
  {
    "name": " internal/modules/esm/module_job.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 214,
    "tm": 27724
  },
  {
    "name": " internal/modules/esm/module_job.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 215,
    "tm": 27730
  },
  {
    "name": " internal/modules/esm/resolve.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 216,
    "tm": 28121
  },
  {
    "name": " internal/modules/esm/resolve.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 217,
    "tm": 28126
  },
  {
    "name": " internal/modules/esm/get_format.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 218,
    "tm": 28237
  },
  {
    "name": " internal/modules/esm/get_format.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 219,
    "tm": 28241
  },
  {
    "name": " internal/modules/esm/get_source.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 220,
    "tm": 28302
  },
  {
    "name": " internal/modules/esm/get_source.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 221,
    "tm": 28312
  },
  {
    "name": " internal/fs/promises.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 222,
    "tm": 28635
  },
  {
    "name": " internal/fs/promises.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 223,
    "tm": 28639
  },
  {
    "name": "<instance_members_initializer> internal/fs/promises.js:171:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 224,
    "tm": 28643
  },
  {
    "name": " internal/fs/rimraf.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 225,
    "tm": 28820
  },
  {
    "name": " internal/fs/rimraf.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 226,
    "tm": 28824
  },
  {
    "name": " internal/fs/watchers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 227,
    "tm": 29022
  },
  {
    "name": " internal/fs/watchers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 228,
    "tm": 29026
  },
  {
    "name": " internal/streams/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 229,
    "tm": 29187
  },
  {
    "name": " internal/streams/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 230,
    "tm": 29192
  },
  {
    "name": "promisify internal/util.js:317:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 231,
    "tm": 29239
  },
  {
    "name": " internal/validators.js:235:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 232,
    "tm": 29254
  },
  {
    "name": " internal/modules/esm/transform_source.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 233,
    "tm": 29346
  },
  {
    "name": " internal/modules/esm/transform_source.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 234,
    "tm": 29351
  },
  {
    "name": " internal/modules/esm/translators.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 235,
    "tm": 29531
  },
  {
    "name": " internal/modules/esm/translators.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 236,
    "tm": 29536
  },
  {
    "name": " internal/modules/esm/create_dynamic_module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 237,
    "tm": 29617
  },
  {
    "name": " internal/modules/esm/create_dynamic_module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 238,
    "tm": 29622
  },
  {
    "name": " internal/vm/module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 239,
    "tm": 29838
  },
  {
    "name": " internal/vm/module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 240,
    "tm": 29842
  },
  {
    "name": "<instance_members_initializer> internal/vm/module.js:262:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 241,
    "tm": 29846
  },
  {
    "name": "Loader internal/modules/esm/loader.js:45:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 242,
    "tm": 29949
  },
  {
    "name": "ModuleMap internal/modules/esm/module_map.js:14:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 243,
    "tm": 29966
  },
  {
    "name": "desc.value internal/per_context/primordials.js:315:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 244,
    "tm": 29988
  },
  {
    "name": "SafeIterator internal/per_context/primordials.js:263:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 245,
    "tm": 29999
  },
  {
    "name": "next internal/per_context/primordials.js:266:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 246,
    "tm": 30012
  },
  {
    "name": "Module._initPaths internal/modules/cjs/loader.js:1195:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 247,
    "tm": 30177
  },
  {
    "name": " internal/modules/run_main.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 248,
    "tm": 30250
  },
  {
    "name": " internal/modules/run_main.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 249,
    "tm": 30254
  },
  {
    "name": "initializeESMLoader internal/bootstrap/pre_execution.js:435:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 250,
    "tm": 30291
  },
  {
    "name": "get hasLoadedAnyUserCJSModule internal/modules/cjs/loader.js:71:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 251,
    "tm": 30307
  },
  {
    "name": "assert internal/assert.js:11:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 252,
    "tm": 30321
  },
  {
    "name": "loadPreloadModules internal/bootstrap/pre_execution.js:466:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 253,
    "tm": 30336
  },
  {
    "name": "Module._preloadModules internal/modules/cjs/loader.js:1225:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 254,
    "tm": 30363
  },
  {
    "name": "Module internal/modules/cjs/loader.js:163:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 255,
    "tm": 30383
  },
  {
    "name": "dirname path.js:1247:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 256,
    "tm": 30414
  },
  {
    "name": "updateChildren internal/modules/cjs/loader.js:157:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 257,
    "tm": 30433
  },
  {
    "name": "Module._nodeModulePaths internal/modules/cjs/loader.js:597:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 258,
    "tm": 30466
  },
  {
    "name": "Module.require internal/modules/cjs/loader.js:966:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 259,
    "tm": 30504
  },
  {
    "name": "Module._load internal/modules/cjs/loader.js:725:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 260,
    "tm": 30573
  },
  {
    "name": "logger internal/util/debuglog.js:90:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 261,
    "tm": 30586
  },
  {
    "name": " internal/per_context/primordials.js:269:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 262,
    "tm": 30599
  },
  {
    "name": "debug internal/util/debuglog.js:75:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 263,
    "tm": 30629
  },
  {
    "name": "init internal/util/debuglog.js:71:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 264,
    "tm": 30644
  },
  {
    "name": "debuglogImpl internal/util/debuglog.js:48:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 265,
    "tm": 30687
  },
  {
    "name": " internal/modules/cjs/loader.js:240:66",
    "type": "JS",
    "kind": "Unopt",
    "func": 266,
    "tm": 30701
  },
  {
    "name": "noop internal/util/debuglog.js:46:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 267,
    "tm": 30713
  },
  {
    "name": "Module._resolveFilename internal/modules/cjs/loader.js:816:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 268,
    "tm": 30794
  },
  {
    "name": "canBeRequiredByUsers internal/bootstrap/loaders.js:214:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 269,
    "tm": 30810
  },
  {
    "name": "Module._resolveLookupPaths internal/modules/cjs/loader.js:635:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 270,
    "tm": 30845
  },
  {
    "name": "trySelfParentPath internal/modules/cjs/loader.js:395:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 271,
    "tm": 30867
  },
  {
    "name": "trySelf internal/modules/cjs/loader.js:409:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 272,
    "tm": 30898
  },
  {
    "name": "readPackageScope internal/modules/cjs/loader.js:289:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 273,
    "tm": 30921
  },
  {
    "name": "readPackage internal/modules/cjs/loader.js:258:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 274,
    "tm": 30954
  },
  {
    "name": "read internal/modules/package_json_reader.js:16:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 275,
    "tm": 31003
  },
  {
    "name": "toNamespacedPath path.js:1238:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 276,
    "tm": 31016
  },
  {
    "name": "Module._findPath internal/modules/cjs/loader.js:462:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 277,
    "tm": 31158
  },
  {
    "name": "isAbsolute path.js:1132:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 278,
    "tm": 31172
  },
  {
    "name": "stat internal/modules/cjs/loader.js:146:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 279,
    "tm": 31233
  },
  {
    "name": "tryExtensions internal/modules/cjs/loader.js:368:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 280,
    "tm": 31267
  },
  {
    "name": "tryFile internal/modules/cjs/loader.js:352:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 281,
    "tm": 31282
  },
  {
    "name": "toRealPath internal/modules/cjs/loader.js:361:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 282,
    "tm": 31298
  },
  {
    "name": "realpathSync fs.js:1722:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 283,
    "tm": 31469
  },
  {
    "name": "getOptions internal/fs/utils.js:305:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 284,
    "tm": 31518
  },
  {
    "name": "assertEncoding internal/fs/utils.js:143:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 285,
    "tm": 31531
  },
  {
    "name": "toPathIfFileURL internal/url.js:1449:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 286,
    "tm": 31542
  },
  {
    "name": "isURLInstance internal/url.js:1445:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 287,
    "tm": 31553
  },
  {
    "name": " internal/fs/utils.js:650:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 288,
    "tm": 31570
  },
  {
    "name": " internal/fs/utils.js:345:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 289,
    "tm": 31589
  },
  {
    "name": "isUint8Array internal/util/types.js:12:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 290,
    "tm": 31600
  },
  {
    "name": "splitRoot fs.js:1685:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 291,
    "tm": 31627
  },
  {
    "name": "nextPart fs.js:1718:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 292,
    "tm": 31640
  },
  {
    "name": "handleErrorFromBinding internal/fs/utils.js:328:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 293,
    "tm": 31666
  },
  {
    "name": "isFileType fs.js:198:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 294,
    "tm": 31680
  },
  {
    "name": "encodeRealpathResult fs.js:1694:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 295,
    "tm": 31736
  },
  {
    "name": "loadNativeModule internal/modules/cjs/helpers.js:35:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 296,
    "tm": 31762
  },
  {
    "name": "Module.load internal/modules/cjs/loader.js:938:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 297,
    "tm": 31796
  },
  {
    "name": "findLongestRegisteredExtension internal/modules/cjs/loader.js:381:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 298,
    "tm": 31835
  },
  {
    "name": "basename path.js:1278:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 299,
    "tm": 31889
  },
  {
    "name": "Module._extensions..js internal/modules/cjs/loader.js:1094:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 300,
    "tm": 31932
  },
  {
    "name": "readFileSync fs.js:390:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 301,
    "tm": 32163
  },
  {
    "name": "isEncoding buffer.js:543:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 302,
    "tm": 32189
  },
  {
    "name": "normalizeEncoding internal/util.js:154:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 303,
    "tm": 32202
  },
  {
    "name": "isUint32 internal/validators.js:34:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 304,
    "tm": 32212
  },
  {
    "name": "openSync fs.js:488:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 305,
    "tm": 32231
  },
  {
    "name": " internal/fs/utils.js:662:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 306,
    "tm": 32247
  },
  {
    "name": "stringToFlags internal/fs/utils.js:538:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 307,
    "tm": 32295
  },
  {
    "name": "parseFileMode internal/validators.js:53:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 308,
    "tm": 32329
  },
  {
    "name": "tryStatSync fs.js:353:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 309,
    "tm": 32360
  },
  {
    "name": "tryCreateBuffer fs.js:363:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 310,
    "tm": 32381
  },
  {
    "name": "allocUnsafe buffer.js:386:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 311,
    "tm": 32391
  },
  {
    "name": " buffer.js:360:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 312,
    "tm": 32403
  },
  {
    "name": "allocate buffer.js:411:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 313,
    "tm": 32420
  },
  {
    "name": "tryReadSync fs.js:378:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 314,
    "tm": 32437
  },
  {
    "name": "readSync fs.js:578:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 315,
    "tm": 32465
  },
  {
    "name": " internal/validators.js:88:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 316,
    "tm": 32486
  },
  {
    "name": "isInt32 internal/validators.js:30:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 317,
    "tm": 32495
  },
  {
    "name": " internal/validators.js:190:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 318,
    "tm": 32508
  },
  {
    "name": " internal/validators.js:77:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 319,
    "tm": 32557
  },
  {
    "name": " internal/fs/utils.js:618:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 320,
    "tm": 32579
  },
  {
    "name": " internal/fs/utils.js:818:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 321,
    "tm": 32600
  },
  {
    "name": "closeSync fs.js:455:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 322,
    "tm": 32630
  },
  {
    "name": "toString buffer.js:798:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 323,
    "tm": 32661
  },
  {
    "name": "getEncodingOps buffer.js:694:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 324,
    "tm": 32700
  },
  {
    "name": "slice buffer.js:609:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 325,
    "tm": 32713
  },
  {
    "name": "Module._compile internal/modules/cjs/loader.js:1039:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 326,
    "tm": 32761
  },
  {
    "name": "maybeCacheSourceMap internal/source_map/source_map_cache.js:74:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 327,
    "tm": 32810
  },
  {
    "name": "getSourceMapsEnabled internal/source_map/source_map_cache.js:43:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 328,
    "tm": 32834
  },
  {
    "name": "setSourceMapsEnabled internal/source_map/source_map_cache.js:50:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 329,
    "tm": 32858
  },
  {
    "name": "validateBoolean internal/validators.js:147:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 330,
    "tm": 32870
  },
  {
    "name": "wrapSafe internal/modules/cjs/loader.js:986:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 331,
    "tm": 32915
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 332,
    "tm": 32939
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 333,
    "tm": 32946
  },
  {
    "name": "makeRequireFunction internal/modules/cjs/helpers.js:49:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 334,
    "tm": 32991
  },
  {
    "name": "require internal/modules/cjs/helpers.js:92:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 335,
    "tm": 33012
  },
  {
    "name": "^$",
    "timestamp": 33061,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": " internal/modules/cjs/helpers.js:28:66",
    "type": "JS",
    "kind": "Unopt",
    "func": 336,
    "tm": 33072
  },
  {
    "name": "compileForPublicLoader internal/bootstrap/loaders.js:220:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 337,
    "tm": 33093
  },
  {
    "name": " cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 338,
    "tm": 33120
  },
  {
    "name": " cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 339,
    "tm": 33124
  },
  {
    "name": " internal/cluster/master.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 340,
    "tm": 33432
  },
  {
    "name": " internal/cluster/master.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 341,
    "tm": 33438
  },
  {
    "name": " child_process.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 342,
    "tm": 33782
  },
  {
    "name": " child_process.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 343,
    "tm": 33788
  },
  {
    "name": " internal/child_process.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 344,
    "tm": 34306
  },
  {
    "name": " internal/child_process.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 345,
    "tm": 34313
  },
  {
    "name": "<instance_members_initializer> internal/child_process.js:516:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 346,
    "tm": 34317
  },
  {
    "name": " net.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 347,
    "tm": 34980
  },
  {
    "name": " net.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 348,
    "tm": 34985
  },
  {
    "name": " stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 349,
    "tm": 35131
  },
  {
    "name": " stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 350,
    "tm": 35135
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 351,
    "tm": 35622
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 352,
    "tm": 35628
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 353,
    "tm": 35736
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 354,
    "tm": 35745
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 355,
    "tm": 35850
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 356,
    "tm": 35854
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 357,
    "tm": 35915
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 358,
    "tm": 35919
  },
  {
    "name": " internal/streams/readable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 359,
    "tm": 36325
  },
  {
    "name": " internal/streams/readable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 360,
    "tm": 36332
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 361,
    "tm": 36508
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 362,
    "tm": 36517
  },
  {
    "name": " internal/streams/state.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 363,
    "tm": 36594
  },
  {
    "name": " internal/streams/state.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 364,
    "tm": 36598
  },
  {
    "name": " internal/streams/writable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 365,
    "tm": 36908
  },
  {
    "name": " internal/streams/writable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 366,
    "tm": 36913
  },
  {
    "name": " internal/streams/duplex.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 367,
    "tm": 37054
  },
  {
    "name": " internal/streams/duplex.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 368,
    "tm": 37064
  },
  {
    "name": " internal/streams/transform.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 369,
    "tm": 37208
  },
  {
    "name": " internal/streams/transform.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 370,
    "tm": 37214
  },
  {
    "name": " internal/streams/passthrough.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 371,
    "tm": 37288
  },
  {
    "name": " internal/streams/passthrough.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 372,
    "tm": 37293
  },
  {
    "name": " internal/net.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 373,
    "tm": 37398
  },
  {
    "name": " internal/net.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 374,
    "tm": 37403
  },
  {
    "name": " internal/stream_base_commons.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 375,
    "tm": 37627
  },
  {
    "name": " internal/stream_base_commons.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 376,
    "tm": 37633
  },
  {
    "name": " internal/dtrace.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 377,
    "tm": 37718
  },
  {
    "name": " internal/dtrace.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 378,
    "tm": 37723
  },
  {
    "name": "protoGetter net.js:719:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 379,
    "tm": 37824
  },
  {
    "name": " dgram.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 380,
    "tm": 38918
  },
  {
    "name": " dgram.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 381,
    "tm": 38924
  },
  {
    "name": " internal/dgram.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 382,
    "tm": 39058
  },
  {
    "name": " internal/dgram.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 383,
    "tm": 39062
  },
  {
    "name": " internal/socket_list.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 384,
    "tm": 39283
  },
  {
    "name": " internal/socket_list.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 385,
    "tm": 39289
  },
  {
    "name": "customPromiseExecFunction child_process.js:217:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 386,
    "tm": 39403
  },
  {
    "name": " internal/cluster/round_robin_handle.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 387,
    "tm": 39477
  },
  {
    "name": " internal/cluster/round_robin_handle.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 388,
    "tm": 39482
  },
  {
    "name": " internal/cluster/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 389,
    "tm": 39537
  },
  {
    "name": " internal/cluster/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 390,
    "tm": 39542
  },
  {
    "name": " internal/cluster/shared_handle.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 391,
    "tm": 39593
  },
  {
    "name": " internal/cluster/shared_handle.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 392,
    "tm": 39598
  },
  {
    "name": " internal/cluster/worker.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 393,
    "tm": 39652
  },
  {
    "name": " internal/cluster/worker.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 394,
    "tm": 39658
  },
  {
    "name": "getESMFacade internal/bootstrap/loaders.js:238:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 395,
    "tm": 39765
  },
  {
    "name": " internal/bootstrap/loaders.js:247:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 396,
    "tm": 39807
  },
  {
    "name": "syncExports internal/bootstrap/loaders.js:261:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 397,
    "tm": 39829
  },
  {
    "name": "getOwn internal/bootstrap/loaders.js:154:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 398,
    "tm": 39843
  },
  {
    "name": "(?:^|\\/)\\.?\\.$",
    "timestamp": 40495,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 399,
    "tm": 40708
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 400,
    "tm": 40715
  },
  {
    "name": "get BlockList net.js:1775:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 401,
    "tm": 40758
  },
  {
    "name": " internal/blocklist.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 402,
    "tm": 40840
  },
  {
    "name": " internal/blocklist.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 403,
    "tm": 40844
  },
  {
    "name": " internal/socketaddress.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 404,
    "tm": 40957
  },
  {
    "name": " internal/socketaddress.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 405,
    "tm": 40961
  },
  {
    "name": "get SocketAddress net.js:1779:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 406,
    "tm": 41019
  },
  {
    "name": " worker_threads.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 407,
    "tm": 41059
  },
  {
    "name": " worker_threads.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 408,
    "tm": 41064
  },
  {
    "name": " internal/worker.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 409,
    "tm": 41302
  },
  {
    "name": " internal/worker.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 410,
    "tm": 41306
  },
  {
    "name": " internal/worker/io.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 411,
    "tm": 41563
  },
  {
    "name": " internal/worker/io.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 412,
    "tm": 41567
  },
  {
    "name": " internal/event_target.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 413,
    "tm": 42219
  },
  {
    "name": " internal/event_target.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 414,
    "tm": 42226
  },
  {
    "name": "<static_fields_initializer> internal/event_target.js:446:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 415,
    "tm": 42229
  },
  {
    "name": "<static_fields_initializer> internal/event_target.js:239:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 416,
    "tm": 42234
  },
  {
    "name": "<static_fields_initializer> internal/event_target.js:171:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 417,
    "tm": 42238
  },
  {
    "name": " util.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 418,
    "tm": 42472
  },
  {
    "name": " util.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 419,
    "tm": 42478
  },
  {
    "name": "SafeWeakSet internal/per_context/primordials.js:359:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 420,
    "tm": 42571
  },
  {
    "name": "defineEventHandler internal/event_target.js:595:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 421,
    "tm": 42671
  },
  {
    "name": " internal/error_serdes.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 422,
    "tm": 42805
  },
  {
    "name": " internal/error_serdes.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 423,
    "tm": 42811
  },
  {
    "name": "Socket net.js:281:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 424,
    "tm": 43037
  },
  {
    "name": "Duplex internal/streams/duplex.js:52:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 425,
    "tm": 43065
  },
  {
    "name": "Readable internal/streams/readable.js:170:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 426,
    "tm": 43130
  },
  {
    "name": "Stream internal/streams/legacy.js:10:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 427,
    "tm": 43144
  },
  {
    "name": "ReadableState internal/streams/readable.js:71:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 428,
    "tm": 43227
  },
  {
    "name": "getHighWaterMark internal/streams/state.js:19:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 429,
    "tm": 43253
  },
  {
    "name": "highWaterMarkFrom internal/streams/state.js:10:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 430,
    "tm": 43266
  },
  {
    "name": "getDefaultHighWaterMark internal/streams/state.js:15:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 431,
    "tm": 43276
  },
  {
    "name": "BufferList internal/streams/buffer_list.js:12:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 432,
    "tm": 43297
  },
  {
    "name": "Writable internal/streams/writable.js:218:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 433,
    "tm": 43386
  },
  {
    "name": "WritableState internal/streams/writable.js:67:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 434,
    "tm": 43433
  },
  {
    "name": "resetBuffer internal/streams/writable.js:180:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 435,
    "tm": 43461
  },
  {
    "name": "set internal/streams/readable.js:1169:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 436,
    "tm": 43494
  },
  {
    "name": "createHandle net.js:135:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 437,
    "tm": 43521
  },
  {
    "name": "set net.js:1703:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 438,
    "tm": 43557
  },
  {
    "name": "get net.js:1702:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 439,
    "tm": 43568
  },
  {
    "name": "Readable.on internal/streams/readable.js:852:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 440,
    "tm": 43603
  },
  {
    "name": "initSocketHandle net.js:252:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 441,
    "tm": 43630
  },
  {
    "name": "undestroy internal/streams/destroy.js:109:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 442,
    "tm": 43655
  },
  {
    "name": "getNewAsyncId net.js:154:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 443,
    "tm": 43677
  },
  {
    "name": "get internal/bootstrap/pre_execution.js:296:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 444,
    "tm": 43694
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 445,
    "tm": 43900
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 446,
    "tm": 43909
  },
  {
    "name": "initializeFrozenIntrinsics internal/bootstrap/pre_execution.js:458:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 447,
    "tm": 43969
  },
  {
    "name": "executeUserEntryPoint internal/modules/run_main.js:69:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 448,
    "tm": 43995
  },
  {
    "name": "resolveMainPath internal/modules/run_main.js:12:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 449,
    "tm": 44011
  },
  {
    "name": "shouldUseESMLoader internal/modules/run_main.js:27:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 450,
    "tm": 44084
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/testServer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 451,
    "tm": 44211
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/testServer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 452,
    "tm": 44217
  },
  {
    "name": "resolveExports internal/modules/cjs/loader.js:440:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 453,
    "tm": 44284
  },
  {
    "name": "tryPackage internal/modules/cjs/loader.js:306:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 454,
    "tm": 44506
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/respjs/index.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 455,
    "tm": 44764
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/respjs/index.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 456,
    "tm": 44772
  },
  {
    "name": "get events.js:101:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 457,
    "tm": 44817
  },
  {
    "name": "get events.js:141:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 458,
    "tm": 44827
  },
  {
    "name": "createServer net.js:174:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 459,
    "tm": 44860
  },
  {
    "name": "Server net.js:1173:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 460,
    "tm": 44900
  },
  {
    "name": "Server.listen net.js:1411:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 461,
    "tm": 45011
  },
  {
    "name": "normalizeArgs net.js:215:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 462,
    "tm": 45039
  },
  {
    "name": "isPipeName net.js:160:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 463,
    "tm": 45057
  },
  {
    "name": "toNumber net.js:1223:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 464,
    "tm": 45077
  },
  {
    "name": "getFlags net.js:131:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 465,
    "tm": 45088
  },
  {
    "name": "validatePort internal/validators.js:210:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 466,
    "tm": 45110
  },
  {
    "name": "lookupAndListen net.js:1509:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 467,
    "tm": 45129
  },
  {
    "name": " dns.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 468,
    "tm": 45314
  },
  {
    "name": " dns.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 469,
    "tm": 45318
  },
  {
    "name": " internal/dns/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 470,
    "tm": 45548
  },
  {
    "name": " internal/dns/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 471,
    "tm": 45554
  },
  {
    "name": "Resolver internal/dns/utils.js:54:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 472,
    "tm": 45616
  },
  {
    "name": "validateTimeout internal/dns/utils.js:40:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 473,
    "tm": 45632
  },
  {
    "name": "validateTries internal/dns/utils.js:46:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 474,
    "tm": 45645
  },
  {
    "name": "resolver dns.js:215:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 475,
    "tm": 45767
  },
  {
    "name": "getDefaultResolver internal/dns/utils.js:163:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 476,
    "tm": 45816
  },
  {
    "name": "bindDefaultResolver internal/dns/utils.js:171:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 477,
    "tm": 45833
  },
  {
    "name": " internal/dns/utils.js:172:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 478,
    "tm": 45846
  },
  {
    "name": "lookup dns.js:97:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 479,
    "tm": 45947
  },
  {
    "name": "getDefaultVerbatim internal/dns/utils.js:200:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 480,
    "tm": 45960
  },
  {
    "name": " internal/validators.js:132:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 481,
    "tm": 46001
  },
  {
    "name": "isIP internal/net.js:39:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 482,
    "tm": 46015
  },
  {
    "name": "isIPv4 internal/net.js:31:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 483,
    "tm": 46025
  },
  {
    "name": "isIPv6 internal/net.js:35:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 484,
    "tm": 46086
  },
  {
    "name": "onlookup dns.js:69:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 485,
    "tm": 47084
  },
  {
    "name": "^((?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])[.]){3}(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$",
    "timestamp": 47163,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "doListen net.js:1511:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 486,
    "tm": 47191
  },
  {
    "name": "listenInCluster net.js:1369:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 487,
    "tm": 47221
  },
  {
    "name": "setupListenHandle net.js:1284:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 488,
    "tm": 47277
  },
  {
    "name": " net.js:39:63",
    "type": "JS",
    "kind": "Unopt",
    "func": 489,
    "tm": 47298
  },
  {
    "name": "createServerHandle net.js:1226:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 490,
    "tm": 47352
  },
  {
    "name": "uvExceptionWithHostPort internal/errors.js:484:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 491,
    "tm": 47453
  },
  {
    "name": "uvErrmapGet internal/errors.js:400:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 492,
    "tm": 47480
  },
  {
    "name": "lazyUv internal/errors.js:391:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 493,
    "tm": 47492
  },
  {
    "name": "captureLargerStackTrace internal/errors.js:409:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 494,
    "tm": 47549
  },
  {
    "name": "defaultTriggerAsyncIdScope internal/async_hooks.js:443:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 495,
    "tm": 47611
  },
  {
    "name": "nextTick internal/process/task_queues.js:103:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 496,
    "tm": 47654
  },
  {
    "name": "isEmpty internal/fixed_queue.js:95:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 497,
    "tm": 47669
  },
  {
    "name": "isEmpty internal/fixed_queue.js:67:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 498,
    "tm": 47679
  },
  {
    "name": "setHasTickScheduled internal/process/task_queues.js:51:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 499,
    "tm": 47690
  },
  {
    "name": "newAsyncId internal/async_hooks.js:413:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 500,
    "tm": 47704
  },
  {
    "name": "getDefaultTriggerAsyncId internal/async_hooks.js:429:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 501,
    "tm": 47724
  },
  {
    "name": "initHooksExist internal/async_hooks.js:466:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 502,
    "tm": 47748
  },
  {
    "name": "hasHooks internal/async_hooks.js:458:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 503,
    "tm": 47760
  },
  {
    "name": "push internal/fixed_queue.js:99:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 504,
    "tm": 47774
  },
  {
    "name": "isFull internal/fixed_queue.js:71:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 505,
    "tm": 47785
  },
  {
    "name": "push internal/fixed_queue.js:75:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 506,
    "tm": 47800
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:67:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 507,
    "tm": 47851
  },
  {
    "name": "shift internal/fixed_queue.js:108:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 508,
    "tm": 47910
  },
  {
    "name": "shift internal/fixed_queue.js:80:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 509,
    "tm": 47934
  },
  {
    "name": "emitBeforeScript internal/async_hooks.js:497:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 510,
    "tm": 47951
  },
  {
    "name": "pushAsyncContext internal/async_hooks.js:527:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 511,
    "tm": 47974
  },
  {
    "name": "emitErrorNT net.js:1357:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 512,
    "tm": 47991
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/testServer.js:51:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 513,
    "tm": 48006
  },
  {
    "name": "warn internal/console/constructor.js:368:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 514,
    "tm": 48041
  },
  {
    "name": "value internal/console/constructor.js:333:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 515,
    "tm": 48057
  },
  {
    "name": "get internal/console/constructor.js:216:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 516,
    "tm": 48078
  },
  {
    "name": "getStderr internal/bootstrap/switches/is_main_thread.js:132:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 517,
    "tm": 48098
  },
  {
    "name": "createWritableStdioStream internal/bootstrap/switches/is_main_thread.js:41:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 518,
    "tm": 48145
  },
  {
    "name": " tty.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 519,
    "tm": 48278
  },
  {
    "name": " tty.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 520,
    "tm": 48284
  },
  {
    "name": " internal/tty.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 521,
    "tm": 48404
  },
  {
    "name": " internal/tty.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 522,
    "tm": 48409
  },
  {
    "name": "WriteStream tty.js:85:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 523,
    "tm": 48519
  },
  {
    "name": "value internal/console/constructor.js:304:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 524,
    "tm": 48677
  },
  {
    "name": "getColorDepth internal/tty.js:106:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 525,
    "tm": 48746
  },
  {
    "name": "formatWithOptions internal/util/inspect.js:1856:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 526,
    "tm": 48774
  },
  {
    "name": "formatWithOptionsInternal internal/util/inspect.js:1864:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 527,
    "tm": 48851
  },
  {
    "name": "value internal/console/constructor.js:262:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 528,
    "tm": 48889
  },
  {
    "name": "listenerCount events.js:732:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 529,
    "tm": 48909
  },
  {
    "name": "once events.js:538:44",
    "type": "JS",
    "kind": "Unopt",
    "func": 530,
    "tm": 48923
  },
  {
    "name": "_onceWrap events.js:524:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 531,
    "tm": 48940
  },
  {
    "name": "Writable.write internal/streams/writable.js:258:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 532,
    "tm": 48991
  },
  {
    "name": "writeOrBuffer internal/streams/writable.js:334:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 533,
    "tm": 49028
  },
  {
    "name": "Socket._write net.js:809:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 534,
    "tm": 49047
  },
  {
    "name": "Socket._writeGeneric net.js:772:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 535,
    "tm": 49073
  },
  {
    "name": "_unrefTimer net.js:405:52",
    "type": "JS",
    "kind": "Unopt",
    "func": 536,
    "tm": 49091
  },
  {
    "name": "writeGeneric internal/stream_base_commons.js:143:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 537,
    "tm": 49120
  },
  {
    "name": "createWriteWrap internal/stream_base_commons.js:106:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 538,
    "tm": 49142
  },
  {
    "name": "handleWriteReq internal/stream_base_commons.js:47:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 539,
    "tm": 49198
  },
  {
    "name": "afterWriteDispatched internal/stream_base_commons.js:151:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 540,
    "tm": 49249
  },
  {
    "name": "onwrite internal/streams/writable.js:394:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 541,
    "tm": 49292
  },
  {
    "name": "Readable.removeListener internal/streams/readable.js:882:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 542,
    "tm": 49323
  },
  {
    "name": "removeListener events.js:567:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 543,
    "tm": 49362
  },
  {
    "name": "destroyHooksExist internal/async_hooks.js:474:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 544,
    "tm": 49374
  },
  {
    "name": "emitAfterScript internal/async_hooks.js:505:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 545,
    "tm": 49385
  },
  {
    "name": "popAsyncContext internal/async_hooks.js:541:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 546,
    "tm": 49406
  },
  {
    "name": "enabledHooksExist internal/async_hooks.js:462:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 547,
    "tm": 49415
  },
  {
    "name": "afterWriteTick internal/streams/writable.js:451:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 548,
    "tm": 49436
  },
  {
    "name": "afterWrite internal/streams/writable.js:456:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 549,
    "tm": 49458
  },
  {
    "name": "get internal/streams/duplex.js:94:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 550,
    "tm": 49472
  },
  {
    "name": " internal/console/constructor.js:343:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 551,
    "tm": 49489
  },
  {
    "name": "finishMaybe internal/streams/writable.js:635:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 552,
    "tm": 49516
  },
  {
    "name": "needFinish internal/streams/writable.js:600:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 553,
    "tm": 49530
  },
  {
    "name": "processPromiseRejections internal/process/promises.js:190:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 554,
    "tm": 49594
  },
  {
    "name": "setHasRejectionToWarn internal/process/promises.js:67:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 555,
    "tm": 49614
  }
],
  "functions": [
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "codes": [
      21858
    ]
  },
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "codes": [
      21859
    ]
  },
  {
    "name": "<static_fields_initializer> internal/bootstrap/loaders.js:170:3",
    "codes": [
      21860
    ]
  },
  {
    "name": "SafeSet internal/per_context/primordials.js:353:16",
    "codes": [
      21861
    ]
  },
  {
    "name": "internalBinding internal/bootstrap/loaders.js:138:45",
    "codes": [
      21862
    ]
  },
  {
    "name": " internal/bootstrap/loaders.js:171:34",
    "codes": [
      21863
    ]
  },
  {
    "name": "NativeModule internal/bootstrap/loaders.js:174:14",
    "codes": [
      21864
    ]
  },
  {
    "name": "SafeMap internal/per_context/primordials.js:341:16",
    "codes": [
      21865
    ]
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "codes": [
      21866
    ]
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "codes": [
      21867
    ]
  },
  {
    "name": "setupPrepareStackTrace internal/bootstrap/node.js:254:32",
    "codes": [
      21868
    ]
  },
  {
    "name": "nativeModuleRequire internal/bootstrap/loaders.js:306:29",
    "codes": [
      21869
    ]
  },
  {
    "name": "compileForInternalLoader internal/bootstrap/loaders.js:273:27",
    "codes": [
      21870
    ]
  },
  {
    "name": " internal/errors.js:1:1",
    "codes": [
      21871
    ]
  },
  {
    "name": " internal/errors.js:1:1",
    "codes": [
      21872
    ]
  },
  {
    "name": "SafeWeakMap internal/per_context/primordials.js:347:16",
    "codes": [
      21873
    ]
  },
  {
    "name": "hideStackFrames internal/errors.js:333:25",
    "codes": [
      21874
    ]
  },
  {
    "name": "E internal/errors.js:343:11",
    "codes": [
      21875
    ]
  },
  {
    "name": "makeNodeErrorWithCode internal/errors.js:307:31",
    "codes": [
      21876
    ]
  },
  {
    "name": "makeSystemErrorWithCode internal/errors.js:299:33",
    "codes": [
      21877
    ]
  },
  {
    "name": " internal/errors.js:354:26",
    "codes": [
      21878
    ]
  },
  {
    "name": " internal/util.js:1:1",
    "codes": [
      21879
    ]
  },
  {
    "name": " internal/util.js:1:1",
    "codes": [
      21880
    ]
  },
  {
    "name": "setupProcessObject internal/bootstrap/node.js:273:28",
    "codes": [
      21881
    ]
  },
  {
    "name": " events.js:1:1",
    "codes": [
      21882
    ]
  },
  {
    "name": " events.js:1:1",
    "codes": [
      21883
    ]
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "codes": [
      21884
    ]
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "codes": [
      21885
    ]
  },
  {
    "name": " internal/util/types.js:1:1",
    "codes": [
      21886
    ]
  },
  {
    "name": " internal/util/types.js:1:1",
    "codes": [
      21887
    ]
  },
  {
    "name": " internal/assert.js:1:1",
    "codes": [
      21888
    ]
  },
  {
    "name": " internal/assert.js:1:1",
    "codes": [
      21889
    ]
  },
  {
    "name": " internal/util/inspect.js:131:5",
    "codes": [
      21890
    ]
  },
  {
    "name": "defineColorAlias internal/util/inspect.js:388:26",
    "codes": [
      21892
    ]
  },
  {
    "name": " internal/validators.js:1:1",
    "codes": [
      21893
    ]
  },
  {
    "name": " internal/validators.js:1:1",
    "codes": [
      21894
    ]
  },
  {
    "name": "EventEmitter events.js:87:22",
    "codes": [
      21895
    ]
  },
  {
    "name": "EventEmitter.init events.js:202:29",
    "codes": [
      21896
    ]
  },
  {
    "name": "setupGlobalProxy internal/bootstrap/node.js:293:26",
    "codes": [
      21897
    ]
  },
  {
    "name": "setupBuffer internal/bootstrap/node.js:302:21",
    "codes": [
      21898
    ]
  },
  {
    "name": " buffer.js:1:1",
    "codes": [
      21899
    ]
  },
  {
    "name": " buffer.js:1:1",
    "codes": [
      21900
    ]
  },
  {
    "name": " internal/buffer.js:1:1",
    "codes": [
      21901
    ]
  },
  {
    "name": " internal/buffer.js:1:1",
    "codes": [
      21902
    ]
  },
  {
    "name": " internal/blob.js:1:1",
    "codes": [
      21903
    ]
  },
  {
    "name": " internal/blob.js:1:1",
    "codes": [
      21904
    ]
  },
  {
    "name": " internal/encoding.js:1:1",
    "codes": [
      21905
    ]
  },
  {
    "name": " internal/encoding.js:1:1",
    "codes": [
      21906
    ]
  },
  {
    "name": "makeTextDecoderICU internal/encoding.js:372:28",
    "codes": [
      21907
    ]
  },
  {
    "name": " internal/worker/js_transferable.js:1:1",
    "codes": [
      21908
    ]
  },
  {
    "name": " internal/worker/js_transferable.js:1:1",
    "codes": [
      21909
    ]
  },
  {
    "name": "addBufferPrototypeMethods internal/buffer.js:962:35",
    "codes": [
      21910
    ]
  },
  {
    "name": "createPool buffer.js:162:20",
    "codes": [
      21911
    ]
  },
  {
    "name": "createUnsafeBuffer buffer.js:153:28",
    "codes": [
      21912
    ]
  },
  {
    "name": "FastBuffer internal/buffer.js:957:14",
    "codes": [
      21913
    ]
  },
  {
    "name": "markAsUntransferable internal/buffer.js:1047:30",
    "codes": [
      21914
    ]
  },
  {
    "name": "setup internal/worker/js_transferable.js:17:15",
    "codes": [
      21915
    ]
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "codes": [
      21916
    ]
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "codes": [
      21917
    ]
  },
  {
    "name": "wrapProcessMethods internal/process/per_thread.js:44:28",
    "codes": [
      21918
    ]
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "codes": [
      21919
    ]
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "codes": [
      21920
    ]
  },
  {
    "name": "emitHookFactory internal/async_hooks.js:253:25",
    "codes": [
      21921
    ]
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "codes": [
      21922
    ]
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "codes": [
      21923
    ]
  },
  {
    "name": " internal/process/promises.js:1:1",
    "codes": [
      21924
    ]
  },
  {
    "name": " internal/process/promises.js:1:1",
    "codes": [
      21925
    ]
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "codes": [
      21926
    ]
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "codes": [
      21927
    ]
  },
  {
    "name": " async_hooks.js:1:1",
    "codes": [
      21928
    ]
  },
  {
    "name": " async_hooks.js:1:1",
    "codes": [
      21929
    ]
  },
  {
    "name": "createHook async_hooks.js:144:20",
    "codes": [
      21930
    ]
  },
  {
    "name": "AsyncHook async_hooks.js:66:14",
    "codes": [
      21931
    ]
  },
  {
    "name": "FixedQueue internal/fixed_queue.js:91:14",
    "codes": [
      21932
    ]
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:60:14",
    "codes": [
      21933
    ]
  },
  {
    "name": "createGlobalConsole internal/bootstrap/node.js:319:29",
    "codes": [
      21934
    ]
  },
  {
    "name": " internal/console/global.js:1:1",
    "codes": [
      21935
    ]
  },
  {
    "name": " internal/console/global.js:1:1",
    "codes": [
      21936
    ]
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "codes": [
      21937
    ]
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "codes": [
      21938
    ]
  },
  {
    "name": " internal/constants.js:1:1",
    "codes": [
      21939
    ]
  },
  {
    "name": " internal/constants.js:1:1",
    "codes": [
      21940
    ]
  },
  {
    "name": "value internal/console/constructor.js:200:20",
    "codes": [
      21941
    ]
  },
  {
    "name": "value internal/console/constructor.js:227:20",
    "codes": [
      21942
    ]
  },
  {
    "name": "createWriteErrorHandler internal/console/constructor.js:342:33",
    "codes": [
      21943
    ]
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "codes": [
      21944
    ]
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "codes": [
      21945
    ]
  },
  {
    "name": "set consoleFromVM internal/util/inspector.js:65:20",
    "codes": [
      21946
    ]
  },
  {
    "name": "wrapConsole internal/util/inspector.js:36:21",
    "codes": [
      21947
    ]
  },
  {
    "name": "exposeNamespace internal/bootstrap/node.js:337:25",
    "codes": [
      21948
    ]
  },
  {
    "name": " internal/url.js:1:1",
    "codes": [
      21949
    ]
  },
  {
    "name": " internal/url.js:1:1",
    "codes": [
      21950
    ]
  },
  {
    "name": " internal/querystring.js:1:1",
    "codes": [
      21951
    ]
  },
  {
    "name": " internal/querystring.js:1:1",
    "codes": [
      21952
    ]
  },
  {
    "name": " path.js:1:1",
    "codes": [
      21953
    ]
  },
  {
    "name": " path.js:1:1",
    "codes": [
      21954
    ]
  },
  {
    "name": "defineIDLClass internal/url.js:875:24",
    "codes": [
      21955
    ]
  },
  {
    "name": "exposeInterface internal/bootstrap/node.js:347:25",
    "codes": [
      21956
    ]
  },
  {
    "name": " timers.js:1:1",
    "codes": [
      21957
    ]
  },
  {
    "name": " timers.js:1:1",
    "codes": [
      21958
    ]
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "codes": [
      21959
    ]
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "codes": [
      21960
    ]
  },
  {
    "name": " internal/timers.js:1:1",
    "codes": [
      21961
    ]
  },
  {
    "name": " internal/timers.js:1:1",
    "codes": [
      21962
    ]
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "codes": [
      21963
    ]
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "codes": [
      21964
    ]
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "codes": [
      21965
    ]
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "codes": [
      21966
    ]
  },
  {
    "name": "debuglog internal/util/debuglog.js:70:18",
    "codes": [
      21967
    ]
  },
  {
    "name": "ImmediateList internal/timers.js:260:23",
    "codes": [
      21968
    ]
  },
  {
    "name": "PriorityQueue internal/priority_queue.js:20:14",
    "codes": [
      21969
    ]
  },
  {
    "name": "deprecate internal/util.js:90:19",
    "codes": [
      21970
    ]
  },
  {
    "name": "validateString internal/validators.js:122:24",
    "codes": [
      21971
    ]
  },
  {
    "name": "defineOperation internal/bootstrap/node.js:357:25",
    "codes": [
      21972
    ]
  },
  {
    "name": " internal/process/execution.js:1:1",
    "codes": [
      21973
    ]
  },
  {
    "name": " internal/process/execution.js:1:1",
    "codes": [
      21974
    ]
  },
  {
    "name": "createOnGlobalUncaughtException internal/process/execution.js:138:41",
    "codes": [
      21975
    ]
  },
  {
    "name": " internal/process/warning.js:1:1",
    "codes": [
      21976
    ]
  },
  {
    "name": " internal/process/warning.js:1:1",
    "codes": [
      21977
    ]
  },
  {
    "name": "setupTaskQueue internal/process/task_queues.js:165:17",
    "codes": [
      21978
    ]
  },
  {
    "name": "listenForRejections internal/process/promises.js:291:29",
    "codes": [
      21979
    ]
  },
  {
    "name": "getTimerCallbacks internal/timers.js:415:27",
    "codes": [
      21980
    ]
  },
  {
    "name": " internal/bootstrap/switches/is_main_thread.js:1:1",
    "codes": [
      21981
    ]
  },
  {
    "name": " internal/bootstrap/switches/is_main_thread.js:1:1",
    "codes": [
      21982
    ]
  },
  {
    "name": "defineStream internal/bootstrap/switches/is_main_thread.js:16:22",
    "codes": [
      21983
    ]
  },
  {
    "name": " internal/process/signal.js:1:1",
    "codes": [
      21984
    ]
  },
  {
    "name": " internal/process/signal.js:1:1",
    "codes": [
      21985
    ]
  },
  {
    "name": "addListener events.js:496:58",
    "codes": [
      21986
    ]
  },
  {
    "name": "_addListener events.js:428:22",
    "codes": [
      21987
    ]
  },
  {
    "name": "checkListener events.js:133:23",
    "codes": [
      21988
    ]
  },
  {
    "name": "emit events.js:349:44",
    "codes": [
      21989
    ]
  },
  {
    "name": "startListeningIfSignal internal/process/signal.js:21:32",
    "codes": [
      21990
    ]
  },
  {
    "name": "isSignal internal/process/signal.js:16:18",
    "codes": [
      21991
    ]
  },
  {
    "name": " internal/bootstrap/switches/does_own_process_state.js:1:1",
    "codes": [
      21992
    ]
  },
  {
    "name": " internal/bootstrap/switches/does_own_process_state.js:1:1",
    "codes": [
      21993
    ]
  },
  {
    "name": "wrapPosixCredentialSetters internal/bootstrap/switches/does_own_process_state.js:30:36",
    "codes": [
      21994
    ]
  },
  {
    "name": "wrapIdSetter internal/bootstrap/switches/does_own_process_state.js:80:24",
    "codes": [
      21995
    ]
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "codes": [
      21996
    ]
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "codes": [
      21997
    ]
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "codes": [
      21998
    ]
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "codes": [
      21999
    ]
  },
  {
    "name": " internal/options.js:1:1",
    "codes": [
      22000
    ]
  },
  {
    "name": " internal/options.js:1:1",
    "codes": [
      22001
    ]
  },
  {
    "name": "prepareMainThreadExecution internal/bootstrap/pre_execution.js:21:36",
    "codes": [
      22002
    ]
  },
  {
    "name": "patchProcessObject internal/bootstrap/pre_execution.js:76:28",
    "codes": [
      22003
    ]
  },
  {
    "name": "resolve path.js:1067:10",
    "codes": [
      22004
    ]
  },
  {
    "name": "wrappedCwd internal/bootstrap/switches/does_own_process_state.js:128:20",
    "codes": [
      22005
    ]
  },
  {
    "name": "normalizeString path.js:59:25",
    "codes": [
      22006
    ]
  },
  {
    "name": "isPosixPathSeparator path.js:49:30",
    "codes": [
      22007
    ]
  },
  {
    "name": "addReadOnlyProcessAlias internal/bootstrap/pre_execution.js:116:33",
    "codes": [
      22008
    ]
  },
  {
    "name": "getOptionValue internal/options.js:28:24",
    "codes": [
      22009
    ]
  },
  {
    "name": "getOptionsFromBinding internal/options.js:14:31",
    "codes": [
      22010
    ]
  },
  {
    "name": "setupTraceCategoryState internal/bootstrap/pre_execution.js:208:33",
    "codes": [
      22011
    ]
  },
  {
    "name": "toggleTraceCategoryState internal/process/per_thread.js:357:34",
    "codes": [
      22012
    ]
  },
  {
    "name": "setupInspectorHooks internal/bootstrap/pre_execution.js:214:29",
    "codes": [
      22013
    ]
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "codes": [
      22014
    ]
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "codes": [
      22015
    ]
  },
  {
    "name": "setupWarningHandler internal/bootstrap/pre_execution.js:128:29",
    "codes": [
      22016
    ]
  },
  {
    "name": "setupDebugEnv internal/bootstrap/pre_execution.js:180:23",
    "codes": [
      22017
    ]
  },
  {
    "name": "initializeDebugEnv internal/util/debuglog.js:23:28",
    "codes": [
      22018
    ]
  },
  {
    "name": "setupStacktracePrinterOnSigint internal/bootstrap/pre_execution.js:159:40",
    "codes": [
      22019
    ]
  },
  {
    "name": "initializeReport internal/bootstrap/pre_execution.js:169:26",
    "codes": [
      22020
    ]
  },
  {
    "name": " internal/process/report.js:1:1",
    "codes": [
      22021
    ]
  },
  {
    "name": " internal/process/report.js:1:1",
    "codes": [
      22022
    ]
  },
  {
    "name": "initializeReportSignalHandlers internal/bootstrap/pre_execution.js:188:40",
    "codes": [
      22023
    ]
  },
  {
    "name": "addSignalHandler internal/process/report.js:99:26",
    "codes": [
      22024
    ]
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers internal/bootstrap/pre_execution.js:194:46",
    "codes": [
      22025
    ]
  },
  {
    "name": "setupChildProcessIpcChannel internal/bootstrap/pre_execution.js:343:37",
    "codes": [
      22026
    ]
  },
  {
    "name": "initializePolicy internal/bootstrap/pre_execution.js:371:26",
    "codes": [
      22027
    ]
  },
  {
    "name": "initializeClusterIPC internal/bootstrap/pre_execution.js:362:30",
    "codes": [
      22028
    ]
  },
  {
    "name": "initializeAbortController internal/bootstrap/pre_execution.js:319:35",
    "codes": [
      22029
    ]
  },
  {
    "name": "initializeSourceMapsHandlers internal/bootstrap/pre_execution.js:452:38",
    "codes": [
      22030
    ]
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "codes": [
      22031
    ]
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "codes": [
      22032
    ]
  },
  {
    "name": " fs.js:1:1",
    "codes": [
      22033
    ]
  },
  {
    "name": " fs.js:1:1",
    "codes": [
      22034
    ]
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "codes": [
      22035
    ]
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "codes": [
      22036
    ]
  },
  {
    "name": "from buffer.js:307:28",
    "codes": [
      22037
    ]
  },
  {
    "name": "fromString buffer.js:445:20",
    "codes": [
      22038
    ]
  },
  {
    "name": "fromStringFast buffer.js:426:24",
    "codes": [
      22039
    ]
  },
  {
    "name": "write buffer.js:608:12",
    "codes": [
      22040
    ]
  },
  {
    "name": "alignPool buffer.js:170:19",
    "codes": [
      22041
    ]
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "codes": [
      22042
    ]
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "codes": [
      22043
    ]
  },
  {
    "name": " internal/util/iterable_weak_map.js:1:1",
    "codes": [
      22044
    ]
  },
  {
    "name": " internal/util/iterable_weak_map.js:1:1",
    "codes": [
      22045
    ]
  },
  {
    "name": "<instance_members_initializer> internal/util/iterable_weak_map.js:29:3",
    "codes": [
      22046
    ]
  },
  {
    "name": "makeSafe internal/per_context/primordials.js:299:18",
    "codes": [
      22047
    ]
  },
  {
    "name": "copyProps internal/per_context/primordials.js:288:19",
    "codes": [
      22048
    ]
  },
  {
    "name": " internal/per_context/primordials.js:289:46",
    "codes": [
      22049
    ]
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "codes": [
      22050
    ]
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "codes": [
      22051
    ]
  },
  {
    "name": "IterableWeakMap internal/util/iterable_weak_map.js:28:1",
    "codes": [
      22052
    ]
  },
  {
    "name": "SafeFinalizationRegistry internal/util/iterable_weak_map.js:15:3",
    "codes": [
      22053
    ]
  },
  {
    "name": "initializeDeprecations internal/bootstrap/pre_execution.js:232:32",
    "codes": [
      22054
    ]
  },
  {
    "name": "initializeWASI internal/bootstrap/pre_execution.js:420:24",
    "codes": [
      22055
    ]
  },
  {
    "name": "initializeCJSLoader internal/bootstrap/pre_execution.js:427:29",
    "codes": [
      22056
    ]
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "codes": [
      22057
    ]
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "codes": [
      22058
    ]
  },
  {
    "name": " vm.js:1:1",
    "codes": [
      22059
    ]
  },
  {
    "name": " vm.js:1:1",
    "codes": [
      22060
    ]
  },
  {
    "name": " internal/modules/package_json_reader.js:1:1",
    "codes": [
      22061
    ]
  },
  {
    "name": " internal/modules/package_json_reader.js:1:1",
    "codes": [
      22062
    ]
  },
  {
    "name": " url.js:1:1",
    "codes": [
      22063
    ]
  },
  {
    "name": " url.js:1:1",
    "codes": [
      22064
    ]
  },
  {
    "name": " internal/idna.js:1:1",
    "codes": [
      22065
    ]
  },
  {
    "name": " internal/idna.js:1:1",
    "codes": [
      22066
    ]
  },
  {
    "name": " internal/process/esm_loader.js:1:1",
    "codes": [
      22067
    ]
  },
  {
    "name": " internal/process/esm_loader.js:1:1",
    "codes": [
      22068
    ]
  },
  {
    "name": " internal/modules/esm/loader.js:1:1",
    "codes": [
      22069
    ]
  },
  {
    "name": " internal/modules/esm/loader.js:1:1",
    "codes": [
      22070
    ]
  },
  {
    "name": " internal/modules/esm/module_map.js:1:1",
    "codes": [
      22071
    ]
  },
  {
    "name": " internal/modules/esm/module_map.js:1:1",
    "codes": [
      22072
    ]
  },
  {
    "name": " internal/modules/esm/module_job.js:1:1",
    "codes": [
      22073
    ]
  },
  {
    "name": " internal/modules/esm/module_job.js:1:1",
    "codes": [
      22074
    ]
  },
  {
    "name": " internal/modules/esm/resolve.js:1:1",
    "codes": [
      22075
    ]
  },
  {
    "name": " internal/modules/esm/resolve.js:1:1",
    "codes": [
      22076
    ]
  },
  {
    "name": " internal/modules/esm/get_format.js:1:1",
    "codes": [
      22077
    ]
  },
  {
    "name": " internal/modules/esm/get_format.js:1:1",
    "codes": [
      22078
    ]
  },
  {
    "name": " internal/modules/esm/get_source.js:1:1",
    "codes": [
      22079
    ]
  },
  {
    "name": " internal/modules/esm/get_source.js:1:1",
    "codes": [
      22080
    ]
  },
  {
    "name": " internal/fs/promises.js:1:1",
    "codes": [
      22081
    ]
  },
  {
    "name": " internal/fs/promises.js:1:1",
    "codes": [
      22082
    ]
  },
  {
    "name": "<instance_members_initializer> internal/fs/promises.js:171:3",
    "codes": [
      22083
    ]
  },
  {
    "name": " internal/fs/rimraf.js:1:1",
    "codes": [
      22084
    ]
  },
  {
    "name": " internal/fs/rimraf.js:1:1",
    "codes": [
      22085
    ]
  },
  {
    "name": " internal/fs/watchers.js:1:1",
    "codes": [
      22086
    ]
  },
  {
    "name": " internal/fs/watchers.js:1:1",
    "codes": [
      22087
    ]
  },
  {
    "name": " internal/streams/utils.js:1:1",
    "codes": [
      22088
    ]
  },
  {
    "name": " internal/streams/utils.js:1:1",
    "codes": [
      22089
    ]
  },
  {
    "name": "promisify internal/util.js:317:19",
    "codes": [
      22090
    ]
  },
  {
    "name": " internal/validators.js:235:42",
    "codes": [
      22091
    ]
  },
  {
    "name": " internal/modules/esm/transform_source.js:1:1",
    "codes": [
      22092
    ]
  },
  {
    "name": " internal/modules/esm/transform_source.js:1:1",
    "codes": [
      22093
    ]
  },
  {
    "name": " internal/modules/esm/translators.js:1:1",
    "codes": [
      22094
    ]
  },
  {
    "name": " internal/modules/esm/translators.js:1:1",
    "codes": [
      22095
    ]
  },
  {
    "name": " internal/modules/esm/create_dynamic_module.js:1:1",
    "codes": [
      22096
    ]
  },
  {
    "name": " internal/modules/esm/create_dynamic_module.js:1:1",
    "codes": [
      22097
    ]
  },
  {
    "name": " internal/vm/module.js:1:1",
    "codes": [
      22098
    ]
  },
  {
    "name": " internal/vm/module.js:1:1",
    "codes": [
      22099
    ]
  },
  {
    "name": "<instance_members_initializer> internal/vm/module.js:262:3",
    "codes": [
      22100
    ]
  },
  {
    "name": "Loader internal/modules/esm/loader.js:45:14",
    "codes": [
      22101
    ]
  },
  {
    "name": "ModuleMap internal/modules/esm/module_map.js:14:1",
    "codes": [
      22102
    ]
  },
  {
    "name": "desc.value internal/per_context/primordials.js:315:32",
    "codes": [
      22103
    ]
  },
  {
    "name": "SafeIterator internal/per_context/primordials.js:263:16",
    "codes": [
      22104
    ]
  },
  {
    "name": "next internal/per_context/primordials.js:266:9",
    "codes": [
      22105
    ]
  },
  {
    "name": "Module._initPaths internal/modules/cjs/loader.js:1195:29",
    "codes": [
      22106
    ]
  },
  {
    "name": " internal/modules/run_main.js:1:1",
    "codes": [
      22107
    ]
  },
  {
    "name": " internal/modules/run_main.js:1:1",
    "codes": [
      22108
    ]
  },
  {
    "name": "initializeESMLoader internal/bootstrap/pre_execution.js:435:29",
    "codes": [
      22109
    ]
  },
  {
    "name": "get hasLoadedAnyUserCJSModule internal/modules/cjs/loader.js:71:32",
    "codes": [
      22110
    ]
  },
  {
    "name": "assert internal/assert.js:11:16",
    "codes": [
      22111
    ]
  },
  {
    "name": "loadPreloadModules internal/bootstrap/pre_execution.js:466:28",
    "codes": [
      22112
    ]
  },
  {
    "name": "Module._preloadModules internal/modules/cjs/loader.js:1225:34",
    "codes": [
      22113
    ]
  },
  {
    "name": "Module internal/modules/cjs/loader.js:163:16",
    "codes": [
      22114
    ]
  },
  {
    "name": "dirname path.js:1247:10",
    "codes": [
      22115
    ]
  },
  {
    "name": "updateChildren internal/modules/cjs/loader.js:157:24",
    "codes": [
      22116
    ]
  },
  {
    "name": "Module._nodeModulePaths internal/modules/cjs/loader.js:597:37",
    "codes": [
      22117
    ]
  },
  {
    "name": "Module.require internal/modules/cjs/loader.js:966:36",
    "codes": [
      22118
    ]
  },
  {
    "name": "Module._load internal/modules/cjs/loader.js:725:24",
    "codes": [
      22119
    ]
  },
  {
    "name": "logger internal/util/debuglog.js:90:18",
    "codes": [
      22120
    ]
  },
  {
    "name": " internal/per_context/primordials.js:269:21",
    "codes": [
      22121
    ]
  },
  {
    "name": "debug internal/util/debuglog.js:75:15",
    "codes": [
      22122
    ]
  },
  {
    "name": "init internal/util/debuglog.js:71:16",
    "codes": [
      22123
    ]
  },
  {
    "name": "debuglogImpl internal/util/debuglog.js:48:22",
    "codes": [
      22124
    ]
  },
  {
    "name": " internal/modules/cjs/loader.js:240:66",
    "codes": [
      22125
    ]
  },
  {
    "name": "noop internal/util/debuglog.js:46:14",
    "codes": [
      22126
    ]
  },
  {
    "name": "Module._resolveFilename internal/modules/cjs/loader.js:816:35",
    "codes": [
      22127
    ]
  },
  {
    "name": "canBeRequiredByUsers internal/bootstrap/loaders.js:214:30",
    "codes": [
      22128
    ]
  },
  {
    "name": "Module._resolveLookupPaths internal/modules/cjs/loader.js:635:38",
    "codes": [
      22129
    ]
  },
  {
    "name": "trySelfParentPath internal/modules/cjs/loader.js:395:27",
    "codes": [
      22130
    ]
  },
  {
    "name": "trySelf internal/modules/cjs/loader.js:409:17",
    "codes": [
      22131
    ]
  },
  {
    "name": "readPackageScope internal/modules/cjs/loader.js:289:26",
    "codes": [
      22132
    ]
  },
  {
    "name": "readPackage internal/modules/cjs/loader.js:258:21",
    "codes": [
      22133
    ]
  },
  {
    "name": "read internal/modules/package_json_reader.js:16:14",
    "codes": [
      22134
    ]
  },
  {
    "name": "toNamespacedPath path.js:1238:19",
    "codes": [
      22135
    ]
  },
  {
    "name": "Module._findPath internal/modules/cjs/loader.js:462:28",
    "codes": [
      22136
    ]
  },
  {
    "name": "isAbsolute path.js:1132:13",
    "codes": [
      22137
    ]
  },
  {
    "name": "stat internal/modules/cjs/loader.js:146:14",
    "codes": [
      22138
    ]
  },
  {
    "name": "tryExtensions internal/modules/cjs/loader.js:368:23",
    "codes": [
      22139
    ]
  },
  {
    "name": "tryFile internal/modules/cjs/loader.js:352:17",
    "codes": [
      22140
    ]
  },
  {
    "name": "toRealPath internal/modules/cjs/loader.js:361:20",
    "codes": [
      22141
    ]
  },
  {
    "name": "realpathSync fs.js:1722:22",
    "codes": [
      22142
    ]
  },
  {
    "name": "getOptions internal/fs/utils.js:305:20",
    "codes": [
      22143
    ]
  },
  {
    "name": "assertEncoding internal/fs/utils.js:143:24",
    "codes": [
      22144
    ]
  },
  {
    "name": "toPathIfFileURL internal/url.js:1449:25",
    "codes": [
      22145
    ]
  },
  {
    "name": "isURLInstance internal/url.js:1445:23",
    "codes": [
      22146
    ]
  },
  {
    "name": " internal/fs/utils.js:650:38",
    "codes": [
      22147
    ]
  },
  {
    "name": " internal/fs/utils.js:345:35",
    "codes": [
      22148
    ]
  },
  {
    "name": "isUint8Array internal/util/types.js:12:22",
    "codes": [
      22149
    ]
  },
  {
    "name": "splitRoot fs.js:1685:33",
    "codes": [
      22150
    ]
  },
  {
    "name": "nextPart fs.js:1718:31",
    "codes": [
      22151
    ]
  },
  {
    "name": "handleErrorFromBinding internal/fs/utils.js:328:32",
    "codes": [
      22152
    ]
  },
  {
    "name": "isFileType fs.js:198:20",
    "codes": [
      22153
    ]
  },
  {
    "name": "encodeRealpathResult fs.js:1694:30",
    "codes": [
      22154
    ]
  },
  {
    "name": "loadNativeModule internal/modules/cjs/helpers.js:35:26",
    "codes": [
      22155
    ]
  },
  {
    "name": "Module.load internal/modules/cjs/loader.js:938:33",
    "codes": [
      22156
    ]
  },
  {
    "name": "findLongestRegisteredExtension internal/modules/cjs/loader.js:381:40",
    "codes": [
      22157
    ]
  },
  {
    "name": "basename path.js:1278:11",
    "codes": [
      22158
    ]
  },
  {
    "name": "Module._extensions..js internal/modules/cjs/loader.js:1094:37",
    "codes": [
      22159
    ]
  },
  {
    "name": "readFileSync fs.js:390:22",
    "codes": [
      22160
    ]
  },
  {
    "name": "isEncoding buffer.js:543:40",
    "codes": [
      22161
    ]
  },
  {
    "name": "normalizeEncoding internal/util.js:154:27",
    "codes": [
      22162
    ]
  },
  {
    "name": "isUint32 internal/validators.js:34:18",
    "codes": [
      22163
    ]
  },
  {
    "name": "openSync fs.js:488:18",
    "codes": [
      22164
    ]
  },
  {
    "name": " internal/fs/utils.js:662:42",
    "codes": [
      22165
    ]
  },
  {
    "name": "stringToFlags internal/fs/utils.js:538:23",
    "codes": [
      22166
    ]
  },
  {
    "name": "parseFileMode internal/validators.js:53:23",
    "codes": [
      22167
    ]
  },
  {
    "name": "tryStatSync fs.js:353:21",
    "codes": [
      22168
    ]
  },
  {
    "name": "tryCreateBuffer fs.js:363:25",
    "codes": [
      22169
    ]
  },
  {
    "name": "allocUnsafe buffer.js:386:42",
    "codes": [
      22170
    ]
  },
  {
    "name": " buffer.js:360:36",
    "codes": [
      22171
    ]
  },
  {
    "name": "allocate buffer.js:411:18",
    "codes": [
      22172
    ]
  },
  {
    "name": "tryReadSync fs.js:378:21",
    "codes": [
      22173
    ]
  },
  {
    "name": "readSync fs.js:578:18",
    "codes": [
      22174
    ]
  },
  {
    "name": " internal/validators.js:88:3",
    "codes": [
      22175
    ]
  },
  {
    "name": "isInt32 internal/validators.js:30:17",
    "codes": [
      22176
    ]
  },
  {
    "name": " internal/validators.js:190:40",
    "codes": [
      22177
    ]
  },
  {
    "name": " internal/validators.js:77:3",
    "codes": [
      22178
    ]
  },
  {
    "name": " internal/fs/utils.js:618:3",
    "codes": [
      22179
    ]
  },
  {
    "name": " internal/fs/utils.js:818:42",
    "codes": [
      22180
    ]
  },
  {
    "name": "closeSync fs.js:455:19",
    "codes": [
      22181
    ]
  },
  {
    "name": "toString buffer.js:798:46",
    "codes": [
      22182
    ]
  },
  {
    "name": "getEncodingOps buffer.js:694:24",
    "codes": [
      22183
    ]
  },
  {
    "name": "slice buffer.js:609:12",
    "codes": [
      22184
    ]
  },
  {
    "name": "Module._compile internal/modules/cjs/loader.js:1039:37",
    "codes": [
      22185
    ]
  },
  {
    "name": "maybeCacheSourceMap internal/source_map/source_map_cache.js:74:29",
    "codes": [
      22186
    ]
  },
  {
    "name": "getSourceMapsEnabled internal/source_map/source_map_cache.js:43:30",
    "codes": [
      22187
    ]
  },
  {
    "name": "setSourceMapsEnabled internal/source_map/source_map_cache.js:50:30",
    "codes": [
      22188
    ]
  },
  {
    "name": "validateBoolean internal/validators.js:147:25",
    "codes": [
      22189
    ]
  },
  {
    "name": "wrapSafe internal/modules/cjs/loader.js:986:18",
    "codes": [
      22190
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "codes": [
      22191
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "codes": [
      22192
    ]
  },
  {
    "name": "makeRequireFunction internal/modules/cjs/helpers.js:49:29",
    "codes": [
      22193
    ]
  },
  {
    "name": "require internal/modules/cjs/helpers.js:92:31",
    "codes": [
      22194
    ]
  },
  {
    "name": " internal/modules/cjs/helpers.js:28:66",
    "codes": [
      22196
    ]
  },
  {
    "name": "compileForPublicLoader internal/bootstrap/loaders.js:220:25",
    "codes": [
      22197
    ]
  },
  {
    "name": " cluster.js:1:1",
    "codes": [
      22198
    ]
  },
  {
    "name": " cluster.js:1:1",
    "codes": [
      22199
    ]
  },
  {
    "name": " internal/cluster/master.js:1:1",
    "codes": [
      22200
    ]
  },
  {
    "name": " internal/cluster/master.js:1:1",
    "codes": [
      22201
    ]
  },
  {
    "name": " child_process.js:1:1",
    "codes": [
      22202
    ]
  },
  {
    "name": " child_process.js:1:1",
    "codes": [
      22203
    ]
  },
  {
    "name": " internal/child_process.js:1:1",
    "codes": [
      22204
    ]
  },
  {
    "name": " internal/child_process.js:1:1",
    "codes": [
      22205
    ]
  },
  {
    "name": "<instance_members_initializer> internal/child_process.js:516:3",
    "codes": [
      22206
    ]
  },
  {
    "name": " net.js:1:1",
    "codes": [
      22207
    ]
  },
  {
    "name": " net.js:1:1",
    "codes": [
      22208
    ]
  },
  {
    "name": " stream.js:1:1",
    "codes": [
      22209
    ]
  },
  {
    "name": " stream.js:1:1",
    "codes": [
      22210
    ]
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "codes": [
      22211
    ]
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "codes": [
      22212
    ]
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "codes": [
      22213
    ]
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "codes": [
      22214
    ]
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "codes": [
      22215
    ]
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "codes": [
      22216
    ]
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "codes": [
      22217
    ]
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "codes": [
      22218
    ]
  },
  {
    "name": " internal/streams/readable.js:1:1",
    "codes": [
      22219
    ]
  },
  {
    "name": " internal/streams/readable.js:1:1",
    "codes": [
      22220
    ]
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "codes": [
      22221
    ]
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "codes": [
      22222
    ]
  },
  {
    "name": " internal/streams/state.js:1:1",
    "codes": [
      22223
    ]
  },
  {
    "name": " internal/streams/state.js:1:1",
    "codes": [
      22224
    ]
  },
  {
    "name": " internal/streams/writable.js:1:1",
    "codes": [
      22225
    ]
  },
  {
    "name": " internal/streams/writable.js:1:1",
    "codes": [
      22226
    ]
  },
  {
    "name": " internal/streams/duplex.js:1:1",
    "codes": [
      22227
    ]
  },
  {
    "name": " internal/streams/duplex.js:1:1",
    "codes": [
      22228
    ]
  },
  {
    "name": " internal/streams/transform.js:1:1",
    "codes": [
      22229
    ]
  },
  {
    "name": " internal/streams/transform.js:1:1",
    "codes": [
      22230
    ]
  },
  {
    "name": " internal/streams/passthrough.js:1:1",
    "codes": [
      22231
    ]
  },
  {
    "name": " internal/streams/passthrough.js:1:1",
    "codes": [
      22232
    ]
  },
  {
    "name": " internal/net.js:1:1",
    "codes": [
      22233
    ]
  },
  {
    "name": " internal/net.js:1:1",
    "codes": [
      22234
    ]
  },
  {
    "name": " internal/stream_base_commons.js:1:1",
    "codes": [
      22235
    ]
  },
  {
    "name": " internal/stream_base_commons.js:1:1",
    "codes": [
      22236
    ]
  },
  {
    "name": " internal/dtrace.js:1:1",
    "codes": [
      22237
    ]
  },
  {
    "name": " internal/dtrace.js:1:1",
    "codes": [
      22238
    ]
  },
  {
    "name": "protoGetter net.js:719:21",
    "codes": [
      22239
    ]
  },
  {
    "name": " dgram.js:1:1",
    "codes": [
      22240
    ]
  },
  {
    "name": " dgram.js:1:1",
    "codes": [
      22241
    ]
  },
  {
    "name": " internal/dgram.js:1:1",
    "codes": [
      22242
    ]
  },
  {
    "name": " internal/dgram.js:1:1",
    "codes": [
      22243
    ]
  },
  {
    "name": " internal/socket_list.js:1:1",
    "codes": [
      22244
    ]
  },
  {
    "name": " internal/socket_list.js:1:1",
    "codes": [
      22245
    ]
  },
  {
    "name": "customPromiseExecFunction child_process.js:217:35",
    "codes": [
      22246
    ]
  },
  {
    "name": " internal/cluster/round_robin_handle.js:1:1",
    "codes": [
      22247
    ]
  },
  {
    "name": " internal/cluster/round_robin_handle.js:1:1",
    "codes": [
      22248
    ]
  },
  {
    "name": " internal/cluster/utils.js:1:1",
    "codes": [
      22249
    ]
  },
  {
    "name": " internal/cluster/utils.js:1:1",
    "codes": [
      22250
    ]
  },
  {
    "name": " internal/cluster/shared_handle.js:1:1",
    "codes": [
      22251
    ]
  },
  {
    "name": " internal/cluster/shared_handle.js:1:1",
    "codes": [
      22252
    ]
  },
  {
    "name": " internal/cluster/worker.js:1:1",
    "codes": [
      22253
    ]
  },
  {
    "name": " internal/cluster/worker.js:1:1",
    "codes": [
      22254
    ]
  },
  {
    "name": "getESMFacade internal/bootstrap/loaders.js:238:15",
    "codes": [
      22255
    ]
  },
  {
    "name": " internal/bootstrap/loaders.js:247:15",
    "codes": [
      22256
    ]
  },
  {
    "name": "syncExports internal/bootstrap/loaders.js:261:14",
    "codes": [
      22257
    ]
  },
  {
    "name": "getOwn internal/bootstrap/loaders.js:154:16",
    "codes": [
      22258
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "codes": [
      22260
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "codes": [
      22261
    ]
  },
  {
    "name": "get BlockList net.js:1775:16",
    "codes": [
      22262
    ]
  },
  {
    "name": " internal/blocklist.js:1:1",
    "codes": [
      22263
    ]
  },
  {
    "name": " internal/blocklist.js:1:1",
    "codes": [
      22264
    ]
  },
  {
    "name": " internal/socketaddress.js:1:1",
    "codes": [
      22265
    ]
  },
  {
    "name": " internal/socketaddress.js:1:1",
    "codes": [
      22266
    ]
  },
  {
    "name": "get SocketAddress net.js:1779:20",
    "codes": [
      22267
    ]
  },
  {
    "name": " worker_threads.js:1:1",
    "codes": [
      22268
    ]
  },
  {
    "name": " worker_threads.js:1:1",
    "codes": [
      22269
    ]
  },
  {
    "name": " internal/worker.js:1:1",
    "codes": [
      22270
    ]
  },
  {
    "name": " internal/worker.js:1:1",
    "codes": [
      22271
    ]
  },
  {
    "name": " internal/worker/io.js:1:1",
    "codes": [
      22272
    ]
  },
  {
    "name": " internal/worker/io.js:1:1",
    "codes": [
      22273
    ]
  },
  {
    "name": " internal/event_target.js:1:1",
    "codes": [
      22274
    ]
  },
  {
    "name": " internal/event_target.js:1:1",
    "codes": [
      22275
    ]
  },
  {
    "name": "<static_fields_initializer> internal/event_target.js:446:3",
    "codes": [
      22276
    ]
  },
  {
    "name": "<static_fields_initializer> internal/event_target.js:239:3",
    "codes": [
      22277
    ]
  },
  {
    "name": "<static_fields_initializer> internal/event_target.js:171:3",
    "codes": [
      22278
    ]
  },
  {
    "name": " util.js:1:1",
    "codes": [
      22279
    ]
  },
  {
    "name": " util.js:1:1",
    "codes": [
      22280
    ]
  },
  {
    "name": "SafeWeakSet internal/per_context/primordials.js:359:16",
    "codes": [
      22281
    ]
  },
  {
    "name": "defineEventHandler internal/event_target.js:595:28",
    "codes": [
      22282
    ]
  },
  {
    "name": " internal/error_serdes.js:1:1",
    "codes": [
      22283
    ]
  },
  {
    "name": " internal/error_serdes.js:1:1",
    "codes": [
      22284
    ]
  },
  {
    "name": "Socket net.js:281:16",
    "codes": [
      22285
    ]
  },
  {
    "name": "Duplex internal/streams/duplex.js:52:16",
    "codes": [
      22286
    ]
  },
  {
    "name": "Readable internal/streams/readable.js:170:18",
    "codes": [
      22287
    ]
  },
  {
    "name": "Stream internal/streams/legacy.js:10:16",
    "codes": [
      22288
    ]
  },
  {
    "name": "ReadableState internal/streams/readable.js:71:23",
    "codes": [
      22289
    ]
  },
  {
    "name": "getHighWaterMark internal/streams/state.js:19:26",
    "codes": [
      22290
    ]
  },
  {
    "name": "highWaterMarkFrom internal/streams/state.js:10:27",
    "codes": [
      22291
    ]
  },
  {
    "name": "getDefaultHighWaterMark internal/streams/state.js:15:33",
    "codes": [
      22292
    ]
  },
  {
    "name": "BufferList internal/streams/buffer_list.js:12:14",
    "codes": [
      22293
    ]
  },
  {
    "name": "Writable internal/streams/writable.js:218:18",
    "codes": [
      22294
    ]
  },
  {
    "name": "WritableState internal/streams/writable.js:67:23",
    "codes": [
      22295
    ]
  },
  {
    "name": "resetBuffer internal/streams/writable.js:180:21",
    "codes": [
      22296
    ]
  },
  {
    "name": "set internal/streams/readable.js:1169:8",
    "codes": [
      22297
    ]
  },
  {
    "name": "createHandle net.js:135:22",
    "codes": [
      22298
    ]
  },
  {
    "name": "set net.js:1703:6",
    "codes": [
      22299
    ]
  },
  {
    "name": "get net.js:1702:6",
    "codes": [
      22300
    ]
  },
  {
    "name": "Readable.on internal/streams/readable.js:852:33",
    "codes": [
      22301
    ]
  },
  {
    "name": "initSocketHandle net.js:252:26",
    "codes": [
      22302
    ]
  },
  {
    "name": "undestroy internal/streams/destroy.js:109:19",
    "codes": [
      22303
    ]
  },
  {
    "name": "getNewAsyncId net.js:154:23",
    "codes": [
      22304
    ]
  },
  {
    "name": "get internal/bootstrap/pre_execution.js:296:8",
    "codes": [
      22305
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "codes": [
      22306
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "codes": [
      22307
    ]
  },
  {
    "name": "initializeFrozenIntrinsics internal/bootstrap/pre_execution.js:458:36",
    "codes": [
      22308
    ]
  },
  {
    "name": "executeUserEntryPoint internal/modules/run_main.js:69:31",
    "codes": [
      22309
    ]
  },
  {
    "name": "resolveMainPath internal/modules/run_main.js:12:25",
    "codes": [
      22310
    ]
  },
  {
    "name": "shouldUseESMLoader internal/modules/run_main.js:27:28",
    "codes": [
      22311
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/testServer.js:1:1",
    "codes": [
      22312
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/testServer.js:1:1",
    "codes": [
      22313
    ]
  },
  {
    "name": "resolveExports internal/modules/cjs/loader.js:440:24",
    "codes": [
      22314
    ]
  },
  {
    "name": "tryPackage internal/modules/cjs/loader.js:306:20",
    "codes": [
      22315
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/respjs/index.js:1:1",
    "codes": [
      22316
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/node_modules/respjs/index.js:1:1",
    "codes": [
      22317
    ]
  },
  {
    "name": "get events.js:101:6",
    "codes": [
      22318
    ]
  },
  {
    "name": "get events.js:141:16",
    "codes": [
      22319
    ]
  },
  {
    "name": "createServer net.js:174:22",
    "codes": [
      22320
    ]
  },
  {
    "name": "Server net.js:1173:16",
    "codes": [
      22321
    ]
  },
  {
    "name": "Server.listen net.js:1411:35",
    "codes": [
      22322
    ]
  },
  {
    "name": "normalizeArgs net.js:215:23",
    "codes": [
      22323
    ]
  },
  {
    "name": "isPipeName net.js:160:20",
    "codes": [
      22324
    ]
  },
  {
    "name": "toNumber net.js:1223:18",
    "codes": [
      22325
    ]
  },
  {
    "name": "getFlags net.js:131:18",
    "codes": [
      22326
    ]
  },
  {
    "name": "validatePort internal/validators.js:210:22",
    "codes": [
      22327
    ]
  },
  {
    "name": "lookupAndListen net.js:1509:25",
    "codes": [
      22328
    ]
  },
  {
    "name": " dns.js:1:1",
    "codes": [
      22329
    ]
  },
  {
    "name": " dns.js:1:1",
    "codes": [
      22330
    ]
  },
  {
    "name": " internal/dns/utils.js:1:1",
    "codes": [
      22331
    ]
  },
  {
    "name": " internal/dns/utils.js:1:1",
    "codes": [
      22332
    ]
  },
  {
    "name": "Resolver internal/dns/utils.js:54:14",
    "codes": [
      22333
    ]
  },
  {
    "name": "validateTimeout internal/dns/utils.js:40:25",
    "codes": [
      22334
    ]
  },
  {
    "name": "validateTries internal/dns/utils.js:46:23",
    "codes": [
      22335
    ]
  },
  {
    "name": "resolver dns.js:215:18",
    "codes": [
      22336
    ]
  },
  {
    "name": "getDefaultResolver internal/dns/utils.js:163:28",
    "codes": [
      22337
    ]
  },
  {
    "name": "bindDefaultResolver internal/dns/utils.js:171:29",
    "codes": [
      22338
    ]
  },
  {
    "name": " internal/dns/utils.js:172:39",
    "codes": [
      22339
    ]
  },
  {
    "name": "lookup dns.js:97:16",
    "codes": [
      22340
    ]
  },
  {
    "name": "getDefaultVerbatim internal/dns/utils.js:200:28",
    "codes": [
      22341
    ]
  },
  {
    "name": " internal/validators.js:132:39",
    "codes": [
      22342
    ]
  },
  {
    "name": "isIP internal/net.js:39:14",
    "codes": [
      22343
    ]
  },
  {
    "name": "isIPv4 internal/net.js:31:16",
    "codes": [
      22344
    ]
  },
  {
    "name": "isIPv6 internal/net.js:35:16",
    "codes": [
      22345
    ]
  },
  {
    "name": "onlookup dns.js:69:18",
    "codes": [
      22346
    ]
  },
  {
    "name": "doListen net.js:1511:40",
    "codes": [
      22348
    ]
  },
  {
    "name": "listenInCluster net.js:1369:25",
    "codes": [
      22349
    ]
  },
  {
    "name": "setupListenHandle net.js:1284:27",
    "codes": [
      22350
    ]
  },
  {
    "name": " net.js:39:63",
    "codes": [
      22351
    ]
  },
  {
    "name": "createServerHandle net.js:1226:28",
    "codes": [
      22352
    ]
  },
  {
    "name": "uvExceptionWithHostPort internal/errors.js:484:35",
    "codes": [
      22353
    ]
  },
  {
    "name": "uvErrmapGet internal/errors.js:400:21",
    "codes": [
      22354
    ]
  },
  {
    "name": "lazyUv internal/errors.js:391:16",
    "codes": [
      22355
    ]
  },
  {
    "name": "captureLargerStackTrace internal/errors.js:409:35",
    "codes": [
      22356
    ]
  },
  {
    "name": "defaultTriggerAsyncIdScope internal/async_hooks.js:443:36",
    "codes": [
      22357
    ]
  },
  {
    "name": "nextTick internal/process/task_queues.js:103:18",
    "codes": [
      22358
    ]
  },
  {
    "name": "isEmpty internal/fixed_queue.js:95:10",
    "codes": [
      22359
    ]
  },
  {
    "name": "isEmpty internal/fixed_queue.js:67:10",
    "codes": [
      22360
    ]
  },
  {
    "name": "setHasTickScheduled internal/process/task_queues.js:51:29",
    "codes": [
      22361
    ]
  },
  {
    "name": "newAsyncId internal/async_hooks.js:413:20",
    "codes": [
      22362
    ]
  },
  {
    "name": "getDefaultTriggerAsyncId internal/async_hooks.js:429:34",
    "codes": [
      22363
    ]
  },
  {
    "name": "initHooksExist internal/async_hooks.js:466:24",
    "codes": [
      22364
    ]
  },
  {
    "name": "hasHooks internal/async_hooks.js:458:18",
    "codes": [
      22365
    ]
  },
  {
    "name": "push internal/fixed_queue.js:99:7",
    "codes": [
      22366
    ]
  },
  {
    "name": "isFull internal/fixed_queue.js:71:9",
    "codes": [
      22367
    ]
  },
  {
    "name": "push internal/fixed_queue.js:75:7",
    "codes": [
      22368
    ]
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:67:35",
    "codes": [
      22369
    ]
  },
  {
    "name": "shift internal/fixed_queue.js:108:8",
    "codes": [
      22370
    ]
  },
  {
    "name": "shift internal/fixed_queue.js:80:8",
    "codes": [
      22371
    ]
  },
  {
    "name": "emitBeforeScript internal/async_hooks.js:497:26",
    "codes": [
      22372
    ]
  },
  {
    "name": "pushAsyncContext internal/async_hooks.js:527:26",
    "codes": [
      22373
    ]
  },
  {
    "name": "emitErrorNT net.js:1357:21",
    "codes": [
      22374
    ]
  },
  {
    "name": " /home/moritz/workspaces/ioBroker.js-controller/testServer.js:51:29",
    "codes": [
      22375
    ]
  },
  {
    "name": "warn internal/console/constructor.js:368:7",
    "codes": [
      22376
    ]
  },
  {
    "name": "value internal/console/constructor.js:333:20",
    "codes": [
      22377
    ]
  },
  {
    "name": "get internal/console/constructor.js:216:14",
    "codes": [
      22378
    ]
  },
  {
    "name": "getStderr internal/bootstrap/switches/is_main_thread.js:132:19",
    "codes": [
      22379
    ]
  },
  {
    "name": "createWritableStdioStream internal/bootstrap/switches/is_main_thread.js:41:35",
    "codes": [
      22380
    ]
  },
  {
    "name": " tty.js:1:1",
    "codes": [
      22381
    ]
  },
  {
    "name": " tty.js:1:1",
    "codes": [
      22382
    ]
  },
  {
    "name": " internal/tty.js:1:1",
    "codes": [
      22383
    ]
  },
  {
    "name": " internal/tty.js:1:1",
    "codes": [
      22384
    ]
  },
  {
    "name": "WriteStream tty.js:85:21",
    "codes": [
      22385
    ]
  },
  {
    "name": "value internal/console/constructor.js:304:20",
    "codes": [
      22386
    ]
  },
  {
    "name": "getColorDepth internal/tty.js:106:23",
    "codes": [
      22387
    ]
  },
  {
    "name": "formatWithOptions internal/util/inspect.js:1856:27",
    "codes": [
      22388
    ]
  },
  {
    "name": "formatWithOptionsInternal internal/util/inspect.js:1864:35",
    "codes": [
      22389
    ]
  },
  {
    "name": "value internal/console/constructor.js:262:20",
    "codes": [
      22390
    ]
  },
  {
    "name": "listenerCount events.js:732:23",
    "codes": [
      22391
    ]
  },
  {
    "name": "once events.js:538:44",
    "codes": [
      22392
    ]
  },
  {
    "name": "_onceWrap events.js:524:19",
    "codes": [
      22393
    ]
  },
  {
    "name": "Writable.write internal/streams/writable.js:258:36",
    "codes": [
      22394
    ]
  },
  {
    "name": "writeOrBuffer internal/streams/writable.js:334:23",
    "codes": [
      22395
    ]
  },
  {
    "name": "Socket._write net.js:809:35",
    "codes": [
      22396
    ]
  },
  {
    "name": "Socket._writeGeneric net.js:772:42",
    "codes": [
      22397
    ]
  },
  {
    "name": "_unrefTimer net.js:405:52",
    "codes": [
      22398
    ]
  },
  {
    "name": "writeGeneric internal/stream_base_commons.js:143:22",
    "codes": [
      22399
    ]
  },
  {
    "name": "createWriteWrap internal/stream_base_commons.js:106:25",
    "codes": [
      22400
    ]
  },
  {
    "name": "handleWriteReq internal/stream_base_commons.js:47:24",
    "codes": [
      22401
    ]
  },
  {
    "name": "afterWriteDispatched internal/stream_base_commons.js:151:30",
    "codes": [
      22402
    ]
  },
  {
    "name": "onwrite internal/streams/writable.js:394:17",
    "codes": [
      22403
    ]
  },
  {
    "name": "Readable.removeListener internal/streams/readable.js:882:45",
    "codes": [
      22404
    ]
  },
  {
    "name": "removeListener events.js:567:28",
    "codes": [
      22405
    ]
  },
  {
    "name": "destroyHooksExist internal/async_hooks.js:474:27",
    "codes": [
      22406
    ]
  },
  {
    "name": "emitAfterScript internal/async_hooks.js:505:25",
    "codes": [
      22407
    ]
  },
  {
    "name": "popAsyncContext internal/async_hooks.js:541:25",
    "codes": [
      22408
    ]
  },
  {
    "name": "enabledHooksExist internal/async_hooks.js:462:27",
    "codes": [
      22409
    ]
  },
  {
    "name": "afterWriteTick internal/streams/writable.js:451:24",
    "codes": [
      22410
    ]
  },
  {
    "name": "afterWrite internal/streams/writable.js:456:20",
    "codes": [
      22411
    ]
  },
  {
    "name": "get internal/streams/duplex.js:94:8",
    "codes": [
      22412
    ]
  },
  {
    "name": " internal/console/constructor.js:343:10",
    "codes": [
      22413
    ]
  },
  {
    "name": "finishMaybe internal/streams/writable.js:635:21",
    "codes": [
      22414
    ]
  },
  {
    "name": "needFinish internal/streams/writable.js:600:20",
    "codes": [
      22415
    ]
  },
  {
    "name": "processPromiseRejections internal/process/promises.js:190:34",
    "codes": [
      22416
    ]
  },
  {
    "name": "setHasRejectionToWarn internal/process/promises.js:67:31",
    "codes": [
      22417
    ]
  }
],
  "ticks": [
    {
  "tm": 495,
  "vm": 6,
  "s": [
    15494,
    68
  ]
},
    {
  "tm": 1821,
  "vm": 6,
  "s": [
    18916,
    444
  ]
},
    {
  "tm": 3072,
  "vm": 6,
  "s": [
    14469,
    116
  ]
},
    {
  "tm": 4710,
  "vm": 6,
  "s": [
    0,
    13450056
  ]
},
    {
  "tm": 5790,
  "vm": 6,
  "s": [
    14469,
    116
  ]
},
    {
  "tm": 6981,
  "vm": 2,
  "s": [
    0,
    12085528
  ]
},
    {
  "tm": 8326,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    21868,
    34,
    21867,
    89
  ]
},
    {
  "tm": 9604,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    21867,
    156
  ]
},
    {
  "tm": 10736,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    21883,
    427,
    21870,
    114,
    21869,
    80,
    21881,
    8,
    21867,
    168
  ]
},
    {
  "tm": 11846,
  "vm": 3,
  "s": [
    0,
    9504720,
    -1,
    0,
    0,
    16422884,
    21885,
    1413,
    21870,
    114,
    21869,
    80,
    21883,
    427,
    21870,
    114,
    21869,
    80,
    21881,
    8,
    21867,
    168
  ]
},
    {
  "tm": 13181,
  "vm": 0,
  "s": [
    0,
    15965176,
    21869,
    26,
    21900,
    668,
    21870,
    114,
    21869,
    80,
    21898,
    8,
    21867,
    174
  ]
},
    {
  "tm": 14276,
  "vm": 6,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    21904,
    230,
    21870,
    114,
    21869,
    80,
    21900,
    916,
    21870,
    114,
    21869,
    80,
    21898,
    8,
    21867,
    174
  ]
},
    {
  "tm": 15591,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    21867,
    615
  ]
},
    {
  "tm": 16745,
  "vm": 0,
  "s": [
    0,
    10251664,
    -1,
    0,
    21938,
    956,
    21870,
    114,
    21869,
    80,
    21936,
    34,
    21870,
    114,
    21869,
    80,
    21934,
    8,
    21867,
    661
  ]
},
    {
  "tm": 17929,
  "vm": 6,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    21950,
    661,
    21870,
    114,
    21869,
    80,
    21867,
    680
  ]
},
    {
  "tm": 19255,
  "vm": 3,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    21958,
    180,
    21870,
    114,
    21869,
    80,
    21867,
    796
  ]
},
    {
  "tm": 20554,
  "vm": 2,
  "s": [
    0,
    12220884,
    -1,
    0,
    21986,
    16,
    21982,
    195
  ]
},
    {
  "tm": 21765,
  "vm": 3,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22013,
    28,
    22002,
    30,
    21997,
    19
  ]
},
    {
  "tm": 22966,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22032,
    281,
    21870,
    114,
    21869,
    80,
    22030,
    8,
    22002,
    161,
    21997,
    19
  ]
},
    {
  "tm": 24300,
  "vm": 1,
  "s": [
    15444,
    628
  ]
},
    {
  "tm": 25344,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22056,
    8,
    22002,
    182,
    21997,
    19
  ]
},
    {
  "tm": 26442,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22062,
    60,
    21870,
    114,
    21869,
    80,
    22058,
    895,
    21870,
    114,
    21869,
    80,
    22056,
    8,
    22002,
    182,
    21997,
    19
  ]
},
    {
  "tm": 27698,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22072,
    21,
    21870,
    114,
    21869,
    80,
    22070,
    239,
    21870,
    114,
    21869,
    80,
    22068,
    79,
    21870,
    114,
    21869,
    80,
    22058,
    1179,
    21870,
    114,
    21869,
    80,
    22056,
    8,
    22002,
    182,
    21997,
    19
  ]
},
    {
  "tm": 28868,
  "vm": 6,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22082,
    662,
    21870,
    114,
    21869,
    80,
    22080,
    109,
    21870,
    114,
    21869,
    80,
    22070,
    313,
    21870,
    114,
    21869,
    80,
    22068,
    79,
    21870,
    114,
    21869,
    80,
    22058,
    1179,
    21870,
    114,
    21869,
    80,
    22056,
    8,
    22002,
    182,
    21997,
    19
  ]
},
    {
  "tm": 30150,
  "vm": 3,
  "s": [
    0,
    11896108,
    -1,
    0,
    22056,
    26,
    22002,
    182,
    21997,
    19
  ]
},
    {
  "tm": 31355,
  "vm": 2,
  "s": [
    14114,
    304,
    -1,
    0,
    22141,
    39,
    22140,
    50,
    22139,
    26,
    22136,
    389,
    22127,
    680,
    22119,
    154,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 32541,
  "vm": 2,
  "s": [
    0,
    8215144,
    -1,
    0,
    22174,
    110,
    22173,
    33,
    22160,
    182,
    22159,
    182,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 33844,
  "vm": 6,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22201,
    224,
    21870,
    114,
    21869,
    80,
    22199,
    33,
    21870,
    114,
    22197,
    49,
    22155,
    60,
    22119,
    338,
    22118,
    85,
    22194,
    10,
    22192,
    4,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 35141,
  "vm": 3,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22208,
    485,
    21870,
    114,
    21869,
    80,
    22205,
    441,
    21870,
    114,
    21869,
    80,
    22203,
    491,
    21870,
    114,
    21869,
    80,
    22201,
    224,
    21870,
    114,
    21869,
    80,
    22199,
    33,
    21870,
    114,
    22197,
    49,
    22155,
    60,
    22119,
    338,
    22118,
    85,
    22194,
    10,
    22192,
    4,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 36484,
  "vm": 3,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22220,
    396,
    21870,
    114,
    21869,
    80,
    22210,
    65,
    21870,
    114,
    21869,
    80,
    22208,
    485,
    21870,
    114,
    21869,
    80,
    22205,
    441,
    21870,
    114,
    21869,
    80,
    22203,
    491,
    21870,
    114,
    21869,
    80,
    22201,
    224,
    21870,
    114,
    21869,
    80,
    22199,
    33,
    21870,
    114,
    22197,
    49,
    22155,
    60,
    22119,
    338,
    22118,
    85,
    22194,
    10,
    22192,
    4,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 37959,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22205,
    455,
    21870,
    114,
    21869,
    80,
    22203,
    491,
    21870,
    114,
    21869,
    80,
    22201,
    224,
    21870,
    114,
    21869,
    80,
    22199,
    33,
    21870,
    114,
    22197,
    49,
    22155,
    60,
    22119,
    338,
    22118,
    85,
    22194,
    10,
    22192,
    4,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 39264,
  "vm": 3,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22205,
    629,
    21870,
    114,
    21869,
    80,
    22203,
    491,
    21870,
    114,
    21869,
    80,
    22201,
    224,
    21870,
    114,
    21869,
    80,
    22199,
    33,
    21870,
    114,
    22197,
    49,
    22155,
    60,
    22119,
    338,
    22118,
    85,
    22194,
    10,
    22192,
    4,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 40409,
  "vm": 1,
  "s": [
    13519,
    292264
  ]
},
    {
  "tm": 41727,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22273,
    307,
    21870,
    114,
    21869,
    80,
    22271,
    525,
    21870,
    114,
    21869,
    80,
    22269,
    4,
    21870,
    114,
    22197,
    49,
    22155,
    60,
    22119,
    338,
    22118,
    85,
    22194,
    10,
    22261,
    20,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 42891,
  "vm": 0,
  "s": [
    0,
    11462912,
    -1,
    0,
    0,
    16242580,
    22284,
    303,
    21870,
    114,
    21869,
    80,
    22271,
    603,
    21870,
    114,
    21869,
    80,
    22269,
    4,
    21870,
    114,
    22197,
    49,
    22155,
    60,
    22119,
    338,
    22118,
    85,
    22194,
    10,
    22261,
    20,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22118,
    85,
    22113,
    160,
    22112,
    56,
    22002,
    227,
    21997,
    19
  ]
},
    {
  "tm": 44163,
  "vm": 6,
  "s": [
    0,
    6496208,
    -1,
    0,
    22164,
    108,
    22160,
    64,
    22159,
    182,
    22156,
    159,
    22119,
    445,
    22309,
    86,
    21997,
    61
  ]
},
    {
  "tm": 45473,
  "vm": 2,
  "s": [
    0,
    6771760,
    -1,
    0,
    21870,
    76,
    21869,
    80,
    22330,
    271,
    21870,
    114,
    21869,
    80,
    22328,
    43,
    22322,
    421,
    22313,
    187,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22309,
    86,
    21997,
    61
  ]
},
    {
  "tm": 46665,
  "vm": 6,
  "s": [
    0,
    6705368,
    -1,
    0,
    22340,
    454,
    22328,
    81,
    22322,
    421,
    22313,
    187,
    22185,
    519,
    22159,
    196,
    22156,
    159,
    22119,
    445,
    22309,
    86,
    21997,
    61
  ]
},
    {
  "tm": 47890,
  "vm": 2,
  "s": [
    0,
    12251440,
    -1,
    0,
    22369,
    15
  ]
},
    {
  "tm": 49217,
  "vm": 3,
  "s": [
    0,
    8239648,
    -1,
    0,
    22399,
    32,
    22397,
    173,
    22396,
    21,
    22395,
    193,
    22394,
    315,
    22390,
    207,
    22376,
    36,
    0,
    7483664,
    22375,
    23,
    21989,
    297,
    22374,
    10,
    22369,
    145
  ]
}
  ],
  "scripts": []}
